{
  
    
        "post0": {
            "title": "Title",
            "content": "import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns %matplotlib inline titanic_df = pd.read_csv(&#39;./train.csv&#39;) titanic_df.head(3) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . Passengerid: 탑승자 데이터 일련번호 | survived: 생존 여부, 0 = 사망, 1 = 생존 | Pclass: 티켓의 선실 등급, 1 = 일등석, 2 = 이등석, 3 = 삼등석 | sex: 탑승자 성별 | name: 탑승자 이름 | Age: 탑승자 나이 | sibsp: 같이 탑승한 형제자매 또는 배우자 인원수 | parch: 같이 탑승한 부모님 또는 어린이 인원수 | ticket: 티켓 번호 | fare: 요금 | cabin: 선실 번호 | embarked: 중간 정착 항구 C = Cherbourg, Q = Queenstown, S = Southampton | . print(&#39;### train 데이터 정보 ### n&#39;) print(titanic_df.info()) . ### train 데이터 정보 ### &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 12 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 891 non-null int64 1 Survived 891 non-null int64 2 Pclass 891 non-null int64 3 Name 891 non-null object 4 Sex 891 non-null object 5 Age 714 non-null float64 6 SibSp 891 non-null int64 7 Parch 891 non-null int64 8 Ticket 891 non-null object 9 Fare 891 non-null float64 10 Cabin 204 non-null object 11 Embarked 889 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 83.7+ KB None . titanic_df.describe() . PassengerId Survived Pclass Age SibSp Parch Fare . count 891.000000 | 891.000000 | 891.000000 | 714.000000 | 891.000000 | 891.000000 | 891.000000 | . mean 446.000000 | 0.383838 | 2.308642 | 29.699118 | 0.523008 | 0.381594 | 32.204208 | . std 257.353842 | 0.486592 | 0.836071 | 14.526497 | 1.102743 | 0.806057 | 49.693429 | . min 1.000000 | 0.000000 | 1.000000 | 0.420000 | 0.000000 | 0.000000 | 0.000000 | . 25% 223.500000 | 0.000000 | 2.000000 | 20.125000 | 0.000000 | 0.000000 | 7.910400 | . 50% 446.000000 | 0.000000 | 3.000000 | 28.000000 | 0.000000 | 0.000000 | 14.454200 | . 75% 668.500000 | 1.000000 | 3.000000 | 38.000000 | 1.000000 | 0.000000 | 31.000000 | . max 891.000000 | 1.000000 | 3.000000 | 80.000000 | 8.000000 | 6.000000 | 512.329200 | . null &#52972;&#47100; &#52376;&#47532; . titanic_df[&#39;Age&#39;].fillna(titanic_df[&#39;Age&#39;].mean(), inplace=True) titanic_df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) titanic_df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) print(&#39;컬럼별 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum()) print(&#39; n총 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum().sum()) . 컬럼별 데이터 세트 null 값 갯수: PassengerId 0 Survived 0 Pclass 0 Name 0 Sex 0 Age 0 SibSp 0 Parch 0 Ticket 0 Fare 0 Cabin 0 Embarked 0 dtype: int64 총 데이터 세트 null 값 갯수: 0 . &#51452;&#50836; &#52972;&#47100; EDA . # 조건 print(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;], &#39; n&#39;) # 조건의 인덱스 print(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index, &#39; n&#39;) # 조건 인덱스 후 리스트변환 print(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index.to_list(), &#39; n&#39;) . Name object Sex object Ticket object Cabin object Embarked object dtype: object Index([&#39;Name&#39;, &#39;Sex&#39;, &#39;Ticket&#39;, &#39;Cabin&#39;, &#39;Embarked&#39;], dtype=&#39;object&#39;) [&#39;Name&#39;, &#39;Sex&#39;, &#39;Ticket&#39;, &#39;Cabin&#39;, &#39;Embarked&#39;] . print(&#39;Sex 값 분포 : n&#39;, titanic_df[&#39;Sex&#39;].value_counts()) print(&#39; n Cabin 값 분포 : n&#39;, titanic_df[&#39;Cabin&#39;].value_counts()) print(&#39; n Embarked 값 분포 : n&#39;, titanic_df[&#39;Embarked&#39;].value_counts()) . Sex 값 분포 : male 577 female 314 Name: Sex, dtype: int64 Cabin 값 분포 : N 687 C23 C25 C27 4 G6 4 B96 B98 4 C22 C26 3 ... E34 1 C7 1 C54 1 E36 1 C148 1 Name: Cabin, Length: 148, dtype: int64 Embarked 값 분포 : S 644 C 168 Q 77 N 2 Name: Embarked, dtype: int64 . titanic_df[&#39;Cabin&#39;].str[:1] . 0 N 1 C 2 N 3 C 4 N .. 886 N 887 B 888 N 889 C 890 N Name: Cabin, Length: 891, dtype: object . titanic_df[&#39;Cabin&#39;] = titanic_df[&#39;Cabin&#39;].str[:1] print(titanic_df[&#39;Cabin&#39;].head(3)) . 0 N 1 C 2 N Name: Cabin, dtype: object . titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;]) . &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002725F96AB80&gt; . titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;])[&#39;Survived&#39;].count() . Sex Survived female 0 81 1 233 male 0 468 1 109 Name: Survived, dtype: int64 . titanic_df[&#39;Survived&#39;].value_counts() . 0 549 1 342 Name: Survived, dtype: int64 . sns.barplot(x=&#39;Sex&#39;, y=&#39;Survived&#39;, data=titanic_df) . &lt;AxesSubplot:xlabel=&#39;Sex&#39;, ylabel=&#39;Survived&#39;&gt; . sns.barplot(x=&#39;Pclass&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df) . &lt;AxesSubplot:xlabel=&#39;Pclass&#39;, ylabel=&#39;Survived&#39;&gt; . def get_category(age): cat=&#39;&#39; if age &lt;= -1: cat = &#39;Unknown&#39; elif age &lt;= 5: cat = &#39;Baby&#39; elif age &lt;= 12: cat = &#39;Child&#39; elif age &lt;= 18: cat = &#39;Teenage&#39; elif age &lt;= 25: cat = &#39;Student&#39; elif age &lt;= 35: cat = &#39;Young Adult&#39; elif age &lt;= 60: cat = &#39;Adult&#39; else: cat = &#39;Elderly&#39; return cat # 막대 그래프의 크기 figure를 더 크게 설정 plt.figure(figsize=(10, 6)) # x 축의 값을 순차적으로 표시하기 위한 설정 group_names = [&#39;Unknown&#39;, &#39;Baby&#39;, &#39;Child&#39;, &#39;Teenager&#39;, &#39;Student&#39;, &#39;Young Adult&#39;, &#39;Adult&#39;, &#39;Elderly&#39;] # lambda 식에 위에서 생성한 get_category() 함수를 반환값으로 지정 # get_category(x)는 입력값으로 &#39;Age&#39; 컬럼값을 받아서 해당하는 cat 반환 titanic_df[&#39;Age_cat&#39;] = titanic_df[&#39;Age&#39;].apply(lambda x: get_category(x)) sns.barplot(x=&#39;Age_cat&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df, order=group_names) titanic_df.drop(&#39;Age_cat&#39;, axis=1, inplace=True) . LabelEncoding . from sklearn.preprocessing import LabelEncoder def encode_features(dataDF): features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] le = LabelEncoder() for feature in features: le.fit(dataDF[feature]) dataDF[feature] = le.transform(dataDF[feature]) return dataDF titanic_df = encode_features(titanic_df) # encode_features 함수에서 변환된 3개 컬럼값이 원본 titanic_df에 덮어써짐 titanic_df.head(3) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | 1 | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | 7 | 3 | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | 0 | 38.0 | 1 | 0 | PC 17599 | 71.2833 | 2 | 0 | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | 0 | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | 7 | 3 | . from sklearn.preprocessing import LabelEncoder # null 처리함수 def fillna(df): df[&#39;Age&#39;].fillna(df[&#39;Age&#39;].mean(), inplace=True) df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) return df # 머신러닝 알고리즘에 불필요한 피처제거 def drop_features(df): df.drop([&#39;PassengerId&#39;, &#39;Name&#39;, &#39;Ticket&#39;], axis=1, inplace=True) return df # 레이블 인코딩 수행 def format_features(df): df[&#39;Cabin&#39;] = df[&#39;Cabin&#39;].str[:1] features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] for feature in features: le = LabelEncoder() le = le.fit(df[feature]) df[feature] = le.transform(df[feature]) return df # 앞에서 설정한 Data Preprocessing 함수 호출 def transform_features(df): df = fillna(df) df = drop_features(df) df = format_features(df) return df . titanic_df.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | 1 | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | 7 | 3 | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | 0 | 38.0 | 1 | 0 | PC 17599 | 71.2833 | 2 | 0 | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | 0 | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | 7 | 3 | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | 0 | 35.0 | 1 | 0 | 113803 | 53.1000 | 2 | 3 | . 4 5 | 0 | 3 | Allen, Mr. William Henry | 1 | 35.0 | 0 | 0 | 373450 | 8.0500 | 7 | 3 | . titanic_df = pd.read_csv(&#39;./train.csv&#39;) y_titanic_df = titanic_df[&#39;Survived&#39;] X_titanic_df = titanic_df.drop(&#39;Survived&#39;, axis=1, inplace=False) X_titanic_df = transform_features(X_titanic_df) . X_titanic_df.head(3) . Pclass Sex Age SibSp Parch Fare Cabin Embarked . 0 3 | 1 | 22.0 | 1 | 0 | 7.2500 | 7 | 3 | . 1 1 | 0 | 38.0 | 1 | 0 | 71.2833 | 2 | 0 | . 2 3 | 0 | 26.0 | 0 | 0 | 7.9250 | 7 | 3 | . 피처 데이터와 타겟 데이터를 기준으로 트레인 데이터 셋과 테스트 데이터 셋으로 나눈다 | . from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X_titanic_df, y_titanic_df, test_size=0.2, random_state=11) print(X_train.shape, X_test.shape, y_train.shape, y_test.shape) . (712, 8) (179, 8) (712,) (179,) . - . from sklearn.tree import DecisionTreeClassifier from sklearn.ensemble import RandomForestClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # 결정트리, Random Forest, 로지스틱 회귀를 위한 사이킷런 Classifier 클래스 생성 dt_clf = DecisionTreeClassifier(random_state=11) rf_clf = RandomForestClassifier(random_state=11) lr_clf = LogisticRegression(solver=&#39;liblinear&#39;) # DecisionTreeClassifier 학습/예측/평가 dt_clf.fit(X_train, y_train) dt_pred = dt_clf.predict(X_test) print(&#39;DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, dt_pred))) # RandomFroestClassifier 학습/예측/평가 rf_clf.fit(X_train, y_train) rf_pred = rf_clf.predict(X_test) print(&#39;RandomForestClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, rf_pred))) # LogisticRegression 학습/예측/평가 lr_clf.fit(X_train, y_train) lr_pred = lr_clf.predict(X_test) print(&#39;LogisticRegression 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, lr_pred))) . DecisionTreeClassifier 정확도: 0.7877 RandomForestClassifier 정확도: 0.8547 LogisticRegression 정확도: 0.8659 . y_test_ndarray = np.array(y_test) print(y_test_ndarray) . [1 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 1 0 0 1 1 0 1 1 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 0 1 0 0 1 0 1 1 1 1 1 0 1 1 0 1 1 0 0 0 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 1 0 0 1 1 0 0 0 1 0 1 0 1 0 0 1 1 0 1 0 1 0 0 0 0 0 0 1] . dt_pred . array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=int64) . help(accuracy_score) . Help on function accuracy_score in module sklearn.metrics._classification: accuracy_score(y_true, y_pred, *, normalize=True, sample_weight=None) Accuracy classification score. In multilabel classification, this function computes subset accuracy: the set of labels predicted for a sample must *exactly* match the corresponding set of labels in y_true. Read more in the :ref:`User Guide &lt;accuracy_score&gt;`. Parameters - y_true : 1d array-like, or label indicator array / sparse matrix Ground truth (correct) labels. y_pred : 1d array-like, or label indicator array / sparse matrix Predicted labels, as returned by a classifier. normalize : bool, default=True If ``False``, return the number of correctly classified samples. Otherwise, return the fraction of correctly classified samples. sample_weight : array-like of shape (n_samples,), default=None Sample weights. Returns - score : float If ``normalize == True``, return the fraction of correctly classified samples (float), else returns the number of correctly classified samples (int). The best performance is 1 with ``normalize == True`` and the number of samples with ``normalize == False``. See Also -- balanced_accuracy_score : Compute the balanced accuracy to deal with imbalanced datasets. jaccard_score : Compute the Jaccard similarity coefficient score. hamming_loss : Compute the average Hamming loss or Hamming distance between two sets of samples. zero_one_loss : Compute the Zero-one classification loss. By default, the function will return the percentage of imperfectly predicted subsets. Notes -- In binary classification, this function is equal to the `jaccard_score` function. Examples -- &gt;&gt;&gt; from sklearn.metrics import accuracy_score &gt;&gt;&gt; y_pred = [0, 2, 1, 3] &gt;&gt;&gt; y_true = [0, 1, 2, 3] &gt;&gt;&gt; accuracy_score(y_true, y_pred) 0.5 &gt;&gt;&gt; accuracy_score(y_true, y_pred, normalize=False) 2 In the multilabel case with binary label indicators: &gt;&gt;&gt; import numpy as np &gt;&gt;&gt; accuracy_score(np.array([[0, 1], [1, 1]]), np.ones((2, 2))) 0.5 . X_titanic_df.values[[0, 1, 2, 3, 4, 5]] . array([[ 3. , 1. , 22. , 1. , 0. , 7.25 , 7. , 3. ], [ 1. , 0. , 38. , 1. , 0. , 71.2833 , 2. , 0. ], [ 3. , 0. , 26. , 0. , 0. , 7.925 , 7. , 3. ], [ 1. , 0. , 35. , 1. , 0. , 53.1 , 2. , 3. ], [ 3. , 1. , 35. , 0. , 0. , 8.05 , 7. , 3. ], [ 3. , 1. , 29.69911765, 0. , 0. , 8.4583 , 7. , 2. ]]) . from sklearn.model_selection import KFold def exec_kfold(clf, folds=5): # 폴드 세트를 5개인 KFold객체를 생성, 폴드 수만큼 예측결과 저장을 위한 리스트 객체 생성 kfold = KFold(n_splits=folds) scores = [] # KFold 교차 검증수행 for iter_count, (train_index, test_index) in enumerate(kfold.split(X_titanic_df)): # X_titanic_df 데이터에서 교차 검증별로 학습과 검증 데이터를 가리키는 index 생성 X_train, X_test = X_titanic_df.values[train_index], X_titanic_df.values[test_index] # ndarray로 결과값이 나옴 y_train, y_test = y_titanic_df.values[train_index], y_titanic_df.values[test_index] # Classifier 학습, 예측, 정확도 계산 clf.fit(X_train, y_train) predictions = clf.predict(X_test) accuracy = accuracy_score(y_test, predictions) scores.append(accuracy) print(&#39;교차 검증 {0} 정확도: {1:4f}&#39;.format(iter_count, accuracy)) # 5개 fold에서 평균 정확도 계산 mean_score = np.mean(scores) print(&#39;평균 정확도: {0: 4f}&#39;.format(mean_score)) # exec_fold 호출 exec_kfold(dt_clf, folds=5) . 교차 검증 0 정확도: 0.754190 교차 검증 1 정확도: 0.780899 교차 검증 2 정확도: 0.786517 교차 검증 3 정확도: 0.769663 교차 검증 4 정확도: 0.820225 평균 정확도: 0.782299 . from sklearn.model_selection import GridSearchCV parameters = {&#39;max_depth&#39;:[2,3,5,10], &#39;min_samples_split&#39;:[2,3,5], &#39;min_samples_leaf&#39;:[1,5,8]} grid_dclf = GridSearchCV(dt_clf, param_grid=parameters, scoring=&#39;accuracy&#39;, cv=5) grid_dclf.fit(X_train, y_train) print(&#39;GridSearchCV 최적 하이퍼 파라미터: &#39;, grid_dclf.best_params_) print(&#39;GridSearchCV 최고 정확도: {0: .4f}&#39;.format(grid_dclf.best_score_)) best_dclf = grid_dclf.best_estimator_ # 최적값을 찾음 # GridSearchCV의 최적 하이퍼 파라미터로 학습된 Estimator로 예측 및 평가 수행 dprediction = best_dclf.predict(X_test) # 최적값 기반 예측 수행 accuracy = accuracy_score(y_test, dprediction) print(&#39;테스트 세트에서의 DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy)) . GridSearchCV 최적 하이퍼 파라미터: {&#39;max_depth&#39;: 3, &#39;min_samples_leaf&#39;: 5, &#39;min_samples_split&#39;: 2} GridSearchCV 최고 정확도: 0.7992 테스트 세트에서의 DecisionTreeClassifier 정확도: 0.8715 . help(GridSearchCV) . Help on class GridSearchCV in module sklearn.model_selection._search: class GridSearchCV(BaseSearchCV) | GridSearchCV(estimator, param_grid, *, scoring=None, n_jobs=None, refit=True, cv=None, verbose=0, pre_dispatch=&#39;2*n_jobs&#39;, error_score=nan, return_train_score=False) | | Exhaustive search over specified parameter values for an estimator. | | Important members are fit, predict. | | GridSearchCV implements a &#34;fit&#34; and a &#34;score&#34; method. | It also implements &#34;score_samples&#34;, &#34;predict&#34;, &#34;predict_proba&#34;, | &#34;decision_function&#34;, &#34;transform&#34; and &#34;inverse_transform&#34; if they are | implemented in the estimator used. | | The parameters of the estimator used to apply these methods are optimized | by cross-validated grid-search over a parameter grid. | | Read more in the :ref:`User Guide &lt;grid_search&gt;`. | | Parameters | - | estimator : estimator object | This is assumed to implement the scikit-learn estimator interface. | Either estimator needs to provide a ``score`` function, | or ``scoring`` must be passed. | | param_grid : dict or list of dictionaries | Dictionary with parameters names (`str`) as keys and lists of | parameter settings to try as values, or a list of such | dictionaries, in which case the grids spanned by each dictionary | in the list are explored. This enables searching over any sequence | of parameter settings. | | scoring : str, callable, list, tuple or dict, default=None | Strategy to evaluate the performance of the cross-validated model on | the test set. | | If `scoring` represents a single score, one can use: | | - a single string (see :ref:`scoring_parameter`); | - a callable (see :ref:`scoring`) that returns a single value. | | If `scoring` represents multiple scores, one can use: | | - a list or tuple of unique strings; | - a callable returning a dictionary where the keys are the metric | names and the values are the metric scores; | - a dictionary with metric names as keys and callables a values. | | See :ref:`multimetric_grid_search` for an example. | | n_jobs : int, default=None | Number of jobs to run in parallel. | ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. | ``-1`` means using all processors. See :term:`Glossary &lt;n_jobs&gt;` | for more details. | | .. versionchanged:: v0.20 | `n_jobs` default changed from 1 to None | | refit : bool, str, or callable, default=True | Refit an estimator using the best found parameters on the whole | dataset. | | For multiple metric evaluation, this needs to be a `str` denoting the | scorer that would be used to find the best parameters for refitting | the estimator at the end. | | Where there are considerations other than maximum score in | choosing a best estimator, ``refit`` can be set to a function which | returns the selected ``best_index_`` given ``cv_results_``. In that | case, the ``best_estimator_`` and ``best_params_`` will be set | according to the returned ``best_index_`` while the ``best_score_`` | attribute will not be available. | | The refitted estimator is made available at the ``best_estimator_`` | attribute and permits using ``predict`` directly on this | ``GridSearchCV`` instance. | | Also for multiple metric evaluation, the attributes ``best_index_``, | ``best_score_`` and ``best_params_`` will only be available if | ``refit`` is set and all of them will be determined w.r.t this specific | scorer. | | See ``scoring`` parameter to know more about multiple metric | evaluation. | | .. versionchanged:: 0.20 | Support for callable added. | | cv : int, cross-validation generator or an iterable, default=None | Determines the cross-validation splitting strategy. | Possible inputs for cv are: | | - None, to use the default 5-fold cross validation, | - integer, to specify the number of folds in a `(Stratified)KFold`, | - :term:`CV splitter`, | - An iterable yielding (train, test) splits as arrays of indices. | | For integer/None inputs, if the estimator is a classifier and ``y`` is | either binary or multiclass, :class:`StratifiedKFold` is used. In all | other cases, :class:`KFold` is used. These splitters are instantiated | with `shuffle=False` so the splits will be the same across calls. | | Refer :ref:`User Guide &lt;cross_validation&gt;` for the various | cross-validation strategies that can be used here. | | .. versionchanged:: 0.22 | ``cv`` default value if None changed from 3-fold to 5-fold. | | verbose : int | Controls the verbosity: the higher, the more messages. | | - &gt;1 : the computation time for each fold and parameter candidate is | displayed; | - &gt;2 : the score is also displayed; | - &gt;3 : the fold and candidate parameter indexes are also displayed | together with the starting time of the computation. | | pre_dispatch : int, or str, default=&#39;2*n_jobs&#39; | Controls the number of jobs that get dispatched during parallel | execution. Reducing this number can be useful to avoid an | explosion of memory consumption when more jobs get dispatched | than CPUs can process. This parameter can be: | | - None, in which case all the jobs are immediately | created and spawned. Use this for lightweight and | fast-running jobs, to avoid delays due to on-demand | spawning of the jobs | | - An int, giving the exact number of total jobs that are | spawned | | - A str, giving an expression as a function of n_jobs, | as in &#39;2*n_jobs&#39; | | error_score : &#39;raise&#39; or numeric, default=np.nan | Value to assign to the score if an error occurs in estimator fitting. | If set to &#39;raise&#39;, the error is raised. If a numeric value is given, | FitFailedWarning is raised. This parameter does not affect the refit | step, which will always raise the error. | | return_train_score : bool, default=False | If ``False``, the ``cv_results_`` attribute will not include training | scores. | Computing training scores is used to get insights on how different | parameter settings impact the overfitting/underfitting trade-off. | However computing the scores on the training set can be computationally | expensive and is not strictly required to select the parameters that | yield the best generalization performance. | | .. versionadded:: 0.19 | | .. versionchanged:: 0.21 | Default value was changed from ``True`` to ``False`` | | Attributes | - | cv_results_ : dict of numpy (masked) ndarrays | A dict with keys as column headers and values as columns, that can be | imported into a pandas ``DataFrame``. | | For instance the below given table | | ++--++--+++ | |param_kernel|param_gamma|param_degree|split0_test_score|...|rank_t...| | +============+===========+============+=================+===+=========+ | | &#39;poly&#39; | -- | 2 | 0.80 |...| 2 | | ++--++--+++ | | &#39;poly&#39; | -- | 3 | 0.70 |...| 4 | | ++--++--+++ | | &#39;rbf&#39; | 0.1 | -- | 0.80 |...| 3 | | ++--++--+++ | | &#39;rbf&#39; | 0.2 | -- | 0.93 |...| 1 | | ++--++--+++ | | will be represented by a ``cv_results_`` dict of:: | | { | &#39;param_kernel&#39;: masked_array(data = [&#39;poly&#39;, &#39;poly&#39;, &#39;rbf&#39;, &#39;rbf&#39;], | mask = [False False False False]...) | &#39;param_gamma&#39;: masked_array(data = [-- -- 0.1 0.2], | mask = [ True True False False]...), | &#39;param_degree&#39;: masked_array(data = [2.0 3.0 -- --], | mask = [False False True True]...), | &#39;split0_test_score&#39; : [0.80, 0.70, 0.80, 0.93], | &#39;split1_test_score&#39; : [0.82, 0.50, 0.70, 0.78], | &#39;mean_test_score&#39; : [0.81, 0.60, 0.75, 0.85], | &#39;std_test_score&#39; : [0.01, 0.10, 0.05, 0.08], | &#39;rank_test_score&#39; : [2, 4, 3, 1], | &#39;split0_train_score&#39; : [0.80, 0.92, 0.70, 0.93], | &#39;split1_train_score&#39; : [0.82, 0.55, 0.70, 0.87], | &#39;mean_train_score&#39; : [0.81, 0.74, 0.70, 0.90], | &#39;std_train_score&#39; : [0.01, 0.19, 0.00, 0.03], | &#39;mean_fit_time&#39; : [0.73, 0.63, 0.43, 0.49], | &#39;std_fit_time&#39; : [0.01, 0.02, 0.01, 0.01], | &#39;mean_score_time&#39; : [0.01, 0.06, 0.04, 0.04], | &#39;std_score_time&#39; : [0.00, 0.00, 0.00, 0.01], | &#39;params&#39; : [{&#39;kernel&#39;: &#39;poly&#39;, &#39;degree&#39;: 2}, ...], | } | | NOTE | | The key ``&#39;params&#39;`` is used to store a list of parameter | settings dicts for all the parameter candidates. | | The ``mean_fit_time``, ``std_fit_time``, ``mean_score_time`` and | ``std_score_time`` are all in seconds. | | For multi-metric evaluation, the scores for all the scorers are | available in the ``cv_results_`` dict at the keys ending with that | scorer&#39;s name (``&#39;_&lt;scorer_name&gt;&#39;``) instead of ``&#39;_score&#39;`` shown | above. (&#39;split0_test_precision&#39;, &#39;mean_train_precision&#39; etc.) | | best_estimator_ : estimator | Estimator that was chosen by the search, i.e. estimator | which gave highest score (or smallest loss if specified) | on the left out data. Not available if ``refit=False``. | | See ``refit`` parameter for more information on allowed values. | | best_score_ : float | Mean cross-validated score of the best_estimator | | For multi-metric evaluation, this is present only if ``refit`` is | specified. | | This attribute is not available if ``refit`` is a function. | | best_params_ : dict | Parameter setting that gave the best results on the hold out data. | | For multi-metric evaluation, this is present only if ``refit`` is | specified. | | best_index_ : int | The index (of the ``cv_results_`` arrays) which corresponds to the best | candidate parameter setting. | | The dict at ``search.cv_results_[&#39;params&#39;][search.best_index_]`` gives | the parameter setting for the best model, that gives the highest | mean score (``search.best_score_``). | | For multi-metric evaluation, this is present only if ``refit`` is | specified. | | scorer_ : function or a dict | Scorer function used on the held out data to choose the best | parameters for the model. | | For multi-metric evaluation, this attribute holds the validated | ``scoring`` dict which maps the scorer key to the scorer callable. | | n_splits_ : int | The number of cross-validation splits (folds/iterations). | | refit_time_ : float | Seconds used for refitting the best model on the whole dataset. | | This is present only if ``refit`` is not False. | | .. versionadded:: 0.20 | | multimetric_ : bool | Whether or not the scorers compute several metrics. | | classes_ : ndarray of shape (n_classes,) | The classes labels. This is present only if ``refit`` is specified and | the underlying estimator is a classifier. | | n_features_in_ : int | Number of features seen during :term:`fit`. Only defined if | `best_estimator_` is defined (see the documentation for the `refit` | parameter for more details) and that `best_estimator_` exposes | `n_features_in_` when fit. | | .. versionadded:: 0.24 | | feature_names_in_ : ndarray of shape (`n_features_in_`,) | Names of features seen during :term:`fit`. Only defined if | `best_estimator_` is defined (see the documentation for the `refit` | parameter for more details) and that `best_estimator_` exposes | `feature_names_in_` when fit. | | .. versionadded:: 1.0 | | Notes | -- | The parameters selected are those that maximize the score of the left out | data, unless an explicit score is passed in which case it is used instead. | | If `n_jobs` was set to a value higher than one, the data is copied for each | point in the grid (and not `n_jobs` times). This is done for efficiency | reasons if individual jobs take very little time, but may raise errors if | the dataset is large and not enough memory is available. A workaround in | this case is to set `pre_dispatch`. Then, the memory is copied only | `pre_dispatch` many times. A reasonable value for `pre_dispatch` is `2 * | n_jobs`. | | See Also | | ParameterGrid : Generates all the combinations of a hyperparameter grid. | train_test_split : Utility function to split the data into a development | set usable for fitting a GridSearchCV instance and an evaluation set | for its final evaluation. | sklearn.metrics.make_scorer : Make a scorer from a performance metric or | loss function. | | Examples | -- | &gt;&gt;&gt; from sklearn import svm, datasets | &gt;&gt;&gt; from sklearn.model_selection import GridSearchCV | &gt;&gt;&gt; iris = datasets.load_iris() | &gt;&gt;&gt; parameters = {&#39;kernel&#39;:(&#39;linear&#39;, &#39;rbf&#39;), &#39;C&#39;:[1, 10]} | &gt;&gt;&gt; svc = svm.SVC() | &gt;&gt;&gt; clf = GridSearchCV(svc, parameters) | &gt;&gt;&gt; clf.fit(iris.data, iris.target) | GridSearchCV(estimator=SVC(), | param_grid={&#39;C&#39;: [1, 10], &#39;kernel&#39;: (&#39;linear&#39;, &#39;rbf&#39;)}) | &gt;&gt;&gt; sorted(clf.cv_results_.keys()) | [&#39;mean_fit_time&#39;, &#39;mean_score_time&#39;, &#39;mean_test_score&#39;,... | &#39;param_C&#39;, &#39;param_kernel&#39;, &#39;params&#39;,... | &#39;rank_test_score&#39;, &#39;split0_test_score&#39;,... | &#39;split2_test_score&#39;, ... | &#39;std_fit_time&#39;, &#39;std_score_time&#39;, &#39;std_test_score&#39;] | | Method resolution order: | GridSearchCV | BaseSearchCV | sklearn.base.MetaEstimatorMixin | sklearn.base.BaseEstimator | builtins.object | | Methods defined here: | | __init__(self, estimator, param_grid, *, scoring=None, n_jobs=None, refit=True, cv=None, verbose=0, pre_dispatch=&#39;2*n_jobs&#39;, error_score=nan, return_train_score=False) | Initialize self. See help(type(self)) for accurate signature. | | - | Data and other attributes defined here: | | __abstractmethods__ = frozenset() | | - | Methods inherited from BaseSearchCV: | | decision_function(self, X) | Call decision_function on the estimator with the best found parameters. | | Only available if ``refit=True`` and the underlying estimator supports | ``decision_function``. | | Parameters | - | X : indexable, length n_samples | Must fulfill the input assumptions of the | underlying estimator. | | Returns | - | y_score : ndarray of shape (n_samples,) or (n_samples, n_classes) or (n_samples, n_classes * (n_classes-1) / 2) | Result of the decision function for `X` based on the estimator with | the best found parameters. | | fit(self, X, y=None, *, groups=None, **fit_params) | Run fit with all sets of parameters. | | Parameters | - | | X : array-like of shape (n_samples, n_features) | Training vector, where `n_samples` is the number of samples and | `n_features` is the number of features. | | y : array-like of shape (n_samples, n_output) or (n_samples,), default=None | Target relative to X for classification or regression; | None for unsupervised learning. | | groups : array-like of shape (n_samples,), default=None | Group labels for the samples used while splitting the dataset into | train/test set. Only used in conjunction with a &#34;Group&#34; :term:`cv` | instance (e.g., :class:`~sklearn.model_selection.GroupKFold`). | | **fit_params : dict of str -&gt; object | Parameters passed to the ``fit`` method of the estimator. | | Returns | - | self : object | Instance of fitted estimator. | | inverse_transform(self, Xt) | Call inverse_transform on the estimator with the best found params. | | Only available if the underlying estimator implements | ``inverse_transform`` and ``refit=True``. | | Parameters | - | Xt : indexable, length n_samples | Must fulfill the input assumptions of the | underlying estimator. | | Returns | - | X : {ndarray, sparse matrix} of shape (n_samples, n_features) | Result of the `inverse_transform` function for `Xt` based on the | estimator with the best found parameters. | | predict(self, X) | Call predict on the estimator with the best found parameters. | | Only available if ``refit=True`` and the underlying estimator supports | ``predict``. | | Parameters | - | X : indexable, length n_samples | Must fulfill the input assumptions of the | underlying estimator. | | Returns | - | y_pred : ndarray of shape (n_samples,) | The predicted labels or values for `X` based on the estimator with | the best found parameters. | | predict_log_proba(self, X) | Call predict_log_proba on the estimator with the best found parameters. | | Only available if ``refit=True`` and the underlying estimator supports | ``predict_log_proba``. | | Parameters | - | X : indexable, length n_samples | Must fulfill the input assumptions of the | underlying estimator. | | Returns | - | y_pred : ndarray of shape (n_samples,) or (n_samples, n_classes) | Predicted class log-probabilities for `X` based on the estimator | with the best found parameters. The order of the classes | corresponds to that in the fitted attribute :term:`classes_`. | | predict_proba(self, X) | Call predict_proba on the estimator with the best found parameters. | | Only available if ``refit=True`` and the underlying estimator supports | ``predict_proba``. | | Parameters | - | X : indexable, length n_samples | Must fulfill the input assumptions of the | underlying estimator. | | Returns | - | y_pred : ndarray of shape (n_samples,) or (n_samples, n_classes) | Predicted class probabilities for `X` based on the estimator with | the best found parameters. The order of the classes corresponds | to that in the fitted attribute :term:`classes_`. | | score(self, X, y=None) | Return the score on the given data, if the estimator has been refit. | | This uses the score defined by ``scoring`` where provided, and the | ``best_estimator_.score`` method otherwise. | | Parameters | - | X : array-like of shape (n_samples, n_features) | Input data, where `n_samples` is the number of samples and | `n_features` is the number of features. | | y : array-like of shape (n_samples, n_output) or (n_samples,), default=None | Target relative to X for classification or regression; | None for unsupervised learning. | | Returns | - | score : float | The score defined by ``scoring`` if provided, and the | ``best_estimator_.score`` method otherwise. | | score_samples(self, X) | Call score_samples on the estimator with the best found parameters. | | Only available if ``refit=True`` and the underlying estimator supports | ``score_samples``. | | .. versionadded:: 0.24 | | Parameters | - | X : iterable | Data to predict on. Must fulfill input requirements | of the underlying estimator. | | Returns | - | y_score : ndarray of shape (n_samples,) | The ``best_estimator_.score_samples`` method. | | transform(self, X) | Call transform on the estimator with the best found parameters. | | Only available if the underlying estimator supports ``transform`` and | ``refit=True``. | | Parameters | - | X : indexable, length n_samples | Must fulfill the input assumptions of the | underlying estimator. | | Returns | - | Xt : {ndarray, sparse matrix} of shape (n_samples, n_features) | `X` transformed in the new space based on the estimator with | the best found parameters. | | - | Readonly properties inherited from BaseSearchCV: | | classes_ | Class labels. | | Only available when `refit=True` and the estimator is a classifier. | | n_features_in_ | Number of features seen during :term:`fit`. | | Only available when `refit=True`. | | - | Data descriptors inherited from sklearn.base.MetaEstimatorMixin: | | __dict__ | dictionary for instance variables (if defined) | | __weakref__ | list of weak references to the object (if defined) | | - | Methods inherited from sklearn.base.BaseEstimator: | | __getstate__(self) | | __repr__(self, N_CHAR_MAX=700) | Return repr(self). | | __setstate__(self, state) | | get_params(self, deep=True) | Get parameters for this estimator. | | Parameters | - | deep : bool, default=True | If True, will return the parameters for this estimator and | contained subobjects that are estimators. | | Returns | - | params : dict | Parameter names mapped to their values. | | set_params(self, **params) | Set the parameters of this estimator. | | The method works on simple estimators as well as on nested objects | (such as :class:`~sklearn.pipeline.Pipeline`). The latter have | parameters of the form ``&lt;component&gt;__&lt;parameter&gt;`` so that it&#39;s | possible to update each component of a nested object. | | Parameters | - | **params : dict | Estimator parameters. | | Returns | - | self : estimator instance | Estimator instance. . import pandas as pd a = [1,2,3,4,5] a_df = pd.DataFrame(a) a_df.plot() . &lt;AxesSubplot:&gt; . dir(pd.DataFrame) . [&#39;T&#39;, &#39;_AXIS_LEN&#39;, &#39;_AXIS_NAMES&#39;, &#39;_AXIS_NUMBERS&#39;, &#39;_AXIS_ORDERS&#39;, &#39;_AXIS_TO_AXIS_NUMBER&#39;, &#39;_HANDLED_TYPES&#39;, &#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__annotations__&#39;, &#39;__array__&#39;, &#39;__array_priority__&#39;, &#39;__array_ufunc__&#39;, &#39;__array_wrap__&#39;, &#39;__bool__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__finalize__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattr__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getstate__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__iand__&#39;, &#39;__ifloordiv__&#39;, &#39;__imod__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__invert__&#39;, &#39;__ior__&#39;, &#39;__ipow__&#39;, &#39;__isub__&#39;, &#39;__iter__&#39;, &#39;__itruediv__&#39;, &#39;__ixor__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__matmul__&#39;, &#39;__mod__&#39;, &#39;__module__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__nonzero__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;, &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rfloordiv__&#39;, &#39;__rmatmul__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;, &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rsub__&#39;, &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__setstate__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__weakref__&#39;, &#39;__xor__&#39;, &#39;_accessors&#39;, &#39;_accum_func&#39;, &#39;_add_numeric_operations&#39;, &#39;_agg_by_level&#39;, &#39;_agg_examples_doc&#39;, &#39;_agg_summary_and_see_also_doc&#39;, &#39;_align_frame&#39;, &#39;_align_series&#39;, &#39;_append&#39;, &#39;_arith_method&#39;, &#39;_as_manager&#39;, &#39;_box_col_values&#39;, &#39;_can_fast_transpose&#39;, &#39;_check_inplace_and_allows_duplicate_labels&#39;, &#39;_check_inplace_setting&#39;, &#39;_check_is_chained_assignment_possible&#39;, &#39;_check_label_or_level_ambiguity&#39;, &#39;_check_setitem_copy&#39;, &#39;_clear_item_cache&#39;, &#39;_clip_with_one_bound&#39;, &#39;_clip_with_scalar&#39;, &#39;_cmp_method&#39;, &#39;_combine_frame&#39;, &#39;_consolidate&#39;, &#39;_consolidate_inplace&#39;, &#39;_construct_axes_dict&#39;, &#39;_construct_axes_from_arguments&#39;, &#39;_construct_result&#39;, &#39;_constructor&#39;, &#39;_constructor_sliced&#39;, &#39;_convert&#39;, &#39;_count_level&#39;, &#39;_data&#39;, &#39;_dir_additions&#39;, &#39;_dir_deletions&#39;, &#39;_dispatch_frame_op&#39;, &#39;_drop_axis&#39;, &#39;_drop_labels_or_levels&#39;, &#39;_ensure_valid_index&#39;, &#39;_find_valid_index&#39;, &#39;_from_arrays&#39;, &#39;_from_mgr&#39;, &#39;_get_agg_axis&#39;, &#39;_get_axis&#39;, &#39;_get_axis_name&#39;, &#39;_get_axis_number&#39;, &#39;_get_axis_resolvers&#39;, &#39;_get_block_manager_axis&#39;, &#39;_get_bool_data&#39;, &#39;_get_cleaned_column_resolvers&#39;, &#39;_get_column_array&#39;, &#39;_get_index_resolvers&#39;, &#39;_get_item_cache&#39;, &#39;_get_label_or_level_values&#39;, &#39;_get_numeric_data&#39;, &#39;_get_value&#39;, &#39;_getitem_bool_array&#39;, &#39;_getitem_multilevel&#39;, &#39;_gotitem&#39;, &#39;_hidden_attrs&#39;, &#39;_indexed_same&#39;, &#39;_info_axis&#39;, &#39;_info_axis_name&#39;, &#39;_info_axis_number&#39;, &#39;_info_repr&#39;, &#39;_init_mgr&#39;, &#39;_inplace_method&#39;, &#39;_internal_names&#39;, &#39;_internal_names_set&#39;, &#39;_is_copy&#39;, &#39;_is_homogeneous_type&#39;, &#39;_is_label_or_level_reference&#39;, &#39;_is_label_reference&#39;, &#39;_is_level_reference&#39;, &#39;_is_mixed_type&#39;, &#39;_is_view&#39;, &#39;_iset_item&#39;, &#39;_iset_item_mgr&#39;, &#39;_iset_not_inplace&#39;, &#39;_iter_column_arrays&#39;, &#39;_ixs&#39;, &#39;_join_compat&#39;, &#39;_logical_func&#39;, &#39;_logical_method&#39;, &#39;_maybe_cache_changed&#39;, &#39;_maybe_update_cacher&#39;, &#39;_metadata&#39;, &#39;_min_count_stat_function&#39;, &#39;_needs_reindex_multi&#39;, &#39;_protect_consolidate&#39;, &#39;_reduce&#39;, &#39;_reduce_axis1&#39;, &#39;_reindex_axes&#39;, &#39;_reindex_columns&#39;, &#39;_reindex_index&#39;, &#39;_reindex_multi&#39;, &#39;_reindex_with_indexers&#39;, &#39;_rename&#39;, &#39;_replace_columnwise&#39;, &#39;_repr_data_resource_&#39;, &#39;_repr_fits_horizontal_&#39;, &#39;_repr_fits_vertical_&#39;, &#39;_repr_html_&#39;, &#39;_repr_latex_&#39;, &#39;_reset_cache&#39;, &#39;_reset_cacher&#39;, &#39;_sanitize_column&#39;, &#39;_series&#39;, &#39;_set_axis&#39;, &#39;_set_axis_name&#39;, &#39;_set_axis_nocheck&#39;, &#39;_set_is_copy&#39;, &#39;_set_item&#39;, &#39;_set_item_frame_value&#39;, &#39;_set_item_mgr&#39;, &#39;_set_value&#39;, &#39;_setitem_array&#39;, &#39;_setitem_frame&#39;, &#39;_setitem_slice&#39;, &#39;_slice&#39;, &#39;_stat_axis&#39;, &#39;_stat_axis_name&#39;, &#39;_stat_axis_number&#39;, &#39;_stat_function&#39;, &#39;_stat_function_ddof&#39;, &#39;_take_with_is_copy&#39;, &#39;_to_dict_of_blocks&#39;, &#39;_typ&#39;, &#39;_update_inplace&#39;, &#39;_validate_dtype&#39;, &#39;_values&#39;, &#39;_where&#39;, &#39;abs&#39;, &#39;add&#39;, &#39;add_prefix&#39;, &#39;add_suffix&#39;, &#39;agg&#39;, &#39;aggregate&#39;, &#39;align&#39;, &#39;all&#39;, &#39;any&#39;, &#39;append&#39;, &#39;apply&#39;, &#39;applymap&#39;, &#39;asfreq&#39;, &#39;asof&#39;, &#39;assign&#39;, &#39;astype&#39;, &#39;at&#39;, &#39;at_time&#39;, &#39;attrs&#39;, &#39;axes&#39;, &#39;backfill&#39;, &#39;between_time&#39;, &#39;bfill&#39;, &#39;bool&#39;, &#39;boxplot&#39;, &#39;clip&#39;, &#39;columns&#39;, &#39;combine&#39;, &#39;combine_first&#39;, &#39;compare&#39;, &#39;convert_dtypes&#39;, &#39;copy&#39;, &#39;corr&#39;, &#39;corrwith&#39;, &#39;count&#39;, &#39;cov&#39;, &#39;cummax&#39;, &#39;cummin&#39;, &#39;cumprod&#39;, &#39;cumsum&#39;, &#39;describe&#39;, &#39;diff&#39;, &#39;div&#39;, &#39;divide&#39;, &#39;dot&#39;, &#39;drop&#39;, &#39;drop_duplicates&#39;, &#39;droplevel&#39;, &#39;dropna&#39;, &#39;dtypes&#39;, &#39;duplicated&#39;, &#39;empty&#39;, &#39;eq&#39;, &#39;equals&#39;, &#39;eval&#39;, &#39;ewm&#39;, &#39;expanding&#39;, &#39;explode&#39;, &#39;ffill&#39;, &#39;fillna&#39;, &#39;filter&#39;, &#39;first&#39;, &#39;first_valid_index&#39;, &#39;flags&#39;, &#39;floordiv&#39;, &#39;from_dict&#39;, &#39;from_records&#39;, &#39;ge&#39;, &#39;get&#39;, &#39;groupby&#39;, &#39;gt&#39;, &#39;head&#39;, &#39;hist&#39;, &#39;iat&#39;, &#39;idxmax&#39;, &#39;idxmin&#39;, &#39;iloc&#39;, &#39;index&#39;, &#39;infer_objects&#39;, &#39;info&#39;, &#39;insert&#39;, &#39;interpolate&#39;, &#39;isin&#39;, &#39;isna&#39;, &#39;isnull&#39;, &#39;items&#39;, &#39;iteritems&#39;, &#39;iterrows&#39;, &#39;itertuples&#39;, &#39;join&#39;, &#39;keys&#39;, &#39;kurt&#39;, &#39;kurtosis&#39;, &#39;last&#39;, &#39;last_valid_index&#39;, &#39;le&#39;, &#39;loc&#39;, &#39;lookup&#39;, &#39;lt&#39;, &#39;mad&#39;, &#39;mask&#39;, &#39;max&#39;, &#39;mean&#39;, &#39;median&#39;, &#39;melt&#39;, &#39;memory_usage&#39;, &#39;merge&#39;, &#39;min&#39;, &#39;mod&#39;, &#39;mode&#39;, &#39;mul&#39;, &#39;multiply&#39;, &#39;ndim&#39;, &#39;ne&#39;, &#39;nlargest&#39;, &#39;notna&#39;, &#39;notnull&#39;, &#39;nsmallest&#39;, &#39;nunique&#39;, &#39;pad&#39;, &#39;pct_change&#39;, &#39;pipe&#39;, &#39;pivot&#39;, &#39;pivot_table&#39;, &#39;plot&#39;, &#39;pop&#39;, &#39;pow&#39;, &#39;prod&#39;, &#39;product&#39;, &#39;quantile&#39;, &#39;query&#39;, &#39;radd&#39;, &#39;rank&#39;, &#39;rdiv&#39;, &#39;reindex&#39;, &#39;reindex_like&#39;, &#39;rename&#39;, &#39;rename_axis&#39;, &#39;reorder_levels&#39;, &#39;replace&#39;, &#39;resample&#39;, &#39;reset_index&#39;, &#39;rfloordiv&#39;, &#39;rmod&#39;, &#39;rmul&#39;, &#39;rolling&#39;, &#39;round&#39;, &#39;rpow&#39;, &#39;rsub&#39;, &#39;rtruediv&#39;, &#39;sample&#39;, &#39;select_dtypes&#39;, &#39;sem&#39;, &#39;set_axis&#39;, &#39;set_flags&#39;, &#39;set_index&#39;, &#39;shape&#39;, &#39;shift&#39;, &#39;size&#39;, &#39;skew&#39;, &#39;slice_shift&#39;, &#39;sort_index&#39;, &#39;sort_values&#39;, &#39;sparse&#39;, &#39;squeeze&#39;, &#39;stack&#39;, &#39;std&#39;, &#39;style&#39;, &#39;sub&#39;, &#39;subtract&#39;, &#39;sum&#39;, &#39;swapaxes&#39;, &#39;swaplevel&#39;, &#39;tail&#39;, &#39;take&#39;, &#39;to_clipboard&#39;, &#39;to_csv&#39;, &#39;to_dict&#39;, &#39;to_excel&#39;, &#39;to_feather&#39;, &#39;to_gbq&#39;, &#39;to_hdf&#39;, &#39;to_html&#39;, &#39;to_json&#39;, &#39;to_latex&#39;, &#39;to_markdown&#39;, &#39;to_numpy&#39;, &#39;to_parquet&#39;, &#39;to_period&#39;, &#39;to_pickle&#39;, &#39;to_records&#39;, &#39;to_sql&#39;, &#39;to_stata&#39;, &#39;to_string&#39;, &#39;to_timestamp&#39;, &#39;to_xarray&#39;, &#39;to_xml&#39;, &#39;transform&#39;, &#39;transpose&#39;, &#39;truediv&#39;, &#39;truncate&#39;, &#39;tshift&#39;, &#39;tz_convert&#39;, &#39;tz_localize&#39;, &#39;unstack&#39;, &#39;update&#39;, &#39;value_counts&#39;, &#39;values&#39;, &#39;var&#39;, &#39;where&#39;, &#39;xs&#39;] . globals() . {&#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: &#39;Automatically created module for IPython interactive environment&#39;, &#39;__package__&#39;: None, &#39;__loader__&#39;: None, &#39;__spec__&#39;: None, &#39;__builtin__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;, &#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;, &#39;_ih&#39;: [&#39;&#39;, &#34;import numpy as np nimport pandas as pd nimport matplotlib.pyplot as plt nimport seaborn as sns nget_ipython().run_line_magic(&#39;matplotlib&#39;, &#39;inline&#39;) n ntitanic_df = pd.read_csv(&#39;./train.csv&#39;) ntitanic_df.head(3)&#34;, &#34;print(&#39;### train 데이터 정보 ### n&#39;) nprint(titanic_df.info())&#34;, &#39;titanic_df.describe()&#39;, &#34;titanic_df[&#39;Age&#39;].fillna(titanic_df[&#39;Age&#39;].mean(), inplace=True) ntitanic_df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) ntitanic_df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) n nprint(&#39;컬럼별 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum()) nprint(&#39; n총 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum().sum())&#34;, &#34;# object 컬럼타입 추출 n# 조건 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;], &#39; n&#39;) n# 조건의 인덱스 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index, &#39; n&#39;) n# 조건 인덱스 후 리스트변환 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index.to_list(), &#39; n&#39;)&#34;, &#34;print(&#39;Sex 값 분포 : n&#39;, titanic_df[&#39;Sex&#39;].value_counts()) nprint(&#39; n Cabin 값 분포 : n&#39;, titanic_df[&#39;Cabin&#39;].value_counts()) nprint(&#39; n Embarked 값 분포 : n&#39;, titanic_df[&#39;Embarked&#39;].value_counts())&#34;, &#34;titanic_df[&#39;Cabin&#39;].str[:1]&#34;, &#34;titanic_df[&#39;Cabin&#39;] = titanic_df[&#39;Cabin&#39;].str[:1] nprint(titanic_df[&#39;Cabin&#39;].head(3))&#34;, &#34;titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;])&#34;, &#34;titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;])[&#39;Survived&#39;].count()&#34;, &#34;titanic_df[&#39;Survived&#39;].value_counts()&#34;, &#34;sns.barplot(x=&#39;Sex&#39;, y=&#39;Survived&#39;, data=titanic_df)&#34;, &#34;sns.barplot(x=&#39;Pclass&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df)&#34;, &#34;# 입력 age에 따라 구분값을 반환하는 함수 설정, DataFrame의 apply lambda 식에 사용 ndef get_category(age): n cat=&#39;&#39; n if age &lt;= -1: cat = &#39;Unknown&#39; n elif age &lt;= 5: cat = &#39;Baby&#39; n elif age &lt;= 12: cat = &#39;Child&#39; n elif age &lt;= 18: cat = &#39;Teenage&#39; n elif age &lt;= 25: cat = &#39;Student&#39; n elif age &lt;= 35: cat = &#39;Young Adult&#39; n elif age &lt;= 60: cat = &#39;Adult&#39; n else: cat = &#39;Elderly&#39; n n return cat n n# 막대 그래프의 크기 figure를 더 크게 설정 nplt.figure(figsize=(10, 6)) n n# x 축의 값을 순차적으로 표시하기 위한 설정 ngroup_names = [&#39;Unknown&#39;, &#39;Baby&#39;, &#39;Child&#39;, &#39;Teenager&#39;, &#39;Student&#39;, &#39;Young Adult&#39;, &#39;Adult&#39;, &#39;Elderly&#39;] n n# lambda 식에 위에서 생성한 get_category() 함수를 반환값으로 지정 n# get_category(x)는 입력값으로 &#39;Age&#39; 컬럼값을 받아서 해당하는 cat 반환 ntitanic_df[&#39;Age_cat&#39;] = titanic_df[&#39;Age&#39;].apply(lambda x: get_category(x)) n nsns.barplot(x=&#39;Age_cat&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df, order=group_names) ntitanic_df.drop(&#39;Age_cat&#39;, axis=1, inplace=True) &#34;, &#34;from sklearn.preprocessing import LabelEncoder n ndef encode_features(dataDF): n features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] n le = LabelEncoder() n for feature in features: n le.fit(dataDF[feature]) n dataDF[feature] = le.transform(dataDF[feature]) n n return dataDF n ntitanic_df = encode_features(titanic_df) # encode_features 함수에서 변환된 3개 컬럼값이 원본 titanic_df에 덮어써짐 ntitanic_df.head(3) &#34;, &#34;from sklearn.preprocessing import LabelEncoder n n# null 처리함수 ndef fillna(df): n df[&#39;Age&#39;].fillna(df[&#39;Age&#39;].mean(), inplace=True) n df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) n df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) n n return df n n# 머신러닝 알고리즘에 불필요한 피처제거 ndef drop_features(df): n df.drop([&#39;PassengerId&#39;, &#39;Name&#39;, &#39;Ticket&#39;], axis=1, inplace=True) n return df n n# 레이블 인코딩 수행 ndef format_features(df): n df[&#39;Cabin&#39;] = df[&#39;Cabin&#39;].str[:1] n features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] n for feature in features: n le = LabelEncoder() n le = le.fit(df[feature]) n df[feature] = le.transform(df[feature]) n return df n n# 앞에서 설정한 Data Preprocessing 함수 호출 ndef transform_features(df): n df = fillna(df) n df = drop_features(df) n df = format_features(df) n return df&#34;, &#39;titanic_df.head()&#39;, &#34;# 원본 데이터를 재로딩하고, feature 데이터 셋과 Label 데이터 셋 추출 ntitanic_df = pd.read_csv(&#39;./train.csv&#39;) ny_titanic_df = titanic_df[&#39;Survived&#39;] nX_titanic_df = titanic_df.drop(&#39;Survived&#39;, axis=1, inplace=False) n nX_titanic_df = transform_features(X_titanic_df)&#34;, &#39;X_titanic_df.head(3)&#39;, &#39;from sklearn.model_selection import train_test_split nX_train, X_test, y_train, y_test = train_test_split(X_titanic_df, y_titanic_df, n test_size=0.2, random_state=11) nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)&#39;, &#34;from sklearn.tree import DecisionTreeClassifier nfrom sklearn.ensemble import RandomForestClassifier nfrom sklearn.linear_model import LogisticRegression nfrom sklearn.metrics import accuracy_score n n# 결정트리, Random Forest, 로지스틱 회귀를 위한 사이킷런 Classifier 클래스 생성 ndt_clf = DecisionTreeClassifier(random_state=11) nrf_clf = RandomForestClassifier(random_state=11) nlr_clf = LogisticRegression(solver=&#39;liblinear&#39;) n n# DecisionTreeClassifier 학습/예측/평가 ndt_clf.fit(X_train, y_train) ndt_pred = dt_clf.predict(X_test) nprint(&#39;DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, dt_pred))) n n# RandomFroestClassifier 학습/예측/평가 nrf_clf.fit(X_train, y_train) nrf_pred = rf_clf.predict(X_test) nprint(&#39;RandomForestClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, rf_pred))) n n# LogisticRegression 학습/예측/평가 nlr_clf.fit(X_train, y_train) nlr_pred = lr_clf.predict(X_test) nprint(&#39;LogisticRegression 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, lr_pred)))&#34;, &#39;y_test_ndarray = np.array(y_test) nprint(y_test_ndarray)&#39;, &#39;dt_pred&#39;, &#39;help(accuracy_score)&#39;, &#39;X_titanic_df.values[[0, 1, 2, 3, 4, 5]]&#39;, &#34;from sklearn.model_selection import KFold n ndef exec_kfold(clf, folds=5): n # 폴드 세트를 5개인 KFold객체를 생성, 폴드 수만큼 예측결과 저장을 위한 리스트 객체 생성 n kfold = KFold(n_splits=folds) n scores = [] n # KFold 교차 검증수행 n for iter_count, (train_index, test_index) in enumerate(kfold.split(X_titanic_df)): n # X_titanic_df 데이터에서 교차 검증별로 학습과 검증 데이터를 가리키는 index 생성 n X_train, X_test = X_titanic_df.values[train_index], X_titanic_df.values[test_index] n y_train, y_test = y_titanic_df.values[train_index], y_titanic_df.values[test_index] n n # Classifier 학습, 예측, 정확도 계산 n clf.fit(X_train, y_train) n predictions = clf.predict(X_test) n accuracy = accuracy_score(y_test, predictions) n scores.append(accuracy) n print(&#39;교차 검증 {0} 정확도: {1:4f}&#39;.format(iter_count, accuracy)) n n # 5개 fold에서 평균 정확도 계산 n mean_score = np.mean(scores) n print(&#39;평균 정확도: {0: 4f}&#39;.format(mean_score)) n n# exec_fold 호출 nexec_kfold(dt_clf, folds=5)&#34;, &#34;from sklearn.model_selection import GridSearchCV n nparameters = {&#39;max_depth&#39;:[2,3,5,10], n &#39;min_samples_split&#39;:[2,3,5], &#39;min_samples_leaf&#39;:[1,5,8]} n ngrid_dclf = GridSearchCV(dt_clf, param_grid=parameters, scoring=&#39;accuracy&#39;, cv=5) ngrid_dclf.fit(X_train, y_train) n nprint(&#39;GridSearchCV 최적 하이퍼 파라미터: &#39;, grid_dclf.best_params_) nprint(&#39;GridSearchCV 최고 정확도: {0: .4f}&#39;.format(grid_dclf.best_score_)) nbest_dclf = grid_dclf.best_estimator_ n n# GridSearchCV의 최적 하이퍼 파라미터로 학습된 Estimator로 예측 및 평가 수행 ndprediction = best_dclf.predict(X_test) naccuracy = accuracy_score(y_test, dprediction) nprint(&#39;테스트 세트에서의 DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy))&#34;, &#39;help(GridSearchCV)&#39;, &#39;import pandas as pd n na = [1,2,3,4,5] na_df = pd.DataFrame(a) na_df.plot()&#39;, &#39;dir(pd.DataFrame)&#39;, &#39;globals()&#39;], &#39;_oh&#39;: {1: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 Name Sex Age SibSp 0 Braund, Mr. Owen Harris male 22.0 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 2 Heikkinen, Miss. Laina female 26.0 0 Parch Ticket Fare Cabin Embarked 0 0 A/5 21171 7.2500 N S 1 0 PC 17599 71.2833 C85 C 2 0 STON/O2. 3101282 7.9250 N S , 3: PassengerId Survived Pclass Age SibSp count 891.000000 891.000000 891.000000 714.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 std 257.353842 0.486592 0.836071 14.526497 1.102743 min 1.000000 0.000000 1.000000 0.420000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 50% 446.000000 0.000000 3.000000 28.000000 0.000000 75% 668.500000 1.000000 3.000000 38.000000 1.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 Parch Fare count 891.000000 891.000000 mean 0.381594 32.204208 std 0.806057 49.693429 min 0.000000 0.000000 25% 0.000000 7.910400 50% 0.000000 14.454200 75% 0.000000 31.000000 max 6.000000 512.329200 , 7: 0 N 1 C 2 N 3 C 4 N .. 886 N 887 B 888 N 889 C 890 N Name: Cabin, Length: 891, dtype: object, 9: &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002725F96AB80&gt;, 10: Sex Survived female 0 81 1 233 male 0 468 1 109 Name: Survived, dtype: int64, 11: 0 549 1 342 Name: Survived, dtype: int64, 12: &lt;AxesSubplot:xlabel=&#39;Sex&#39;, ylabel=&#39;Survived&#39;&gt;, 13: &lt;AxesSubplot:xlabel=&#39;Pclass&#39;, ylabel=&#39;Survived&#39;&gt;, 15: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 Name Sex Age SibSp Parch 0 Braund, Mr. Owen Harris 1 22.0 1 0 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 0 38.0 1 0 2 Heikkinen, Miss. Laina 0 26.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7.2500 7 3 1 PC 17599 71.2833 2 0 2 STON/O2. 3101282 7.9250 7 3 , 17: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 3 4 1 1 4 5 0 3 Name Sex Age SibSp Parch 0 Braund, Mr. Owen Harris 1 22.0 1 0 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 0 38.0 1 0 2 Heikkinen, Miss. Laina 0 26.0 0 0 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) 0 35.0 1 0 4 Allen, Mr. William Henry 1 35.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7.2500 7 3 1 PC 17599 71.2833 2 0 2 STON/O2. 3101282 7.9250 7 3 3 113803 53.1000 2 3 4 373450 8.0500 7 3 , 19: Pclass Sex Age SibSp Parch Fare Cabin Embarked 0 3 1 22.0 1 0 7.2500 7 3 1 1 0 38.0 1 0 71.2833 2 0 2 3 0 26.0 0 0 7.9250 7 3, 23: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=int64), 25: array([[ 3. , 1. , 22. , 1. , 0. , 7.25 , 7. , 3. ], [ 1. , 0. , 38. , 1. , 0. , 71.2833 , 2. , 0. ], [ 3. , 0. , 26. , 0. , 0. , 7.925 , 7. , 3. ], [ 1. , 0. , 35. , 1. , 0. , 53.1 , 2. , 3. ], [ 3. , 1. , 35. , 0. , 0. , 8.05 , 7. , 3. ], [ 3. , 1. , 29.69911765, 0. , 0. , 8.4583 , 7. , 2. ]]), 29: &lt;AxesSubplot:&gt;, 30: [&#39;T&#39;, &#39;_AXIS_LEN&#39;, &#39;_AXIS_NAMES&#39;, &#39;_AXIS_NUMBERS&#39;, &#39;_AXIS_ORDERS&#39;, &#39;_AXIS_TO_AXIS_NUMBER&#39;, &#39;_HANDLED_TYPES&#39;, &#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__annotations__&#39;, &#39;__array__&#39;, &#39;__array_priority__&#39;, &#39;__array_ufunc__&#39;, &#39;__array_wrap__&#39;, &#39;__bool__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__finalize__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattr__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getstate__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__iand__&#39;, &#39;__ifloordiv__&#39;, &#39;__imod__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__invert__&#39;, &#39;__ior__&#39;, &#39;__ipow__&#39;, &#39;__isub__&#39;, &#39;__iter__&#39;, &#39;__itruediv__&#39;, &#39;__ixor__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__matmul__&#39;, &#39;__mod__&#39;, &#39;__module__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__nonzero__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;, &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rfloordiv__&#39;, &#39;__rmatmul__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;, &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rsub__&#39;, &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__setstate__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__weakref__&#39;, &#39;__xor__&#39;, &#39;_accessors&#39;, &#39;_accum_func&#39;, &#39;_add_numeric_operations&#39;, &#39;_agg_by_level&#39;, &#39;_agg_examples_doc&#39;, &#39;_agg_summary_and_see_also_doc&#39;, &#39;_align_frame&#39;, &#39;_align_series&#39;, &#39;_append&#39;, &#39;_arith_method&#39;, &#39;_as_manager&#39;, &#39;_box_col_values&#39;, &#39;_can_fast_transpose&#39;, &#39;_check_inplace_and_allows_duplicate_labels&#39;, &#39;_check_inplace_setting&#39;, &#39;_check_is_chained_assignment_possible&#39;, &#39;_check_label_or_level_ambiguity&#39;, &#39;_check_setitem_copy&#39;, &#39;_clear_item_cache&#39;, &#39;_clip_with_one_bound&#39;, &#39;_clip_with_scalar&#39;, &#39;_cmp_method&#39;, &#39;_combine_frame&#39;, &#39;_consolidate&#39;, &#39;_consolidate_inplace&#39;, &#39;_construct_axes_dict&#39;, &#39;_construct_axes_from_arguments&#39;, &#39;_construct_result&#39;, &#39;_constructor&#39;, &#39;_constructor_sliced&#39;, &#39;_convert&#39;, &#39;_count_level&#39;, &#39;_data&#39;, &#39;_dir_additions&#39;, &#39;_dir_deletions&#39;, &#39;_dispatch_frame_op&#39;, &#39;_drop_axis&#39;, &#39;_drop_labels_or_levels&#39;, &#39;_ensure_valid_index&#39;, &#39;_find_valid_index&#39;, &#39;_from_arrays&#39;, &#39;_from_mgr&#39;, &#39;_get_agg_axis&#39;, &#39;_get_axis&#39;, &#39;_get_axis_name&#39;, &#39;_get_axis_number&#39;, &#39;_get_axis_resolvers&#39;, &#39;_get_block_manager_axis&#39;, &#39;_get_bool_data&#39;, &#39;_get_cleaned_column_resolvers&#39;, &#39;_get_column_array&#39;, &#39;_get_index_resolvers&#39;, &#39;_get_item_cache&#39;, &#39;_get_label_or_level_values&#39;, &#39;_get_numeric_data&#39;, &#39;_get_value&#39;, &#39;_getitem_bool_array&#39;, &#39;_getitem_multilevel&#39;, &#39;_gotitem&#39;, &#39;_hidden_attrs&#39;, &#39;_indexed_same&#39;, &#39;_info_axis&#39;, &#39;_info_axis_name&#39;, &#39;_info_axis_number&#39;, &#39;_info_repr&#39;, &#39;_init_mgr&#39;, &#39;_inplace_method&#39;, &#39;_internal_names&#39;, &#39;_internal_names_set&#39;, &#39;_is_copy&#39;, &#39;_is_homogeneous_type&#39;, &#39;_is_label_or_level_reference&#39;, &#39;_is_label_reference&#39;, &#39;_is_level_reference&#39;, &#39;_is_mixed_type&#39;, &#39;_is_view&#39;, &#39;_iset_item&#39;, &#39;_iset_item_mgr&#39;, &#39;_iset_not_inplace&#39;, &#39;_iter_column_arrays&#39;, &#39;_ixs&#39;, &#39;_join_compat&#39;, &#39;_logical_func&#39;, &#39;_logical_method&#39;, &#39;_maybe_cache_changed&#39;, &#39;_maybe_update_cacher&#39;, &#39;_metadata&#39;, &#39;_min_count_stat_function&#39;, &#39;_needs_reindex_multi&#39;, &#39;_protect_consolidate&#39;, &#39;_reduce&#39;, &#39;_reduce_axis1&#39;, &#39;_reindex_axes&#39;, &#39;_reindex_columns&#39;, &#39;_reindex_index&#39;, &#39;_reindex_multi&#39;, &#39;_reindex_with_indexers&#39;, &#39;_rename&#39;, &#39;_replace_columnwise&#39;, &#39;_repr_data_resource_&#39;, &#39;_repr_fits_horizontal_&#39;, &#39;_repr_fits_vertical_&#39;, &#39;_repr_html_&#39;, &#39;_repr_latex_&#39;, &#39;_reset_cache&#39;, &#39;_reset_cacher&#39;, &#39;_sanitize_column&#39;, &#39;_series&#39;, &#39;_set_axis&#39;, &#39;_set_axis_name&#39;, &#39;_set_axis_nocheck&#39;, &#39;_set_is_copy&#39;, &#39;_set_item&#39;, &#39;_set_item_frame_value&#39;, &#39;_set_item_mgr&#39;, &#39;_set_value&#39;, &#39;_setitem_array&#39;, &#39;_setitem_frame&#39;, &#39;_setitem_slice&#39;, &#39;_slice&#39;, &#39;_stat_axis&#39;, &#39;_stat_axis_name&#39;, &#39;_stat_axis_number&#39;, &#39;_stat_function&#39;, &#39;_stat_function_ddof&#39;, &#39;_take_with_is_copy&#39;, &#39;_to_dict_of_blocks&#39;, &#39;_typ&#39;, &#39;_update_inplace&#39;, &#39;_validate_dtype&#39;, &#39;_values&#39;, &#39;_where&#39;, &#39;abs&#39;, &#39;add&#39;, &#39;add_prefix&#39;, &#39;add_suffix&#39;, &#39;agg&#39;, &#39;aggregate&#39;, &#39;align&#39;, &#39;all&#39;, &#39;any&#39;, &#39;append&#39;, &#39;apply&#39;, &#39;applymap&#39;, &#39;asfreq&#39;, &#39;asof&#39;, &#39;assign&#39;, &#39;astype&#39;, &#39;at&#39;, &#39;at_time&#39;, &#39;attrs&#39;, &#39;axes&#39;, &#39;backfill&#39;, &#39;between_time&#39;, &#39;bfill&#39;, &#39;bool&#39;, &#39;boxplot&#39;, &#39;clip&#39;, &#39;columns&#39;, &#39;combine&#39;, &#39;combine_first&#39;, &#39;compare&#39;, &#39;convert_dtypes&#39;, &#39;copy&#39;, &#39;corr&#39;, &#39;corrwith&#39;, &#39;count&#39;, &#39;cov&#39;, &#39;cummax&#39;, &#39;cummin&#39;, &#39;cumprod&#39;, &#39;cumsum&#39;, &#39;describe&#39;, &#39;diff&#39;, &#39;div&#39;, &#39;divide&#39;, &#39;dot&#39;, &#39;drop&#39;, &#39;drop_duplicates&#39;, &#39;droplevel&#39;, &#39;dropna&#39;, &#39;dtypes&#39;, &#39;duplicated&#39;, &#39;empty&#39;, &#39;eq&#39;, &#39;equals&#39;, &#39;eval&#39;, &#39;ewm&#39;, &#39;expanding&#39;, &#39;explode&#39;, &#39;ffill&#39;, &#39;fillna&#39;, &#39;filter&#39;, &#39;first&#39;, &#39;first_valid_index&#39;, &#39;flags&#39;, &#39;floordiv&#39;, &#39;from_dict&#39;, &#39;from_records&#39;, &#39;ge&#39;, &#39;get&#39;, &#39;groupby&#39;, &#39;gt&#39;, &#39;head&#39;, &#39;hist&#39;, &#39;iat&#39;, &#39;idxmax&#39;, &#39;idxmin&#39;, &#39;iloc&#39;, &#39;index&#39;, &#39;infer_objects&#39;, &#39;info&#39;, &#39;insert&#39;, &#39;interpolate&#39;, &#39;isin&#39;, &#39;isna&#39;, &#39;isnull&#39;, &#39;items&#39;, &#39;iteritems&#39;, &#39;iterrows&#39;, &#39;itertuples&#39;, &#39;join&#39;, &#39;keys&#39;, &#39;kurt&#39;, &#39;kurtosis&#39;, &#39;last&#39;, &#39;last_valid_index&#39;, &#39;le&#39;, &#39;loc&#39;, &#39;lookup&#39;, &#39;lt&#39;, &#39;mad&#39;, &#39;mask&#39;, &#39;max&#39;, &#39;mean&#39;, &#39;median&#39;, &#39;melt&#39;, &#39;memory_usage&#39;, &#39;merge&#39;, &#39;min&#39;, &#39;mod&#39;, &#39;mode&#39;, &#39;mul&#39;, &#39;multiply&#39;, &#39;ndim&#39;, &#39;ne&#39;, &#39;nlargest&#39;, &#39;notna&#39;, &#39;notnull&#39;, &#39;nsmallest&#39;, &#39;nunique&#39;, &#39;pad&#39;, &#39;pct_change&#39;, &#39;pipe&#39;, &#39;pivot&#39;, &#39;pivot_table&#39;, &#39;plot&#39;, &#39;pop&#39;, &#39;pow&#39;, &#39;prod&#39;, &#39;product&#39;, &#39;quantile&#39;, &#39;query&#39;, &#39;radd&#39;, &#39;rank&#39;, &#39;rdiv&#39;, &#39;reindex&#39;, &#39;reindex_like&#39;, &#39;rename&#39;, &#39;rename_axis&#39;, &#39;reorder_levels&#39;, &#39;replace&#39;, &#39;resample&#39;, &#39;reset_index&#39;, &#39;rfloordiv&#39;, &#39;rmod&#39;, &#39;rmul&#39;, &#39;rolling&#39;, &#39;round&#39;, &#39;rpow&#39;, &#39;rsub&#39;, &#39;rtruediv&#39;, &#39;sample&#39;, &#39;select_dtypes&#39;, &#39;sem&#39;, &#39;set_axis&#39;, &#39;set_flags&#39;, &#39;set_index&#39;, &#39;shape&#39;, &#39;shift&#39;, &#39;size&#39;, &#39;skew&#39;, &#39;slice_shift&#39;, &#39;sort_index&#39;, &#39;sort_values&#39;, &#39;sparse&#39;, &#39;squeeze&#39;, &#39;stack&#39;, &#39;std&#39;, &#39;style&#39;, &#39;sub&#39;, &#39;subtract&#39;, &#39;sum&#39;, &#39;swapaxes&#39;, &#39;swaplevel&#39;, &#39;tail&#39;, &#39;take&#39;, &#39;to_clipboard&#39;, &#39;to_csv&#39;, &#39;to_dict&#39;, &#39;to_excel&#39;, &#39;to_feather&#39;, &#39;to_gbq&#39;, &#39;to_hdf&#39;, &#39;to_html&#39;, &#39;to_json&#39;, &#39;to_latex&#39;, &#39;to_markdown&#39;, &#39;to_numpy&#39;, &#39;to_parquet&#39;, &#39;to_period&#39;, &#39;to_pickle&#39;, &#39;to_records&#39;, &#39;to_sql&#39;, &#39;to_stata&#39;, &#39;to_string&#39;, &#39;to_timestamp&#39;, &#39;to_xarray&#39;, &#39;to_xml&#39;, &#39;transform&#39;, &#39;transpose&#39;, &#39;truediv&#39;, &#39;truncate&#39;, &#39;tshift&#39;, &#39;tz_convert&#39;, &#39;tz_localize&#39;, &#39;unstack&#39;, &#39;update&#39;, &#39;value_counts&#39;, &#39;values&#39;, &#39;var&#39;, &#39;where&#39;, &#39;xs&#39;]}, &#39;_dh&#39;: [WindowsPath(&#39;C:/Users/20190073/Documents/PerfectML/PerfectGuide-master/2장&#39;)], &#39;In&#39;: [&#39;&#39;, &#34;import numpy as np nimport pandas as pd nimport matplotlib.pyplot as plt nimport seaborn as sns nget_ipython().run_line_magic(&#39;matplotlib&#39;, &#39;inline&#39;) n ntitanic_df = pd.read_csv(&#39;./train.csv&#39;) ntitanic_df.head(3)&#34;, &#34;print(&#39;### train 데이터 정보 ### n&#39;) nprint(titanic_df.info())&#34;, &#39;titanic_df.describe()&#39;, &#34;titanic_df[&#39;Age&#39;].fillna(titanic_df[&#39;Age&#39;].mean(), inplace=True) ntitanic_df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) ntitanic_df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) n nprint(&#39;컬럼별 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum()) nprint(&#39; n총 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum().sum())&#34;, &#34;# object 컬럼타입 추출 n# 조건 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;], &#39; n&#39;) n# 조건의 인덱스 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index, &#39; n&#39;) n# 조건 인덱스 후 리스트변환 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index.to_list(), &#39; n&#39;)&#34;, &#34;print(&#39;Sex 값 분포 : n&#39;, titanic_df[&#39;Sex&#39;].value_counts()) nprint(&#39; n Cabin 값 분포 : n&#39;, titanic_df[&#39;Cabin&#39;].value_counts()) nprint(&#39; n Embarked 값 분포 : n&#39;, titanic_df[&#39;Embarked&#39;].value_counts())&#34;, &#34;titanic_df[&#39;Cabin&#39;].str[:1]&#34;, &#34;titanic_df[&#39;Cabin&#39;] = titanic_df[&#39;Cabin&#39;].str[:1] nprint(titanic_df[&#39;Cabin&#39;].head(3))&#34;, &#34;titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;])&#34;, &#34;titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;])[&#39;Survived&#39;].count()&#34;, &#34;titanic_df[&#39;Survived&#39;].value_counts()&#34;, &#34;sns.barplot(x=&#39;Sex&#39;, y=&#39;Survived&#39;, data=titanic_df)&#34;, &#34;sns.barplot(x=&#39;Pclass&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df)&#34;, &#34;# 입력 age에 따라 구분값을 반환하는 함수 설정, DataFrame의 apply lambda 식에 사용 ndef get_category(age): n cat=&#39;&#39; n if age &lt;= -1: cat = &#39;Unknown&#39; n elif age &lt;= 5: cat = &#39;Baby&#39; n elif age &lt;= 12: cat = &#39;Child&#39; n elif age &lt;= 18: cat = &#39;Teenage&#39; n elif age &lt;= 25: cat = &#39;Student&#39; n elif age &lt;= 35: cat = &#39;Young Adult&#39; n elif age &lt;= 60: cat = &#39;Adult&#39; n else: cat = &#39;Elderly&#39; n n return cat n n# 막대 그래프의 크기 figure를 더 크게 설정 nplt.figure(figsize=(10, 6)) n n# x 축의 값을 순차적으로 표시하기 위한 설정 ngroup_names = [&#39;Unknown&#39;, &#39;Baby&#39;, &#39;Child&#39;, &#39;Teenager&#39;, &#39;Student&#39;, &#39;Young Adult&#39;, &#39;Adult&#39;, &#39;Elderly&#39;] n n# lambda 식에 위에서 생성한 get_category() 함수를 반환값으로 지정 n# get_category(x)는 입력값으로 &#39;Age&#39; 컬럼값을 받아서 해당하는 cat 반환 ntitanic_df[&#39;Age_cat&#39;] = titanic_df[&#39;Age&#39;].apply(lambda x: get_category(x)) n nsns.barplot(x=&#39;Age_cat&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df, order=group_names) ntitanic_df.drop(&#39;Age_cat&#39;, axis=1, inplace=True) &#34;, &#34;from sklearn.preprocessing import LabelEncoder n ndef encode_features(dataDF): n features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] n le = LabelEncoder() n for feature in features: n le.fit(dataDF[feature]) n dataDF[feature] = le.transform(dataDF[feature]) n n return dataDF n ntitanic_df = encode_features(titanic_df) # encode_features 함수에서 변환된 3개 컬럼값이 원본 titanic_df에 덮어써짐 ntitanic_df.head(3) &#34;, &#34;from sklearn.preprocessing import LabelEncoder n n# null 처리함수 ndef fillna(df): n df[&#39;Age&#39;].fillna(df[&#39;Age&#39;].mean(), inplace=True) n df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) n df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) n n return df n n# 머신러닝 알고리즘에 불필요한 피처제거 ndef drop_features(df): n df.drop([&#39;PassengerId&#39;, &#39;Name&#39;, &#39;Ticket&#39;], axis=1, inplace=True) n return df n n# 레이블 인코딩 수행 ndef format_features(df): n df[&#39;Cabin&#39;] = df[&#39;Cabin&#39;].str[:1] n features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] n for feature in features: n le = LabelEncoder() n le = le.fit(df[feature]) n df[feature] = le.transform(df[feature]) n return df n n# 앞에서 설정한 Data Preprocessing 함수 호출 ndef transform_features(df): n df = fillna(df) n df = drop_features(df) n df = format_features(df) n return df&#34;, &#39;titanic_df.head()&#39;, &#34;# 원본 데이터를 재로딩하고, feature 데이터 셋과 Label 데이터 셋 추출 ntitanic_df = pd.read_csv(&#39;./train.csv&#39;) ny_titanic_df = titanic_df[&#39;Survived&#39;] nX_titanic_df = titanic_df.drop(&#39;Survived&#39;, axis=1, inplace=False) n nX_titanic_df = transform_features(X_titanic_df)&#34;, &#39;X_titanic_df.head(3)&#39;, &#39;from sklearn.model_selection import train_test_split nX_train, X_test, y_train, y_test = train_test_split(X_titanic_df, y_titanic_df, n test_size=0.2, random_state=11) nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)&#39;, &#34;from sklearn.tree import DecisionTreeClassifier nfrom sklearn.ensemble import RandomForestClassifier nfrom sklearn.linear_model import LogisticRegression nfrom sklearn.metrics import accuracy_score n n# 결정트리, Random Forest, 로지스틱 회귀를 위한 사이킷런 Classifier 클래스 생성 ndt_clf = DecisionTreeClassifier(random_state=11) nrf_clf = RandomForestClassifier(random_state=11) nlr_clf = LogisticRegression(solver=&#39;liblinear&#39;) n n# DecisionTreeClassifier 학습/예측/평가 ndt_clf.fit(X_train, y_train) ndt_pred = dt_clf.predict(X_test) nprint(&#39;DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, dt_pred))) n n# RandomFroestClassifier 학습/예측/평가 nrf_clf.fit(X_train, y_train) nrf_pred = rf_clf.predict(X_test) nprint(&#39;RandomForestClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, rf_pred))) n n# LogisticRegression 학습/예측/평가 nlr_clf.fit(X_train, y_train) nlr_pred = lr_clf.predict(X_test) nprint(&#39;LogisticRegression 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, lr_pred)))&#34;, &#39;y_test_ndarray = np.array(y_test) nprint(y_test_ndarray)&#39;, &#39;dt_pred&#39;, &#39;help(accuracy_score)&#39;, &#39;X_titanic_df.values[[0, 1, 2, 3, 4, 5]]&#39;, &#34;from sklearn.model_selection import KFold n ndef exec_kfold(clf, folds=5): n # 폴드 세트를 5개인 KFold객체를 생성, 폴드 수만큼 예측결과 저장을 위한 리스트 객체 생성 n kfold = KFold(n_splits=folds) n scores = [] n # KFold 교차 검증수행 n for iter_count, (train_index, test_index) in enumerate(kfold.split(X_titanic_df)): n # X_titanic_df 데이터에서 교차 검증별로 학습과 검증 데이터를 가리키는 index 생성 n X_train, X_test = X_titanic_df.values[train_index], X_titanic_df.values[test_index] n y_train, y_test = y_titanic_df.values[train_index], y_titanic_df.values[test_index] n n # Classifier 학습, 예측, 정확도 계산 n clf.fit(X_train, y_train) n predictions = clf.predict(X_test) n accuracy = accuracy_score(y_test, predictions) n scores.append(accuracy) n print(&#39;교차 검증 {0} 정확도: {1:4f}&#39;.format(iter_count, accuracy)) n n # 5개 fold에서 평균 정확도 계산 n mean_score = np.mean(scores) n print(&#39;평균 정확도: {0: 4f}&#39;.format(mean_score)) n n# exec_fold 호출 nexec_kfold(dt_clf, folds=5)&#34;, &#34;from sklearn.model_selection import GridSearchCV n nparameters = {&#39;max_depth&#39;:[2,3,5,10], n &#39;min_samples_split&#39;:[2,3,5], &#39;min_samples_leaf&#39;:[1,5,8]} n ngrid_dclf = GridSearchCV(dt_clf, param_grid=parameters, scoring=&#39;accuracy&#39;, cv=5) ngrid_dclf.fit(X_train, y_train) n nprint(&#39;GridSearchCV 최적 하이퍼 파라미터: &#39;, grid_dclf.best_params_) nprint(&#39;GridSearchCV 최고 정확도: {0: .4f}&#39;.format(grid_dclf.best_score_)) nbest_dclf = grid_dclf.best_estimator_ n n# GridSearchCV의 최적 하이퍼 파라미터로 학습된 Estimator로 예측 및 평가 수행 ndprediction = best_dclf.predict(X_test) naccuracy = accuracy_score(y_test, dprediction) nprint(&#39;테스트 세트에서의 DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy))&#34;, &#39;help(GridSearchCV)&#39;, &#39;import pandas as pd n na = [1,2,3,4,5] na_df = pd.DataFrame(a) na_df.plot()&#39;, &#39;dir(pd.DataFrame)&#39;, &#39;globals()&#39;], &#39;Out&#39;: {1: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 Name Sex Age SibSp 0 Braund, Mr. Owen Harris male 22.0 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 2 Heikkinen, Miss. Laina female 26.0 0 Parch Ticket Fare Cabin Embarked 0 0 A/5 21171 7.2500 N S 1 0 PC 17599 71.2833 C85 C 2 0 STON/O2. 3101282 7.9250 N S , 3: PassengerId Survived Pclass Age SibSp count 891.000000 891.000000 891.000000 714.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 std 257.353842 0.486592 0.836071 14.526497 1.102743 min 1.000000 0.000000 1.000000 0.420000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 50% 446.000000 0.000000 3.000000 28.000000 0.000000 75% 668.500000 1.000000 3.000000 38.000000 1.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 Parch Fare count 891.000000 891.000000 mean 0.381594 32.204208 std 0.806057 49.693429 min 0.000000 0.000000 25% 0.000000 7.910400 50% 0.000000 14.454200 75% 0.000000 31.000000 max 6.000000 512.329200 , 7: 0 N 1 C 2 N 3 C 4 N .. 886 N 887 B 888 N 889 C 890 N Name: Cabin, Length: 891, dtype: object, 9: &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002725F96AB80&gt;, 10: Sex Survived female 0 81 1 233 male 0 468 1 109 Name: Survived, dtype: int64, 11: 0 549 1 342 Name: Survived, dtype: int64, 12: &lt;AxesSubplot:xlabel=&#39;Sex&#39;, ylabel=&#39;Survived&#39;&gt;, 13: &lt;AxesSubplot:xlabel=&#39;Pclass&#39;, ylabel=&#39;Survived&#39;&gt;, 15: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 Name Sex Age SibSp Parch 0 Braund, Mr. Owen Harris 1 22.0 1 0 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 0 38.0 1 0 2 Heikkinen, Miss. Laina 0 26.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7.2500 7 3 1 PC 17599 71.2833 2 0 2 STON/O2. 3101282 7.9250 7 3 , 17: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 3 4 1 1 4 5 0 3 Name Sex Age SibSp Parch 0 Braund, Mr. Owen Harris 1 22.0 1 0 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 0 38.0 1 0 2 Heikkinen, Miss. Laina 0 26.0 0 0 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) 0 35.0 1 0 4 Allen, Mr. William Henry 1 35.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7.2500 7 3 1 PC 17599 71.2833 2 0 2 STON/O2. 3101282 7.9250 7 3 3 113803 53.1000 2 3 4 373450 8.0500 7 3 , 19: Pclass Sex Age SibSp Parch Fare Cabin Embarked 0 3 1 22.0 1 0 7.2500 7 3 1 1 0 38.0 1 0 71.2833 2 0 2 3 0 26.0 0 0 7.9250 7 3, 23: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=int64), 25: array([[ 3. , 1. , 22. , 1. , 0. , 7.25 , 7. , 3. ], [ 1. , 0. , 38. , 1. , 0. , 71.2833 , 2. , 0. ], [ 3. , 0. , 26. , 0. , 0. , 7.925 , 7. , 3. ], [ 1. , 0. , 35. , 1. , 0. , 53.1 , 2. , 3. ], [ 3. , 1. , 35. , 0. , 0. , 8.05 , 7. , 3. ], [ 3. , 1. , 29.69911765, 0. , 0. , 8.4583 , 7. , 2. ]]), 29: &lt;AxesSubplot:&gt;, 30: [&#39;T&#39;, &#39;_AXIS_LEN&#39;, &#39;_AXIS_NAMES&#39;, &#39;_AXIS_NUMBERS&#39;, &#39;_AXIS_ORDERS&#39;, &#39;_AXIS_TO_AXIS_NUMBER&#39;, &#39;_HANDLED_TYPES&#39;, &#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__annotations__&#39;, &#39;__array__&#39;, &#39;__array_priority__&#39;, &#39;__array_ufunc__&#39;, &#39;__array_wrap__&#39;, &#39;__bool__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__finalize__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattr__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getstate__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__iand__&#39;, &#39;__ifloordiv__&#39;, &#39;__imod__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__invert__&#39;, &#39;__ior__&#39;, &#39;__ipow__&#39;, &#39;__isub__&#39;, &#39;__iter__&#39;, &#39;__itruediv__&#39;, &#39;__ixor__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__matmul__&#39;, &#39;__mod__&#39;, &#39;__module__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__nonzero__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;, &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rfloordiv__&#39;, &#39;__rmatmul__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;, &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rsub__&#39;, &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__setstate__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__weakref__&#39;, &#39;__xor__&#39;, &#39;_accessors&#39;, &#39;_accum_func&#39;, &#39;_add_numeric_operations&#39;, &#39;_agg_by_level&#39;, &#39;_agg_examples_doc&#39;, &#39;_agg_summary_and_see_also_doc&#39;, &#39;_align_frame&#39;, &#39;_align_series&#39;, &#39;_append&#39;, &#39;_arith_method&#39;, &#39;_as_manager&#39;, &#39;_box_col_values&#39;, &#39;_can_fast_transpose&#39;, &#39;_check_inplace_and_allows_duplicate_labels&#39;, &#39;_check_inplace_setting&#39;, &#39;_check_is_chained_assignment_possible&#39;, &#39;_check_label_or_level_ambiguity&#39;, &#39;_check_setitem_copy&#39;, &#39;_clear_item_cache&#39;, &#39;_clip_with_one_bound&#39;, &#39;_clip_with_scalar&#39;, &#39;_cmp_method&#39;, &#39;_combine_frame&#39;, &#39;_consolidate&#39;, &#39;_consolidate_inplace&#39;, &#39;_construct_axes_dict&#39;, &#39;_construct_axes_from_arguments&#39;, &#39;_construct_result&#39;, &#39;_constructor&#39;, &#39;_constructor_sliced&#39;, &#39;_convert&#39;, &#39;_count_level&#39;, &#39;_data&#39;, &#39;_dir_additions&#39;, &#39;_dir_deletions&#39;, &#39;_dispatch_frame_op&#39;, &#39;_drop_axis&#39;, &#39;_drop_labels_or_levels&#39;, &#39;_ensure_valid_index&#39;, &#39;_find_valid_index&#39;, &#39;_from_arrays&#39;, &#39;_from_mgr&#39;, &#39;_get_agg_axis&#39;, &#39;_get_axis&#39;, &#39;_get_axis_name&#39;, &#39;_get_axis_number&#39;, &#39;_get_axis_resolvers&#39;, &#39;_get_block_manager_axis&#39;, &#39;_get_bool_data&#39;, &#39;_get_cleaned_column_resolvers&#39;, &#39;_get_column_array&#39;, &#39;_get_index_resolvers&#39;, &#39;_get_item_cache&#39;, &#39;_get_label_or_level_values&#39;, &#39;_get_numeric_data&#39;, &#39;_get_value&#39;, &#39;_getitem_bool_array&#39;, &#39;_getitem_multilevel&#39;, &#39;_gotitem&#39;, &#39;_hidden_attrs&#39;, &#39;_indexed_same&#39;, &#39;_info_axis&#39;, &#39;_info_axis_name&#39;, &#39;_info_axis_number&#39;, &#39;_info_repr&#39;, &#39;_init_mgr&#39;, &#39;_inplace_method&#39;, &#39;_internal_names&#39;, &#39;_internal_names_set&#39;, &#39;_is_copy&#39;, &#39;_is_homogeneous_type&#39;, &#39;_is_label_or_level_reference&#39;, &#39;_is_label_reference&#39;, &#39;_is_level_reference&#39;, &#39;_is_mixed_type&#39;, &#39;_is_view&#39;, &#39;_iset_item&#39;, &#39;_iset_item_mgr&#39;, &#39;_iset_not_inplace&#39;, &#39;_iter_column_arrays&#39;, &#39;_ixs&#39;, &#39;_join_compat&#39;, &#39;_logical_func&#39;, &#39;_logical_method&#39;, &#39;_maybe_cache_changed&#39;, &#39;_maybe_update_cacher&#39;, &#39;_metadata&#39;, &#39;_min_count_stat_function&#39;, &#39;_needs_reindex_multi&#39;, &#39;_protect_consolidate&#39;, &#39;_reduce&#39;, &#39;_reduce_axis1&#39;, &#39;_reindex_axes&#39;, &#39;_reindex_columns&#39;, &#39;_reindex_index&#39;, &#39;_reindex_multi&#39;, &#39;_reindex_with_indexers&#39;, &#39;_rename&#39;, &#39;_replace_columnwise&#39;, &#39;_repr_data_resource_&#39;, &#39;_repr_fits_horizontal_&#39;, &#39;_repr_fits_vertical_&#39;, &#39;_repr_html_&#39;, &#39;_repr_latex_&#39;, &#39;_reset_cache&#39;, &#39;_reset_cacher&#39;, &#39;_sanitize_column&#39;, &#39;_series&#39;, &#39;_set_axis&#39;, &#39;_set_axis_name&#39;, &#39;_set_axis_nocheck&#39;, &#39;_set_is_copy&#39;, &#39;_set_item&#39;, &#39;_set_item_frame_value&#39;, &#39;_set_item_mgr&#39;, &#39;_set_value&#39;, &#39;_setitem_array&#39;, &#39;_setitem_frame&#39;, &#39;_setitem_slice&#39;, &#39;_slice&#39;, &#39;_stat_axis&#39;, &#39;_stat_axis_name&#39;, &#39;_stat_axis_number&#39;, &#39;_stat_function&#39;, &#39;_stat_function_ddof&#39;, &#39;_take_with_is_copy&#39;, &#39;_to_dict_of_blocks&#39;, &#39;_typ&#39;, &#39;_update_inplace&#39;, &#39;_validate_dtype&#39;, &#39;_values&#39;, &#39;_where&#39;, &#39;abs&#39;, &#39;add&#39;, &#39;add_prefix&#39;, &#39;add_suffix&#39;, &#39;agg&#39;, &#39;aggregate&#39;, &#39;align&#39;, &#39;all&#39;, &#39;any&#39;, &#39;append&#39;, &#39;apply&#39;, &#39;applymap&#39;, &#39;asfreq&#39;, &#39;asof&#39;, &#39;assign&#39;, &#39;astype&#39;, &#39;at&#39;, &#39;at_time&#39;, &#39;attrs&#39;, &#39;axes&#39;, &#39;backfill&#39;, &#39;between_time&#39;, &#39;bfill&#39;, &#39;bool&#39;, &#39;boxplot&#39;, &#39;clip&#39;, &#39;columns&#39;, &#39;combine&#39;, &#39;combine_first&#39;, &#39;compare&#39;, &#39;convert_dtypes&#39;, &#39;copy&#39;, &#39;corr&#39;, &#39;corrwith&#39;, &#39;count&#39;, &#39;cov&#39;, &#39;cummax&#39;, &#39;cummin&#39;, &#39;cumprod&#39;, &#39;cumsum&#39;, &#39;describe&#39;, &#39;diff&#39;, &#39;div&#39;, &#39;divide&#39;, &#39;dot&#39;, &#39;drop&#39;, &#39;drop_duplicates&#39;, &#39;droplevel&#39;, &#39;dropna&#39;, &#39;dtypes&#39;, &#39;duplicated&#39;, &#39;empty&#39;, &#39;eq&#39;, &#39;equals&#39;, &#39;eval&#39;, &#39;ewm&#39;, &#39;expanding&#39;, &#39;explode&#39;, &#39;ffill&#39;, &#39;fillna&#39;, &#39;filter&#39;, &#39;first&#39;, &#39;first_valid_index&#39;, &#39;flags&#39;, &#39;floordiv&#39;, &#39;from_dict&#39;, &#39;from_records&#39;, &#39;ge&#39;, &#39;get&#39;, &#39;groupby&#39;, &#39;gt&#39;, &#39;head&#39;, &#39;hist&#39;, &#39;iat&#39;, &#39;idxmax&#39;, &#39;idxmin&#39;, &#39;iloc&#39;, &#39;index&#39;, &#39;infer_objects&#39;, &#39;info&#39;, &#39;insert&#39;, &#39;interpolate&#39;, &#39;isin&#39;, &#39;isna&#39;, &#39;isnull&#39;, &#39;items&#39;, &#39;iteritems&#39;, &#39;iterrows&#39;, &#39;itertuples&#39;, &#39;join&#39;, &#39;keys&#39;, &#39;kurt&#39;, &#39;kurtosis&#39;, &#39;last&#39;, &#39;last_valid_index&#39;, &#39;le&#39;, &#39;loc&#39;, &#39;lookup&#39;, &#39;lt&#39;, &#39;mad&#39;, &#39;mask&#39;, &#39;max&#39;, &#39;mean&#39;, &#39;median&#39;, &#39;melt&#39;, &#39;memory_usage&#39;, &#39;merge&#39;, &#39;min&#39;, &#39;mod&#39;, &#39;mode&#39;, &#39;mul&#39;, &#39;multiply&#39;, &#39;ndim&#39;, &#39;ne&#39;, &#39;nlargest&#39;, &#39;notna&#39;, &#39;notnull&#39;, &#39;nsmallest&#39;, &#39;nunique&#39;, &#39;pad&#39;, &#39;pct_change&#39;, &#39;pipe&#39;, &#39;pivot&#39;, &#39;pivot_table&#39;, &#39;plot&#39;, &#39;pop&#39;, &#39;pow&#39;, &#39;prod&#39;, &#39;product&#39;, &#39;quantile&#39;, &#39;query&#39;, &#39;radd&#39;, &#39;rank&#39;, &#39;rdiv&#39;, &#39;reindex&#39;, &#39;reindex_like&#39;, &#39;rename&#39;, &#39;rename_axis&#39;, &#39;reorder_levels&#39;, &#39;replace&#39;, &#39;resample&#39;, &#39;reset_index&#39;, &#39;rfloordiv&#39;, &#39;rmod&#39;, &#39;rmul&#39;, &#39;rolling&#39;, &#39;round&#39;, &#39;rpow&#39;, &#39;rsub&#39;, &#39;rtruediv&#39;, &#39;sample&#39;, &#39;select_dtypes&#39;, &#39;sem&#39;, &#39;set_axis&#39;, &#39;set_flags&#39;, &#39;set_index&#39;, &#39;shape&#39;, &#39;shift&#39;, &#39;size&#39;, &#39;skew&#39;, &#39;slice_shift&#39;, &#39;sort_index&#39;, &#39;sort_values&#39;, &#39;sparse&#39;, &#39;squeeze&#39;, &#39;stack&#39;, &#39;std&#39;, &#39;style&#39;, &#39;sub&#39;, &#39;subtract&#39;, &#39;sum&#39;, &#39;swapaxes&#39;, &#39;swaplevel&#39;, &#39;tail&#39;, &#39;take&#39;, &#39;to_clipboard&#39;, &#39;to_csv&#39;, &#39;to_dict&#39;, &#39;to_excel&#39;, &#39;to_feather&#39;, &#39;to_gbq&#39;, &#39;to_hdf&#39;, &#39;to_html&#39;, &#39;to_json&#39;, &#39;to_latex&#39;, &#39;to_markdown&#39;, &#39;to_numpy&#39;, &#39;to_parquet&#39;, &#39;to_period&#39;, &#39;to_pickle&#39;, &#39;to_records&#39;, &#39;to_sql&#39;, &#39;to_stata&#39;, &#39;to_string&#39;, &#39;to_timestamp&#39;, &#39;to_xarray&#39;, &#39;to_xml&#39;, &#39;transform&#39;, &#39;transpose&#39;, &#39;truediv&#39;, &#39;truncate&#39;, &#39;tshift&#39;, &#39;tz_convert&#39;, &#39;tz_localize&#39;, &#39;unstack&#39;, &#39;update&#39;, &#39;value_counts&#39;, &#39;values&#39;, &#39;var&#39;, &#39;where&#39;, &#39;xs&#39;]}, &#39;get_ipython&#39;: &lt;bound method InteractiveShell.get_ipython of &lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x000002725A7D2D30&gt;&gt;, &#39;exit&#39;: &lt;IPython.core.autocall.ZMQExitAutocall at 0x2725a78eee0&gt;, &#39;quit&#39;: &lt;IPython.core.autocall.ZMQExitAutocall at 0x2725a78eee0&gt;, &#39;_&#39;: [&#39;T&#39;, &#39;_AXIS_LEN&#39;, &#39;_AXIS_NAMES&#39;, &#39;_AXIS_NUMBERS&#39;, &#39;_AXIS_ORDERS&#39;, &#39;_AXIS_TO_AXIS_NUMBER&#39;, &#39;_HANDLED_TYPES&#39;, &#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__annotations__&#39;, &#39;__array__&#39;, &#39;__array_priority__&#39;, &#39;__array_ufunc__&#39;, &#39;__array_wrap__&#39;, &#39;__bool__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__finalize__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattr__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getstate__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__iand__&#39;, &#39;__ifloordiv__&#39;, &#39;__imod__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__invert__&#39;, &#39;__ior__&#39;, &#39;__ipow__&#39;, &#39;__isub__&#39;, &#39;__iter__&#39;, &#39;__itruediv__&#39;, &#39;__ixor__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__matmul__&#39;, &#39;__mod__&#39;, &#39;__module__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__nonzero__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;, &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rfloordiv__&#39;, &#39;__rmatmul__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;, &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rsub__&#39;, &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__setstate__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__weakref__&#39;, &#39;__xor__&#39;, &#39;_accessors&#39;, &#39;_accum_func&#39;, &#39;_add_numeric_operations&#39;, &#39;_agg_by_level&#39;, &#39;_agg_examples_doc&#39;, &#39;_agg_summary_and_see_also_doc&#39;, &#39;_align_frame&#39;, &#39;_align_series&#39;, &#39;_append&#39;, &#39;_arith_method&#39;, &#39;_as_manager&#39;, &#39;_box_col_values&#39;, &#39;_can_fast_transpose&#39;, &#39;_check_inplace_and_allows_duplicate_labels&#39;, &#39;_check_inplace_setting&#39;, &#39;_check_is_chained_assignment_possible&#39;, &#39;_check_label_or_level_ambiguity&#39;, &#39;_check_setitem_copy&#39;, &#39;_clear_item_cache&#39;, &#39;_clip_with_one_bound&#39;, &#39;_clip_with_scalar&#39;, &#39;_cmp_method&#39;, &#39;_combine_frame&#39;, &#39;_consolidate&#39;, &#39;_consolidate_inplace&#39;, &#39;_construct_axes_dict&#39;, &#39;_construct_axes_from_arguments&#39;, &#39;_construct_result&#39;, &#39;_constructor&#39;, &#39;_constructor_sliced&#39;, &#39;_convert&#39;, &#39;_count_level&#39;, &#39;_data&#39;, &#39;_dir_additions&#39;, &#39;_dir_deletions&#39;, &#39;_dispatch_frame_op&#39;, &#39;_drop_axis&#39;, &#39;_drop_labels_or_levels&#39;, &#39;_ensure_valid_index&#39;, &#39;_find_valid_index&#39;, &#39;_from_arrays&#39;, &#39;_from_mgr&#39;, &#39;_get_agg_axis&#39;, &#39;_get_axis&#39;, &#39;_get_axis_name&#39;, &#39;_get_axis_number&#39;, &#39;_get_axis_resolvers&#39;, &#39;_get_block_manager_axis&#39;, &#39;_get_bool_data&#39;, &#39;_get_cleaned_column_resolvers&#39;, &#39;_get_column_array&#39;, &#39;_get_index_resolvers&#39;, &#39;_get_item_cache&#39;, &#39;_get_label_or_level_values&#39;, &#39;_get_numeric_data&#39;, &#39;_get_value&#39;, &#39;_getitem_bool_array&#39;, &#39;_getitem_multilevel&#39;, &#39;_gotitem&#39;, &#39;_hidden_attrs&#39;, &#39;_indexed_same&#39;, &#39;_info_axis&#39;, &#39;_info_axis_name&#39;, &#39;_info_axis_number&#39;, &#39;_info_repr&#39;, &#39;_init_mgr&#39;, &#39;_inplace_method&#39;, &#39;_internal_names&#39;, &#39;_internal_names_set&#39;, &#39;_is_copy&#39;, &#39;_is_homogeneous_type&#39;, &#39;_is_label_or_level_reference&#39;, &#39;_is_label_reference&#39;, &#39;_is_level_reference&#39;, &#39;_is_mixed_type&#39;, &#39;_is_view&#39;, &#39;_iset_item&#39;, &#39;_iset_item_mgr&#39;, &#39;_iset_not_inplace&#39;, &#39;_iter_column_arrays&#39;, &#39;_ixs&#39;, &#39;_join_compat&#39;, &#39;_logical_func&#39;, &#39;_logical_method&#39;, &#39;_maybe_cache_changed&#39;, &#39;_maybe_update_cacher&#39;, &#39;_metadata&#39;, &#39;_min_count_stat_function&#39;, &#39;_needs_reindex_multi&#39;, &#39;_protect_consolidate&#39;, &#39;_reduce&#39;, &#39;_reduce_axis1&#39;, &#39;_reindex_axes&#39;, &#39;_reindex_columns&#39;, &#39;_reindex_index&#39;, &#39;_reindex_multi&#39;, &#39;_reindex_with_indexers&#39;, &#39;_rename&#39;, &#39;_replace_columnwise&#39;, &#39;_repr_data_resource_&#39;, &#39;_repr_fits_horizontal_&#39;, &#39;_repr_fits_vertical_&#39;, &#39;_repr_html_&#39;, &#39;_repr_latex_&#39;, &#39;_reset_cache&#39;, &#39;_reset_cacher&#39;, &#39;_sanitize_column&#39;, &#39;_series&#39;, &#39;_set_axis&#39;, &#39;_set_axis_name&#39;, &#39;_set_axis_nocheck&#39;, &#39;_set_is_copy&#39;, &#39;_set_item&#39;, &#39;_set_item_frame_value&#39;, &#39;_set_item_mgr&#39;, &#39;_set_value&#39;, &#39;_setitem_array&#39;, &#39;_setitem_frame&#39;, &#39;_setitem_slice&#39;, &#39;_slice&#39;, &#39;_stat_axis&#39;, &#39;_stat_axis_name&#39;, &#39;_stat_axis_number&#39;, &#39;_stat_function&#39;, &#39;_stat_function_ddof&#39;, &#39;_take_with_is_copy&#39;, &#39;_to_dict_of_blocks&#39;, &#39;_typ&#39;, &#39;_update_inplace&#39;, &#39;_validate_dtype&#39;, &#39;_values&#39;, &#39;_where&#39;, &#39;abs&#39;, &#39;add&#39;, &#39;add_prefix&#39;, &#39;add_suffix&#39;, &#39;agg&#39;, &#39;aggregate&#39;, &#39;align&#39;, &#39;all&#39;, &#39;any&#39;, &#39;append&#39;, &#39;apply&#39;, &#39;applymap&#39;, &#39;asfreq&#39;, &#39;asof&#39;, &#39;assign&#39;, &#39;astype&#39;, &#39;at&#39;, &#39;at_time&#39;, &#39;attrs&#39;, &#39;axes&#39;, &#39;backfill&#39;, &#39;between_time&#39;, &#39;bfill&#39;, &#39;bool&#39;, &#39;boxplot&#39;, &#39;clip&#39;, &#39;columns&#39;, &#39;combine&#39;, &#39;combine_first&#39;, &#39;compare&#39;, &#39;convert_dtypes&#39;, &#39;copy&#39;, &#39;corr&#39;, &#39;corrwith&#39;, &#39;count&#39;, &#39;cov&#39;, &#39;cummax&#39;, &#39;cummin&#39;, &#39;cumprod&#39;, &#39;cumsum&#39;, &#39;describe&#39;, &#39;diff&#39;, &#39;div&#39;, &#39;divide&#39;, &#39;dot&#39;, &#39;drop&#39;, &#39;drop_duplicates&#39;, &#39;droplevel&#39;, &#39;dropna&#39;, &#39;dtypes&#39;, &#39;duplicated&#39;, &#39;empty&#39;, &#39;eq&#39;, &#39;equals&#39;, &#39;eval&#39;, &#39;ewm&#39;, &#39;expanding&#39;, &#39;explode&#39;, &#39;ffill&#39;, &#39;fillna&#39;, &#39;filter&#39;, &#39;first&#39;, &#39;first_valid_index&#39;, &#39;flags&#39;, &#39;floordiv&#39;, &#39;from_dict&#39;, &#39;from_records&#39;, &#39;ge&#39;, &#39;get&#39;, &#39;groupby&#39;, &#39;gt&#39;, &#39;head&#39;, &#39;hist&#39;, &#39;iat&#39;, &#39;idxmax&#39;, &#39;idxmin&#39;, &#39;iloc&#39;, &#39;index&#39;, &#39;infer_objects&#39;, &#39;info&#39;, &#39;insert&#39;, &#39;interpolate&#39;, &#39;isin&#39;, &#39;isna&#39;, &#39;isnull&#39;, &#39;items&#39;, &#39;iteritems&#39;, &#39;iterrows&#39;, &#39;itertuples&#39;, &#39;join&#39;, &#39;keys&#39;, &#39;kurt&#39;, &#39;kurtosis&#39;, &#39;last&#39;, &#39;last_valid_index&#39;, &#39;le&#39;, &#39;loc&#39;, &#39;lookup&#39;, &#39;lt&#39;, &#39;mad&#39;, &#39;mask&#39;, &#39;max&#39;, &#39;mean&#39;, &#39;median&#39;, &#39;melt&#39;, &#39;memory_usage&#39;, &#39;merge&#39;, &#39;min&#39;, &#39;mod&#39;, &#39;mode&#39;, &#39;mul&#39;, &#39;multiply&#39;, &#39;ndim&#39;, &#39;ne&#39;, &#39;nlargest&#39;, &#39;notna&#39;, &#39;notnull&#39;, &#39;nsmallest&#39;, &#39;nunique&#39;, &#39;pad&#39;, &#39;pct_change&#39;, &#39;pipe&#39;, &#39;pivot&#39;, &#39;pivot_table&#39;, &#39;plot&#39;, &#39;pop&#39;, &#39;pow&#39;, &#39;prod&#39;, &#39;product&#39;, &#39;quantile&#39;, &#39;query&#39;, &#39;radd&#39;, &#39;rank&#39;, &#39;rdiv&#39;, &#39;reindex&#39;, &#39;reindex_like&#39;, &#39;rename&#39;, &#39;rename_axis&#39;, &#39;reorder_levels&#39;, &#39;replace&#39;, &#39;resample&#39;, &#39;reset_index&#39;, &#39;rfloordiv&#39;, &#39;rmod&#39;, &#39;rmul&#39;, &#39;rolling&#39;, &#39;round&#39;, &#39;rpow&#39;, &#39;rsub&#39;, &#39;rtruediv&#39;, &#39;sample&#39;, &#39;select_dtypes&#39;, &#39;sem&#39;, &#39;set_axis&#39;, &#39;set_flags&#39;, &#39;set_index&#39;, &#39;shape&#39;, &#39;shift&#39;, &#39;size&#39;, &#39;skew&#39;, &#39;slice_shift&#39;, &#39;sort_index&#39;, &#39;sort_values&#39;, &#39;sparse&#39;, &#39;squeeze&#39;, &#39;stack&#39;, &#39;std&#39;, &#39;style&#39;, &#39;sub&#39;, &#39;subtract&#39;, &#39;sum&#39;, &#39;swapaxes&#39;, &#39;swaplevel&#39;, &#39;tail&#39;, &#39;take&#39;, &#39;to_clipboard&#39;, &#39;to_csv&#39;, &#39;to_dict&#39;, &#39;to_excel&#39;, &#39;to_feather&#39;, &#39;to_gbq&#39;, &#39;to_hdf&#39;, &#39;to_html&#39;, &#39;to_json&#39;, &#39;to_latex&#39;, &#39;to_markdown&#39;, &#39;to_numpy&#39;, &#39;to_parquet&#39;, &#39;to_period&#39;, &#39;to_pickle&#39;, &#39;to_records&#39;, &#39;to_sql&#39;, &#39;to_stata&#39;, &#39;to_string&#39;, &#39;to_timestamp&#39;, &#39;to_xarray&#39;, &#39;to_xml&#39;, &#39;transform&#39;, &#39;transpose&#39;, &#39;truediv&#39;, &#39;truncate&#39;, &#39;tshift&#39;, &#39;tz_convert&#39;, &#39;tz_localize&#39;, &#39;unstack&#39;, &#39;update&#39;, &#39;value_counts&#39;, &#39;values&#39;, &#39;var&#39;, &#39;where&#39;, &#39;xs&#39;], &#39;__&#39;: &lt;AxesSubplot:&gt;, &#39;___&#39;: array([[ 3. , 1. , 22. , 1. , 0. , 7.25 , 7. , 3. ], [ 1. , 0. , 38. , 1. , 0. , 71.2833 , 2. , 0. ], [ 3. , 0. , 26. , 0. , 0. , 7.925 , 7. , 3. ], [ 1. , 0. , 35. , 1. , 0. , 53.1 , 2. , 3. ], [ 3. , 1. , 35. , 0. , 0. , 8.05 , 7. , 3. ], [ 3. , 1. , 29.69911765, 0. , 0. , 8.4583 , 7. , 2. ]]), &#39;_i&#39;: &#39;dir(pd.DataFrame)&#39;, &#39;_ii&#39;: &#39;import pandas as pd n na = [1,2,3,4,5] na_df = pd.DataFrame(a) na_df.plot()&#39;, &#39;_iii&#39;: &#39;help(GridSearchCV)&#39;, &#39;_i1&#39;: &#34;import numpy as np nimport pandas as pd nimport matplotlib.pyplot as plt nimport seaborn as sns n%matplotlib inline n ntitanic_df = pd.read_csv(&#39;./train.csv&#39;) ntitanic_df.head(3)&#34;, &#39;np&#39;: &lt;module &#39;numpy&#39; from &#39;C: Users 20190073 Anaconda3 lib site-packages numpy __init__.py&#39;&gt;, &#39;pd&#39;: &lt;module &#39;pandas&#39; from &#39;C: Users 20190073 Anaconda3 lib site-packages pandas __init__.py&#39;&gt;, &#39;plt&#39;: &lt;module &#39;matplotlib.pyplot&#39; from &#39;C: Users 20190073 Anaconda3 lib site-packages matplotlib pyplot.py&#39;&gt;, &#39;sns&#39;: &lt;module &#39;seaborn&#39; from &#39;C: Users 20190073 Anaconda3 lib site-packages seaborn __init__.py&#39;&gt;, &#39;titanic_df&#39;: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 3 4 1 1 4 5 0 3 .. ... ... ... 886 887 0 2 887 888 1 1 888 889 0 3 889 890 1 1 890 891 0 3 Name Sex Age SibSp 0 Braund, Mr. Owen Harris male 22.0 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 2 Heikkinen, Miss. Laina female 26.0 0 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 4 Allen, Mr. William Henry male 35.0 0 .. ... ... ... ... 886 Montvila, Rev. Juozas male 27.0 0 887 Graham, Miss. Margaret Edith female 19.0 0 888 Johnston, Miss. Catherine Helen &#34;Carrie&#34; female NaN 1 889 Behr, Mr. Karl Howell male 26.0 0 890 Dooley, Mr. Patrick male 32.0 0 Parch Ticket Fare Cabin Embarked 0 0 A/5 21171 7.2500 NaN S 1 0 PC 17599 71.2833 C85 C 2 0 STON/O2. 3101282 7.9250 NaN S 3 0 113803 53.1000 C123 S 4 0 373450 8.0500 NaN S .. ... ... ... ... ... 886 0 211536 13.0000 NaN S 887 0 112053 30.0000 B42 S 888 2 W./C. 6607 23.4500 NaN S 889 0 111369 30.0000 C148 C 890 0 370376 7.7500 NaN Q [891 rows x 12 columns], &#39;_1&#39;: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 Name Sex Age SibSp 0 Braund, Mr. Owen Harris male 22.0 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 2 Heikkinen, Miss. Laina female 26.0 0 Parch Ticket Fare Cabin Embarked 0 0 A/5 21171 7.2500 N S 1 0 PC 17599 71.2833 C85 C 2 0 STON/O2. 3101282 7.9250 N S , &#39;_i2&#39;: &#34;print(&#39;### train 데이터 정보 ### n&#39;) nprint(titanic_df.info())&#34;, &#39;_i3&#39;: &#39;titanic_df.describe()&#39;, &#39;_3&#39;: PassengerId Survived Pclass Age SibSp count 891.000000 891.000000 891.000000 714.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 std 257.353842 0.486592 0.836071 14.526497 1.102743 min 1.000000 0.000000 1.000000 0.420000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 50% 446.000000 0.000000 3.000000 28.000000 0.000000 75% 668.500000 1.000000 3.000000 38.000000 1.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 Parch Fare count 891.000000 891.000000 mean 0.381594 32.204208 std 0.806057 49.693429 min 0.000000 0.000000 25% 0.000000 7.910400 50% 0.000000 14.454200 75% 0.000000 31.000000 max 6.000000 512.329200 , &#39;_i4&#39;: &#34;titanic_df[&#39;Age&#39;].fillna(titanic_df[&#39;Age&#39;].mean(), inplace=True) ntitanic_df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) ntitanic_df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) n nprint(&#39;컬럼별 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum()) nprint(&#39; n총 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum().sum())&#34;, &#39;_i5&#39;: &#34;# object 컬럼타입 추출 n# 조건 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;], &#39; n&#39;) n# 조건의 인덱스 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index, &#39; n&#39;) n# 조건 인덱스 후 리스트변환 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index.to_list(), &#39; n&#39;)&#34;, &#39;_i6&#39;: &#34;print(&#39;Sex 값 분포 : n&#39;, titanic_df[&#39;Sex&#39;].value_counts()) nprint(&#39; n Cabin 값 분포 : n&#39;, titanic_df[&#39;Cabin&#39;].value_counts()) nprint(&#39; n Embarked 값 분포 : n&#39;, titanic_df[&#39;Embarked&#39;].value_counts())&#34;, &#39;_i7&#39;: &#34;titanic_df[&#39;Cabin&#39;].str[:1]&#34;, &#39;_7&#39;: 0 N 1 C 2 N 3 C 4 N .. 886 N 887 B 888 N 889 C 890 N Name: Cabin, Length: 891, dtype: object, &#39;_i8&#39;: &#34;titanic_df[&#39;Cabin&#39;] = titanic_df[&#39;Cabin&#39;].str[:1] nprint(titanic_df[&#39;Cabin&#39;].head(3))&#34;, &#39;_i9&#39;: &#34;titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;])&#34;, &#39;_9&#39;: &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002725F96AB80&gt;, &#39;_i10&#39;: &#34;titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;])[&#39;Survived&#39;].count()&#34;, &#39;_10&#39;: Sex Survived female 0 81 1 233 male 0 468 1 109 Name: Survived, dtype: int64, &#39;_i11&#39;: &#34;titanic_df[&#39;Survived&#39;].value_counts()&#34;, &#39;_11&#39;: 0 549 1 342 Name: Survived, dtype: int64, &#39;_i12&#39;: &#34;sns.barplot(x=&#39;Sex&#39;, y=&#39;Survived&#39;, data=titanic_df)&#34;, &#39;_12&#39;: &lt;AxesSubplot:xlabel=&#39;Sex&#39;, ylabel=&#39;Survived&#39;&gt;, &#39;_i13&#39;: &#34;sns.barplot(x=&#39;Pclass&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df)&#34;, &#39;_13&#39;: &lt;AxesSubplot:xlabel=&#39;Pclass&#39;, ylabel=&#39;Survived&#39;&gt;, &#39;_i14&#39;: &#34;# 입력 age에 따라 구분값을 반환하는 함수 설정, DataFrame의 apply lambda 식에 사용 ndef get_category(age): n cat=&#39;&#39; n if age &lt;= -1: cat = &#39;Unknown&#39; n elif age &lt;= 5: cat = &#39;Baby&#39; n elif age &lt;= 12: cat = &#39;Child&#39; n elif age &lt;= 18: cat = &#39;Teenage&#39; n elif age &lt;= 25: cat = &#39;Student&#39; n elif age &lt;= 35: cat = &#39;Young Adult&#39; n elif age &lt;= 60: cat = &#39;Adult&#39; n else: cat = &#39;Elderly&#39; n n return cat n n# 막대 그래프의 크기 figure를 더 크게 설정 nplt.figure(figsize=(10, 6)) n n# x 축의 값을 순차적으로 표시하기 위한 설정 ngroup_names = [&#39;Unknown&#39;, &#39;Baby&#39;, &#39;Child&#39;, &#39;Teenager&#39;, &#39;Student&#39;, &#39;Young Adult&#39;, &#39;Adult&#39;, &#39;Elderly&#39;] n n# lambda 식에 위에서 생성한 get_category() 함수를 반환값으로 지정 n# get_category(x)는 입력값으로 &#39;Age&#39; 컬럼값을 받아서 해당하는 cat 반환 ntitanic_df[&#39;Age_cat&#39;] = titanic_df[&#39;Age&#39;].apply(lambda x: get_category(x)) n nsns.barplot(x=&#39;Age_cat&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df, order=group_names) ntitanic_df.drop(&#39;Age_cat&#39;, axis=1, inplace=True) &#34;, &#39;get_category&#39;: &lt;function __main__.get_category(age)&gt;, &#39;group_names&#39;: [&#39;Unknown&#39;, &#39;Baby&#39;, &#39;Child&#39;, &#39;Teenager&#39;, &#39;Student&#39;, &#39;Young Adult&#39;, &#39;Adult&#39;, &#39;Elderly&#39;], &#39;_i15&#39;: &#34;from sklearn.preprocessing import LabelEncoder n ndef encode_features(dataDF): n features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] n le = LabelEncoder() n for feature in features: n le.fit(dataDF[feature]) n dataDF[feature] = le.transform(dataDF[feature]) n n return dataDF n ntitanic_df = encode_features(titanic_df) # encode_features 함수에서 변환된 3개 컬럼값이 원본 titanic_df에 덮어써짐 ntitanic_df.head(3) &#34;, &#39;LabelEncoder&#39;: sklearn.preprocessing._label.LabelEncoder, &#39;encode_features&#39;: &lt;function __main__.encode_features(dataDF)&gt;, &#39;_15&#39;: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 Name Sex Age SibSp Parch 0 Braund, Mr. Owen Harris 1 22.0 1 0 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 0 38.0 1 0 2 Heikkinen, Miss. Laina 0 26.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7.2500 7 3 1 PC 17599 71.2833 2 0 2 STON/O2. 3101282 7.9250 7 3 , &#39;_i16&#39;: &#34;from sklearn.preprocessing import LabelEncoder n n# null 처리함수 ndef fillna(df): n df[&#39;Age&#39;].fillna(df[&#39;Age&#39;].mean(), inplace=True) n df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) n df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) n n return df n n# 머신러닝 알고리즘에 불필요한 피처제거 ndef drop_features(df): n df.drop([&#39;PassengerId&#39;, &#39;Name&#39;, &#39;Ticket&#39;], axis=1, inplace=True) n return df n n# 레이블 인코딩 수행 ndef format_features(df): n df[&#39;Cabin&#39;] = df[&#39;Cabin&#39;].str[:1] n features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] n for feature in features: n le = LabelEncoder() n le = le.fit(df[feature]) n df[feature] = le.transform(df[feature]) n return df n n# 앞에서 설정한 Data Preprocessing 함수 호출 ndef transform_features(df): n df = fillna(df) n df = drop_features(df) n df = format_features(df) n return df&#34;, &#39;fillna&#39;: &lt;function __main__.fillna(df)&gt;, &#39;drop_features&#39;: &lt;function __main__.drop_features(df)&gt;, &#39;format_features&#39;: &lt;function __main__.format_features(df)&gt;, &#39;transform_features&#39;: &lt;function __main__.transform_features(df)&gt;, &#39;_i17&#39;: &#39;titanic_df.head()&#39;, &#39;_17&#39;: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 3 4 1 1 4 5 0 3 Name Sex Age SibSp Parch 0 Braund, Mr. Owen Harris 1 22.0 1 0 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 0 38.0 1 0 2 Heikkinen, Miss. Laina 0 26.0 0 0 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) 0 35.0 1 0 4 Allen, Mr. William Henry 1 35.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7.2500 7 3 1 PC 17599 71.2833 2 0 2 STON/O2. 3101282 7.9250 7 3 3 113803 53.1000 2 3 4 373450 8.0500 7 3 , &#39;_i18&#39;: &#34;# 원본 데이터를 재로딩하고, feature 데이터 셋과 Label 데이터 셋 추출 ntitanic_df = pd.read_csv(&#39;./train.csv&#39;) ny_titanic_df = titanic_df[&#39;Survived&#39;] nX_titanic_df = titanic_df.drop(&#39;Survived&#39;, axis=1, inplace=False) n nX_titanic_df = transform_features(X_titanic_df)&#34;, &#39;y_titanic_df&#39;: 0 0 1 1 2 1 3 1 4 0 .. 886 0 887 1 888 0 889 1 890 0 Name: Survived, Length: 891, dtype: int64, &#39;X_titanic_df&#39;: Pclass Sex Age SibSp Parch Fare Cabin Embarked 0 3 1 22.000000 1 0 7.2500 7 3 1 1 0 38.000000 1 0 71.2833 2 0 2 3 0 26.000000 0 0 7.9250 7 3 3 1 0 35.000000 1 0 53.1000 2 3 4 3 1 35.000000 0 0 8.0500 7 3 .. ... ... ... ... ... ... ... ... 886 2 1 27.000000 0 0 13.0000 7 3 887 1 0 19.000000 0 0 30.0000 1 3 888 3 0 29.699118 1 2 23.4500 7 3 889 1 1 26.000000 0 0 30.0000 2 0 890 3 1 32.000000 0 0 7.7500 7 2 [891 rows x 8 columns], &#39;_i19&#39;: &#39;X_titanic_df.head(3)&#39;, &#39;_19&#39;: Pclass Sex Age SibSp Parch Fare Cabin Embarked 0 3 1 22.0 1 0 7.2500 7 3 1 1 0 38.0 1 0 71.2833 2 0 2 3 0 26.0 0 0 7.9250 7 3, &#39;_i20&#39;: &#39;from sklearn.model_selection import train_test_split nX_train, X_test, y_train, y_test = train_test_split(X_titanic_df, y_titanic_df, n test_size=0.2, random_state=11) nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)&#39;, &#39;train_test_split&#39;: &lt;function sklearn.model_selection._split.train_test_split(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)&gt;, &#39;X_train&#39;: Pclass Sex Age SibSp Parch Fare Cabin Embarked 333 3 1 16.0 2 0 18.0000 7 3 662 1 1 47.0 0 0 25.5875 4 3 382 3 1 32.0 0 0 7.9250 7 3 331 1 1 45.5 0 0 28.5000 2 3 149 2 1 42.0 0 0 13.0000 7 3 .. ... ... ... ... ... ... ... ... 269 1 0 35.0 0 0 135.6333 2 3 337 1 0 41.0 0 0 134.5000 4 0 91 3 1 20.0 0 0 7.8542 7 3 80 3 1 22.0 0 0 9.0000 7 3 703 3 1 25.0 0 0 7.7417 7 2 [712 rows x 8 columns], &#39;X_test&#39;: Pclass Sex Age SibSp Parch Fare Cabin Embarked 431 3 0 29.699118 1 0 16.1000 7 3 821 3 1 27.000000 0 0 8.6625 7 3 629 3 1 29.699118 0 0 7.7333 7 2 626 2 1 57.000000 0 0 12.3500 7 2 665 2 1 32.000000 2 0 73.5000 7 3 .. ... ... ... ... ... ... ... ... 638 3 0 41.000000 0 5 39.6875 7 3 771 3 1 48.000000 0 0 7.8542 7 3 521 3 1 22.000000 0 0 7.8958 7 3 711 1 1 29.699118 0 0 26.5500 2 3 484 1 1 25.000000 1 0 91.0792 1 0 [179 rows x 8 columns], &#39;y_train&#39;: 333 0 662 0 382 0 331 0 149 0 .. 269 1 337 1 91 0 80 0 703 0 Name: Survived, Length: 712, dtype: int64, &#39;y_test&#39;: 431 1 821 1 629 0 626 0 665 0 .. 638 0 771 0 521 0 711 0 484 1 Name: Survived, Length: 179, dtype: int64, &#39;_i21&#39;: &#34;from sklearn.tree import DecisionTreeClassifier nfrom sklearn.ensemble import RandomForestClassifier nfrom sklearn.linear_model import LogisticRegression nfrom sklearn.metrics import accuracy_score n n# 결정트리, Random Forest, 로지스틱 회귀를 위한 사이킷런 Classifier 클래스 생성 ndt_clf = DecisionTreeClassifier(random_state=11) nrf_clf = RandomForestClassifier(random_state=11) nlr_clf = LogisticRegression(solver=&#39;liblinear&#39;) n n# DecisionTreeClassifier 학습/예측/평가 ndt_clf.fit(X_train, y_train) ndt_pred = dt_clf.predict(X_test) nprint(&#39;DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, dt_pred))) n n# RandomFroestClassifier 학습/예측/평가 nrf_clf.fit(X_train, y_train) nrf_pred = rf_clf.predict(X_test) nprint(&#39;RandomForestClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, rf_pred))) n n# LogisticRegression 학습/예측/평가 nlr_clf.fit(X_train, y_train) nlr_pred = lr_clf.predict(X_test) nprint(&#39;LogisticRegression 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, lr_pred)))&#34;, &#39;DecisionTreeClassifier&#39;: sklearn.tree._classes.DecisionTreeClassifier, &#39;RandomForestClassifier&#39;: sklearn.ensemble._forest.RandomForestClassifier, &#39;LogisticRegression&#39;: sklearn.linear_model._logistic.LogisticRegression, &#39;accuracy_score&#39;: &lt;function sklearn.metrics._classification.accuracy_score(y_true, y_pred, *, normalize=True, sample_weight=None)&gt;, &#39;dt_clf&#39;: DecisionTreeClassifier(random_state=11), &#39;rf_clf&#39;: RandomForestClassifier(random_state=11), &#39;lr_clf&#39;: LogisticRegression(solver=&#39;liblinear&#39;), &#39;dt_pred&#39;: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=int64), &#39;rf_pred&#39;: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], dtype=int64), &#39;lr_pred&#39;: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=int64), &#39;_i22&#39;: &#39;y_test_ndarray = np.array(y_test) nprint(y_test_ndarray)&#39;, &#39;y_test_ndarray&#39;: array([1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=int64), &#39;_i23&#39;: &#39;dt_pred&#39;, &#39;_23&#39;: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=int64), &#39;_i24&#39;: &#39;help(accuracy_score)&#39;, &#39;_i25&#39;: &#39;X_titanic_df.values[[0, 1, 2, 3, 4, 5]]&#39;, &#39;_25&#39;: array([[ 3. , 1. , 22. , 1. , 0. , 7.25 , 7. , 3. ], [ 1. , 0. , 38. , 1. , 0. , 71.2833 , 2. , 0. ], [ 3. , 0. , 26. , 0. , 0. , 7.925 , 7. , 3. ], [ 1. , 0. , 35. , 1. , 0. , 53.1 , 2. , 3. ], [ 3. , 1. , 35. , 0. , 0. , 8.05 , 7. , 3. ], [ 3. , 1. , 29.69911765, 0. , 0. , 8.4583 , 7. , 2. ]]), &#39;_i26&#39;: &#34;from sklearn.model_selection import KFold n ndef exec_kfold(clf, folds=5): n # 폴드 세트를 5개인 KFold객체를 생성, 폴드 수만큼 예측결과 저장을 위한 리스트 객체 생성 n kfold = KFold(n_splits=folds) n scores = [] n # KFold 교차 검증수행 n for iter_count, (train_index, test_index) in enumerate(kfold.split(X_titanic_df)): n # X_titanic_df 데이터에서 교차 검증별로 학습과 검증 데이터를 가리키는 index 생성 n X_train, X_test = X_titanic_df.values[train_index], X_titanic_df.values[test_index] n y_train, y_test = y_titanic_df.values[train_index], y_titanic_df.values[test_index] n n # Classifier 학습, 예측, 정확도 계산 n clf.fit(X_train, y_train) n predictions = clf.predict(X_test) n accuracy = accuracy_score(y_test, predictions) n scores.append(accuracy) n print(&#39;교차 검증 {0} 정확도: {1:4f}&#39;.format(iter_count, accuracy)) n n # 5개 fold에서 평균 정확도 계산 n mean_score = np.mean(scores) n print(&#39;평균 정확도: {0: 4f}&#39;.format(mean_score)) n n# exec_fold 호출 nexec_kfold(dt_clf, folds=5)&#34;, &#39;KFold&#39;: sklearn.model_selection._split.KFold, &#39;exec_kfold&#39;: &lt;function __main__.exec_kfold(clf, folds=5)&gt;, &#39;_i27&#39;: &#34;from sklearn.model_selection import GridSearchCV n nparameters = {&#39;max_depth&#39;:[2,3,5,10], n &#39;min_samples_split&#39;:[2,3,5], &#39;min_samples_leaf&#39;:[1,5,8]} n ngrid_dclf = GridSearchCV(dt_clf, param_grid=parameters, scoring=&#39;accuracy&#39;, cv=5) ngrid_dclf.fit(X_train, y_train) n nprint(&#39;GridSearchCV 최적 하이퍼 파라미터: &#39;, grid_dclf.best_params_) nprint(&#39;GridSearchCV 최고 정확도: {0: .4f}&#39;.format(grid_dclf.best_score_)) nbest_dclf = grid_dclf.best_estimator_ n n# GridSearchCV의 최적 하이퍼 파라미터로 학습된 Estimator로 예측 및 평가 수행 ndprediction = best_dclf.predict(X_test) naccuracy = accuracy_score(y_test, dprediction) nprint(&#39;테스트 세트에서의 DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy))&#34;, &#39;GridSearchCV&#39;: sklearn.model_selection._search.GridSearchCV, &#39;parameters&#39;: {&#39;max_depth&#39;: [2, 3, 5, 10], &#39;min_samples_split&#39;: [2, 3, 5], &#39;min_samples_leaf&#39;: [1, 5, 8]}, &#39;grid_dclf&#39;: GridSearchCV(cv=5, estimator=DecisionTreeClassifier(random_state=11), param_grid={&#39;max_depth&#39;: [2, 3, 5, 10], &#39;min_samples_leaf&#39;: [1, 5, 8], &#39;min_samples_split&#39;: [2, 3, 5]}, scoring=&#39;accuracy&#39;), &#39;best_dclf&#39;: DecisionTreeClassifier(max_depth=3, min_samples_leaf=5, random_state=11), &#39;dprediction&#39;: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], dtype=int64), &#39;accuracy&#39;: 0.8715083798882681, &#39;_i28&#39;: &#39;help(GridSearchCV)&#39;, &#39;_i29&#39;: &#39;import pandas as pd n na = [1,2,3,4,5] na_df = pd.DataFrame(a) na_df.plot()&#39;, &#39;a&#39;: [1, 2, 3, 4, 5], &#39;a_df&#39;: 0 0 1 1 2 2 3 3 4 4 5, &#39;_29&#39;: &lt;AxesSubplot:&gt;, &#39;_i30&#39;: &#39;dir(pd.DataFrame)&#39;, &#39;_30&#39;: [&#39;T&#39;, &#39;_AXIS_LEN&#39;, &#39;_AXIS_NAMES&#39;, &#39;_AXIS_NUMBERS&#39;, &#39;_AXIS_ORDERS&#39;, &#39;_AXIS_TO_AXIS_NUMBER&#39;, &#39;_HANDLED_TYPES&#39;, &#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__annotations__&#39;, &#39;__array__&#39;, &#39;__array_priority__&#39;, &#39;__array_ufunc__&#39;, &#39;__array_wrap__&#39;, &#39;__bool__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__finalize__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattr__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getstate__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__iand__&#39;, &#39;__ifloordiv__&#39;, &#39;__imod__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__invert__&#39;, &#39;__ior__&#39;, &#39;__ipow__&#39;, &#39;__isub__&#39;, &#39;__iter__&#39;, &#39;__itruediv__&#39;, &#39;__ixor__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__matmul__&#39;, &#39;__mod__&#39;, &#39;__module__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__nonzero__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;, &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rfloordiv__&#39;, &#39;__rmatmul__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;, &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rsub__&#39;, &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__setstate__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__weakref__&#39;, &#39;__xor__&#39;, &#39;_accessors&#39;, &#39;_accum_func&#39;, &#39;_add_numeric_operations&#39;, &#39;_agg_by_level&#39;, &#39;_agg_examples_doc&#39;, &#39;_agg_summary_and_see_also_doc&#39;, &#39;_align_frame&#39;, &#39;_align_series&#39;, &#39;_append&#39;, &#39;_arith_method&#39;, &#39;_as_manager&#39;, &#39;_box_col_values&#39;, &#39;_can_fast_transpose&#39;, &#39;_check_inplace_and_allows_duplicate_labels&#39;, &#39;_check_inplace_setting&#39;, &#39;_check_is_chained_assignment_possible&#39;, &#39;_check_label_or_level_ambiguity&#39;, &#39;_check_setitem_copy&#39;, &#39;_clear_item_cache&#39;, &#39;_clip_with_one_bound&#39;, &#39;_clip_with_scalar&#39;, &#39;_cmp_method&#39;, &#39;_combine_frame&#39;, &#39;_consolidate&#39;, &#39;_consolidate_inplace&#39;, &#39;_construct_axes_dict&#39;, &#39;_construct_axes_from_arguments&#39;, &#39;_construct_result&#39;, &#39;_constructor&#39;, &#39;_constructor_sliced&#39;, &#39;_convert&#39;, &#39;_count_level&#39;, &#39;_data&#39;, &#39;_dir_additions&#39;, &#39;_dir_deletions&#39;, &#39;_dispatch_frame_op&#39;, &#39;_drop_axis&#39;, &#39;_drop_labels_or_levels&#39;, &#39;_ensure_valid_index&#39;, &#39;_find_valid_index&#39;, &#39;_from_arrays&#39;, &#39;_from_mgr&#39;, &#39;_get_agg_axis&#39;, &#39;_get_axis&#39;, &#39;_get_axis_name&#39;, &#39;_get_axis_number&#39;, &#39;_get_axis_resolvers&#39;, &#39;_get_block_manager_axis&#39;, &#39;_get_bool_data&#39;, &#39;_get_cleaned_column_resolvers&#39;, &#39;_get_column_array&#39;, &#39;_get_index_resolvers&#39;, &#39;_get_item_cache&#39;, &#39;_get_label_or_level_values&#39;, &#39;_get_numeric_data&#39;, &#39;_get_value&#39;, &#39;_getitem_bool_array&#39;, &#39;_getitem_multilevel&#39;, &#39;_gotitem&#39;, &#39;_hidden_attrs&#39;, &#39;_indexed_same&#39;, &#39;_info_axis&#39;, &#39;_info_axis_name&#39;, &#39;_info_axis_number&#39;, &#39;_info_repr&#39;, &#39;_init_mgr&#39;, &#39;_inplace_method&#39;, &#39;_internal_names&#39;, &#39;_internal_names_set&#39;, &#39;_is_copy&#39;, &#39;_is_homogeneous_type&#39;, &#39;_is_label_or_level_reference&#39;, &#39;_is_label_reference&#39;, &#39;_is_level_reference&#39;, &#39;_is_mixed_type&#39;, &#39;_is_view&#39;, &#39;_iset_item&#39;, &#39;_iset_item_mgr&#39;, &#39;_iset_not_inplace&#39;, &#39;_iter_column_arrays&#39;, &#39;_ixs&#39;, &#39;_join_compat&#39;, &#39;_logical_func&#39;, &#39;_logical_method&#39;, &#39;_maybe_cache_changed&#39;, &#39;_maybe_update_cacher&#39;, &#39;_metadata&#39;, &#39;_min_count_stat_function&#39;, &#39;_needs_reindex_multi&#39;, &#39;_protect_consolidate&#39;, &#39;_reduce&#39;, &#39;_reduce_axis1&#39;, &#39;_reindex_axes&#39;, &#39;_reindex_columns&#39;, &#39;_reindex_index&#39;, &#39;_reindex_multi&#39;, &#39;_reindex_with_indexers&#39;, &#39;_rename&#39;, &#39;_replace_columnwise&#39;, &#39;_repr_data_resource_&#39;, &#39;_repr_fits_horizontal_&#39;, &#39;_repr_fits_vertical_&#39;, &#39;_repr_html_&#39;, &#39;_repr_latex_&#39;, &#39;_reset_cache&#39;, &#39;_reset_cacher&#39;, &#39;_sanitize_column&#39;, &#39;_series&#39;, &#39;_set_axis&#39;, &#39;_set_axis_name&#39;, &#39;_set_axis_nocheck&#39;, &#39;_set_is_copy&#39;, &#39;_set_item&#39;, &#39;_set_item_frame_value&#39;, &#39;_set_item_mgr&#39;, &#39;_set_value&#39;, &#39;_setitem_array&#39;, &#39;_setitem_frame&#39;, &#39;_setitem_slice&#39;, &#39;_slice&#39;, &#39;_stat_axis&#39;, &#39;_stat_axis_name&#39;, &#39;_stat_axis_number&#39;, &#39;_stat_function&#39;, &#39;_stat_function_ddof&#39;, &#39;_take_with_is_copy&#39;, &#39;_to_dict_of_blocks&#39;, &#39;_typ&#39;, &#39;_update_inplace&#39;, &#39;_validate_dtype&#39;, &#39;_values&#39;, &#39;_where&#39;, &#39;abs&#39;, &#39;add&#39;, &#39;add_prefix&#39;, &#39;add_suffix&#39;, &#39;agg&#39;, &#39;aggregate&#39;, &#39;align&#39;, &#39;all&#39;, &#39;any&#39;, &#39;append&#39;, &#39;apply&#39;, &#39;applymap&#39;, &#39;asfreq&#39;, &#39;asof&#39;, &#39;assign&#39;, &#39;astype&#39;, &#39;at&#39;, &#39;at_time&#39;, &#39;attrs&#39;, &#39;axes&#39;, &#39;backfill&#39;, &#39;between_time&#39;, &#39;bfill&#39;, &#39;bool&#39;, &#39;boxplot&#39;, &#39;clip&#39;, &#39;columns&#39;, &#39;combine&#39;, &#39;combine_first&#39;, &#39;compare&#39;, &#39;convert_dtypes&#39;, &#39;copy&#39;, &#39;corr&#39;, &#39;corrwith&#39;, &#39;count&#39;, &#39;cov&#39;, &#39;cummax&#39;, &#39;cummin&#39;, &#39;cumprod&#39;, &#39;cumsum&#39;, &#39;describe&#39;, &#39;diff&#39;, &#39;div&#39;, &#39;divide&#39;, &#39;dot&#39;, &#39;drop&#39;, &#39;drop_duplicates&#39;, &#39;droplevel&#39;, &#39;dropna&#39;, &#39;dtypes&#39;, &#39;duplicated&#39;, &#39;empty&#39;, &#39;eq&#39;, &#39;equals&#39;, &#39;eval&#39;, &#39;ewm&#39;, &#39;expanding&#39;, &#39;explode&#39;, &#39;ffill&#39;, &#39;fillna&#39;, &#39;filter&#39;, &#39;first&#39;, &#39;first_valid_index&#39;, &#39;flags&#39;, &#39;floordiv&#39;, &#39;from_dict&#39;, &#39;from_records&#39;, &#39;ge&#39;, &#39;get&#39;, &#39;groupby&#39;, &#39;gt&#39;, &#39;head&#39;, &#39;hist&#39;, &#39;iat&#39;, &#39;idxmax&#39;, &#39;idxmin&#39;, &#39;iloc&#39;, &#39;index&#39;, &#39;infer_objects&#39;, &#39;info&#39;, &#39;insert&#39;, &#39;interpolate&#39;, &#39;isin&#39;, &#39;isna&#39;, &#39;isnull&#39;, &#39;items&#39;, &#39;iteritems&#39;, &#39;iterrows&#39;, &#39;itertuples&#39;, &#39;join&#39;, &#39;keys&#39;, &#39;kurt&#39;, &#39;kurtosis&#39;, &#39;last&#39;, &#39;last_valid_index&#39;, &#39;le&#39;, &#39;loc&#39;, &#39;lookup&#39;, &#39;lt&#39;, &#39;mad&#39;, &#39;mask&#39;, &#39;max&#39;, &#39;mean&#39;, &#39;median&#39;, &#39;melt&#39;, &#39;memory_usage&#39;, &#39;merge&#39;, &#39;min&#39;, &#39;mod&#39;, &#39;mode&#39;, &#39;mul&#39;, &#39;multiply&#39;, &#39;ndim&#39;, &#39;ne&#39;, &#39;nlargest&#39;, &#39;notna&#39;, &#39;notnull&#39;, &#39;nsmallest&#39;, &#39;nunique&#39;, &#39;pad&#39;, &#39;pct_change&#39;, &#39;pipe&#39;, &#39;pivot&#39;, &#39;pivot_table&#39;, &#39;plot&#39;, &#39;pop&#39;, &#39;pow&#39;, &#39;prod&#39;, &#39;product&#39;, &#39;quantile&#39;, &#39;query&#39;, &#39;radd&#39;, &#39;rank&#39;, &#39;rdiv&#39;, &#39;reindex&#39;, &#39;reindex_like&#39;, &#39;rename&#39;, &#39;rename_axis&#39;, &#39;reorder_levels&#39;, &#39;replace&#39;, &#39;resample&#39;, &#39;reset_index&#39;, &#39;rfloordiv&#39;, &#39;rmod&#39;, &#39;rmul&#39;, &#39;rolling&#39;, &#39;round&#39;, &#39;rpow&#39;, &#39;rsub&#39;, &#39;rtruediv&#39;, &#39;sample&#39;, &#39;select_dtypes&#39;, &#39;sem&#39;, &#39;set_axis&#39;, &#39;set_flags&#39;, &#39;set_index&#39;, &#39;shape&#39;, &#39;shift&#39;, &#39;size&#39;, &#39;skew&#39;, &#39;slice_shift&#39;, &#39;sort_index&#39;, &#39;sort_values&#39;, &#39;sparse&#39;, &#39;squeeze&#39;, &#39;stack&#39;, &#39;std&#39;, &#39;style&#39;, &#39;sub&#39;, &#39;subtract&#39;, &#39;sum&#39;, &#39;swapaxes&#39;, &#39;swaplevel&#39;, &#39;tail&#39;, &#39;take&#39;, &#39;to_clipboard&#39;, &#39;to_csv&#39;, &#39;to_dict&#39;, &#39;to_excel&#39;, &#39;to_feather&#39;, &#39;to_gbq&#39;, &#39;to_hdf&#39;, &#39;to_html&#39;, &#39;to_json&#39;, &#39;to_latex&#39;, &#39;to_markdown&#39;, &#39;to_numpy&#39;, &#39;to_parquet&#39;, &#39;to_period&#39;, &#39;to_pickle&#39;, &#39;to_records&#39;, &#39;to_sql&#39;, &#39;to_stata&#39;, &#39;to_string&#39;, &#39;to_timestamp&#39;, &#39;to_xarray&#39;, &#39;to_xml&#39;, &#39;transform&#39;, &#39;transpose&#39;, &#39;truediv&#39;, &#39;truncate&#39;, &#39;tshift&#39;, &#39;tz_convert&#39;, &#39;tz_localize&#39;, &#39;unstack&#39;, &#39;update&#39;, &#39;value_counts&#39;, &#39;values&#39;, &#39;var&#39;, &#39;where&#39;, &#39;xs&#39;], &#39;_i31&#39;: &#39;globals()&#39;} . locals() . {&#39;__name__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: &#39;Automatically created module for IPython interactive environment&#39;, &#39;__package__&#39;: None, &#39;__loader__&#39;: None, &#39;__spec__&#39;: None, &#39;__builtin__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;, &#39;__builtins__&#39;: &lt;module &#39;builtins&#39; (built-in)&gt;, &#39;_ih&#39;: [&#39;&#39;, &#34;import numpy as np nimport pandas as pd nimport matplotlib.pyplot as plt nimport seaborn as sns nget_ipython().run_line_magic(&#39;matplotlib&#39;, &#39;inline&#39;) n ntitanic_df = pd.read_csv(&#39;./train.csv&#39;) ntitanic_df.head(3)&#34;, &#34;print(&#39;### train 데이터 정보 ### n&#39;) nprint(titanic_df.info())&#34;, &#39;titanic_df.describe()&#39;, &#34;titanic_df[&#39;Age&#39;].fillna(titanic_df[&#39;Age&#39;].mean(), inplace=True) ntitanic_df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) ntitanic_df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) n nprint(&#39;컬럼별 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum()) nprint(&#39; n총 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum().sum())&#34;, &#34;# object 컬럼타입 추출 n# 조건 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;], &#39; n&#39;) n# 조건의 인덱스 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index, &#39; n&#39;) n# 조건 인덱스 후 리스트변환 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index.to_list(), &#39; n&#39;)&#34;, &#34;print(&#39;Sex 값 분포 : n&#39;, titanic_df[&#39;Sex&#39;].value_counts()) nprint(&#39; n Cabin 값 분포 : n&#39;, titanic_df[&#39;Cabin&#39;].value_counts()) nprint(&#39; n Embarked 값 분포 : n&#39;, titanic_df[&#39;Embarked&#39;].value_counts())&#34;, &#34;titanic_df[&#39;Cabin&#39;].str[:1]&#34;, &#34;titanic_df[&#39;Cabin&#39;] = titanic_df[&#39;Cabin&#39;].str[:1] nprint(titanic_df[&#39;Cabin&#39;].head(3))&#34;, &#34;titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;])&#34;, &#34;titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;])[&#39;Survived&#39;].count()&#34;, &#34;titanic_df[&#39;Survived&#39;].value_counts()&#34;, &#34;sns.barplot(x=&#39;Sex&#39;, y=&#39;Survived&#39;, data=titanic_df)&#34;, &#34;sns.barplot(x=&#39;Pclass&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df)&#34;, &#34;# 입력 age에 따라 구분값을 반환하는 함수 설정, DataFrame의 apply lambda 식에 사용 ndef get_category(age): n cat=&#39;&#39; n if age &lt;= -1: cat = &#39;Unknown&#39; n elif age &lt;= 5: cat = &#39;Baby&#39; n elif age &lt;= 12: cat = &#39;Child&#39; n elif age &lt;= 18: cat = &#39;Teenage&#39; n elif age &lt;= 25: cat = &#39;Student&#39; n elif age &lt;= 35: cat = &#39;Young Adult&#39; n elif age &lt;= 60: cat = &#39;Adult&#39; n else: cat = &#39;Elderly&#39; n n return cat n n# 막대 그래프의 크기 figure를 더 크게 설정 nplt.figure(figsize=(10, 6)) n n# x 축의 값을 순차적으로 표시하기 위한 설정 ngroup_names = [&#39;Unknown&#39;, &#39;Baby&#39;, &#39;Child&#39;, &#39;Teenager&#39;, &#39;Student&#39;, &#39;Young Adult&#39;, &#39;Adult&#39;, &#39;Elderly&#39;] n n# lambda 식에 위에서 생성한 get_category() 함수를 반환값으로 지정 n# get_category(x)는 입력값으로 &#39;Age&#39; 컬럼값을 받아서 해당하는 cat 반환 ntitanic_df[&#39;Age_cat&#39;] = titanic_df[&#39;Age&#39;].apply(lambda x: get_category(x)) n nsns.barplot(x=&#39;Age_cat&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df, order=group_names) ntitanic_df.drop(&#39;Age_cat&#39;, axis=1, inplace=True) &#34;, &#34;from sklearn.preprocessing import LabelEncoder n ndef encode_features(dataDF): n features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] n le = LabelEncoder() n for feature in features: n le.fit(dataDF[feature]) n dataDF[feature] = le.transform(dataDF[feature]) n n return dataDF n ntitanic_df = encode_features(titanic_df) # encode_features 함수에서 변환된 3개 컬럼값이 원본 titanic_df에 덮어써짐 ntitanic_df.head(3) &#34;, &#34;from sklearn.preprocessing import LabelEncoder n n# null 처리함수 ndef fillna(df): n df[&#39;Age&#39;].fillna(df[&#39;Age&#39;].mean(), inplace=True) n df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) n df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) n n return df n n# 머신러닝 알고리즘에 불필요한 피처제거 ndef drop_features(df): n df.drop([&#39;PassengerId&#39;, &#39;Name&#39;, &#39;Ticket&#39;], axis=1, inplace=True) n return df n n# 레이블 인코딩 수행 ndef format_features(df): n df[&#39;Cabin&#39;] = df[&#39;Cabin&#39;].str[:1] n features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] n for feature in features: n le = LabelEncoder() n le = le.fit(df[feature]) n df[feature] = le.transform(df[feature]) n return df n n# 앞에서 설정한 Data Preprocessing 함수 호출 ndef transform_features(df): n df = fillna(df) n df = drop_features(df) n df = format_features(df) n return df&#34;, &#39;titanic_df.head()&#39;, &#34;# 원본 데이터를 재로딩하고, feature 데이터 셋과 Label 데이터 셋 추출 ntitanic_df = pd.read_csv(&#39;./train.csv&#39;) ny_titanic_df = titanic_df[&#39;Survived&#39;] nX_titanic_df = titanic_df.drop(&#39;Survived&#39;, axis=1, inplace=False) n nX_titanic_df = transform_features(X_titanic_df)&#34;, &#39;X_titanic_df.head(3)&#39;, &#39;from sklearn.model_selection import train_test_split nX_train, X_test, y_train, y_test = train_test_split(X_titanic_df, y_titanic_df, n test_size=0.2, random_state=11) nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)&#39;, &#34;from sklearn.tree import DecisionTreeClassifier nfrom sklearn.ensemble import RandomForestClassifier nfrom sklearn.linear_model import LogisticRegression nfrom sklearn.metrics import accuracy_score n n# 결정트리, Random Forest, 로지스틱 회귀를 위한 사이킷런 Classifier 클래스 생성 ndt_clf = DecisionTreeClassifier(random_state=11) nrf_clf = RandomForestClassifier(random_state=11) nlr_clf = LogisticRegression(solver=&#39;liblinear&#39;) n n# DecisionTreeClassifier 학습/예측/평가 ndt_clf.fit(X_train, y_train) ndt_pred = dt_clf.predict(X_test) nprint(&#39;DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, dt_pred))) n n# RandomFroestClassifier 학습/예측/평가 nrf_clf.fit(X_train, y_train) nrf_pred = rf_clf.predict(X_test) nprint(&#39;RandomForestClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, rf_pred))) n n# LogisticRegression 학습/예측/평가 nlr_clf.fit(X_train, y_train) nlr_pred = lr_clf.predict(X_test) nprint(&#39;LogisticRegression 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, lr_pred)))&#34;, &#39;y_test_ndarray = np.array(y_test) nprint(y_test_ndarray)&#39;, &#39;dt_pred&#39;, &#39;help(accuracy_score)&#39;, &#39;X_titanic_df.values[[0, 1, 2, 3, 4, 5]]&#39;, &#34;from sklearn.model_selection import KFold n ndef exec_kfold(clf, folds=5): n # 폴드 세트를 5개인 KFold객체를 생성, 폴드 수만큼 예측결과 저장을 위한 리스트 객체 생성 n kfold = KFold(n_splits=folds) n scores = [] n # KFold 교차 검증수행 n for iter_count, (train_index, test_index) in enumerate(kfold.split(X_titanic_df)): n # X_titanic_df 데이터에서 교차 검증별로 학습과 검증 데이터를 가리키는 index 생성 n X_train, X_test = X_titanic_df.values[train_index], X_titanic_df.values[test_index] n y_train, y_test = y_titanic_df.values[train_index], y_titanic_df.values[test_index] n n # Classifier 학습, 예측, 정확도 계산 n clf.fit(X_train, y_train) n predictions = clf.predict(X_test) n accuracy = accuracy_score(y_test, predictions) n scores.append(accuracy) n print(&#39;교차 검증 {0} 정확도: {1:4f}&#39;.format(iter_count, accuracy)) n n # 5개 fold에서 평균 정확도 계산 n mean_score = np.mean(scores) n print(&#39;평균 정확도: {0: 4f}&#39;.format(mean_score)) n n# exec_fold 호출 nexec_kfold(dt_clf, folds=5)&#34;, &#34;from sklearn.model_selection import GridSearchCV n nparameters = {&#39;max_depth&#39;:[2,3,5,10], n &#39;min_samples_split&#39;:[2,3,5], &#39;min_samples_leaf&#39;:[1,5,8]} n ngrid_dclf = GridSearchCV(dt_clf, param_grid=parameters, scoring=&#39;accuracy&#39;, cv=5) ngrid_dclf.fit(X_train, y_train) n nprint(&#39;GridSearchCV 최적 하이퍼 파라미터: &#39;, grid_dclf.best_params_) nprint(&#39;GridSearchCV 최고 정확도: {0: .4f}&#39;.format(grid_dclf.best_score_)) nbest_dclf = grid_dclf.best_estimator_ n n# GridSearchCV의 최적 하이퍼 파라미터로 학습된 Estimator로 예측 및 평가 수행 ndprediction = best_dclf.predict(X_test) naccuracy = accuracy_score(y_test, dprediction) nprint(&#39;테스트 세트에서의 DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy))&#34;, &#39;help(GridSearchCV)&#39;, &#39;import pandas as pd n na = [1,2,3,4,5] na_df = pd.DataFrame(a) na_df.plot()&#39;, &#39;dir(pd.DataFrame)&#39;, &#39;globals()&#39;, &#39;locals()&#39;], &#39;_oh&#39;: {1: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 Name Sex Age SibSp 0 Braund, Mr. Owen Harris male 22.0 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 2 Heikkinen, Miss. Laina female 26.0 0 Parch Ticket Fare Cabin Embarked 0 0 A/5 21171 7.2500 N S 1 0 PC 17599 71.2833 C85 C 2 0 STON/O2. 3101282 7.9250 N S , 3: PassengerId Survived Pclass Age SibSp count 891.000000 891.000000 891.000000 714.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 std 257.353842 0.486592 0.836071 14.526497 1.102743 min 1.000000 0.000000 1.000000 0.420000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 50% 446.000000 0.000000 3.000000 28.000000 0.000000 75% 668.500000 1.000000 3.000000 38.000000 1.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 Parch Fare count 891.000000 891.000000 mean 0.381594 32.204208 std 0.806057 49.693429 min 0.000000 0.000000 25% 0.000000 7.910400 50% 0.000000 14.454200 75% 0.000000 31.000000 max 6.000000 512.329200 , 7: 0 N 1 C 2 N 3 C 4 N .. 886 N 887 B 888 N 889 C 890 N Name: Cabin, Length: 891, dtype: object, 9: &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002725F96AB80&gt;, 10: Sex Survived female 0 81 1 233 male 0 468 1 109 Name: Survived, dtype: int64, 11: 0 549 1 342 Name: Survived, dtype: int64, 12: &lt;AxesSubplot:xlabel=&#39;Sex&#39;, ylabel=&#39;Survived&#39;&gt;, 13: &lt;AxesSubplot:xlabel=&#39;Pclass&#39;, ylabel=&#39;Survived&#39;&gt;, 15: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 Name Sex Age SibSp Parch 0 Braund, Mr. Owen Harris 1 22.0 1 0 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 0 38.0 1 0 2 Heikkinen, Miss. Laina 0 26.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7.2500 7 3 1 PC 17599 71.2833 2 0 2 STON/O2. 3101282 7.9250 7 3 , 17: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 3 4 1 1 4 5 0 3 Name Sex Age SibSp Parch 0 Braund, Mr. Owen Harris 1 22.0 1 0 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 0 38.0 1 0 2 Heikkinen, Miss. Laina 0 26.0 0 0 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) 0 35.0 1 0 4 Allen, Mr. William Henry 1 35.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7.2500 7 3 1 PC 17599 71.2833 2 0 2 STON/O2. 3101282 7.9250 7 3 3 113803 53.1000 2 3 4 373450 8.0500 7 3 , 19: Pclass Sex Age SibSp Parch Fare Cabin Embarked 0 3 1 22.0 1 0 7.2500 7 3 1 1 0 38.0 1 0 71.2833 2 0 2 3 0 26.0 0 0 7.9250 7 3, 23: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=int64), 25: array([[ 3. , 1. , 22. , 1. , 0. , 7.25 , 7. , 3. ], [ 1. , 0. , 38. , 1. , 0. , 71.2833 , 2. , 0. ], [ 3. , 0. , 26. , 0. , 0. , 7.925 , 7. , 3. ], [ 1. , 0. , 35. , 1. , 0. , 53.1 , 2. , 3. ], [ 3. , 1. , 35. , 0. , 0. , 8.05 , 7. , 3. ], [ 3. , 1. , 29.69911765, 0. , 0. , 8.4583 , 7. , 2. ]]), 29: &lt;AxesSubplot:&gt;, 30: [&#39;T&#39;, &#39;_AXIS_LEN&#39;, &#39;_AXIS_NAMES&#39;, &#39;_AXIS_NUMBERS&#39;, &#39;_AXIS_ORDERS&#39;, &#39;_AXIS_TO_AXIS_NUMBER&#39;, &#39;_HANDLED_TYPES&#39;, &#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__annotations__&#39;, &#39;__array__&#39;, &#39;__array_priority__&#39;, &#39;__array_ufunc__&#39;, &#39;__array_wrap__&#39;, &#39;__bool__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__finalize__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattr__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getstate__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__iand__&#39;, &#39;__ifloordiv__&#39;, &#39;__imod__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__invert__&#39;, &#39;__ior__&#39;, &#39;__ipow__&#39;, &#39;__isub__&#39;, &#39;__iter__&#39;, &#39;__itruediv__&#39;, &#39;__ixor__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__matmul__&#39;, &#39;__mod__&#39;, &#39;__module__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__nonzero__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;, &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rfloordiv__&#39;, &#39;__rmatmul__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;, &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rsub__&#39;, &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__setstate__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__weakref__&#39;, &#39;__xor__&#39;, &#39;_accessors&#39;, &#39;_accum_func&#39;, &#39;_add_numeric_operations&#39;, &#39;_agg_by_level&#39;, &#39;_agg_examples_doc&#39;, &#39;_agg_summary_and_see_also_doc&#39;, &#39;_align_frame&#39;, &#39;_align_series&#39;, &#39;_append&#39;, &#39;_arith_method&#39;, &#39;_as_manager&#39;, &#39;_box_col_values&#39;, &#39;_can_fast_transpose&#39;, &#39;_check_inplace_and_allows_duplicate_labels&#39;, &#39;_check_inplace_setting&#39;, &#39;_check_is_chained_assignment_possible&#39;, &#39;_check_label_or_level_ambiguity&#39;, &#39;_check_setitem_copy&#39;, &#39;_clear_item_cache&#39;, &#39;_clip_with_one_bound&#39;, &#39;_clip_with_scalar&#39;, &#39;_cmp_method&#39;, &#39;_combine_frame&#39;, &#39;_consolidate&#39;, &#39;_consolidate_inplace&#39;, &#39;_construct_axes_dict&#39;, &#39;_construct_axes_from_arguments&#39;, &#39;_construct_result&#39;, &#39;_constructor&#39;, &#39;_constructor_sliced&#39;, &#39;_convert&#39;, &#39;_count_level&#39;, &#39;_data&#39;, &#39;_dir_additions&#39;, &#39;_dir_deletions&#39;, &#39;_dispatch_frame_op&#39;, &#39;_drop_axis&#39;, &#39;_drop_labels_or_levels&#39;, &#39;_ensure_valid_index&#39;, &#39;_find_valid_index&#39;, &#39;_from_arrays&#39;, &#39;_from_mgr&#39;, &#39;_get_agg_axis&#39;, &#39;_get_axis&#39;, &#39;_get_axis_name&#39;, &#39;_get_axis_number&#39;, &#39;_get_axis_resolvers&#39;, &#39;_get_block_manager_axis&#39;, &#39;_get_bool_data&#39;, &#39;_get_cleaned_column_resolvers&#39;, &#39;_get_column_array&#39;, &#39;_get_index_resolvers&#39;, &#39;_get_item_cache&#39;, &#39;_get_label_or_level_values&#39;, &#39;_get_numeric_data&#39;, &#39;_get_value&#39;, &#39;_getitem_bool_array&#39;, &#39;_getitem_multilevel&#39;, &#39;_gotitem&#39;, &#39;_hidden_attrs&#39;, &#39;_indexed_same&#39;, &#39;_info_axis&#39;, &#39;_info_axis_name&#39;, &#39;_info_axis_number&#39;, &#39;_info_repr&#39;, &#39;_init_mgr&#39;, &#39;_inplace_method&#39;, &#39;_internal_names&#39;, &#39;_internal_names_set&#39;, &#39;_is_copy&#39;, &#39;_is_homogeneous_type&#39;, &#39;_is_label_or_level_reference&#39;, &#39;_is_label_reference&#39;, &#39;_is_level_reference&#39;, &#39;_is_mixed_type&#39;, &#39;_is_view&#39;, &#39;_iset_item&#39;, &#39;_iset_item_mgr&#39;, &#39;_iset_not_inplace&#39;, &#39;_iter_column_arrays&#39;, &#39;_ixs&#39;, &#39;_join_compat&#39;, &#39;_logical_func&#39;, &#39;_logical_method&#39;, &#39;_maybe_cache_changed&#39;, &#39;_maybe_update_cacher&#39;, &#39;_metadata&#39;, &#39;_min_count_stat_function&#39;, &#39;_needs_reindex_multi&#39;, &#39;_protect_consolidate&#39;, &#39;_reduce&#39;, &#39;_reduce_axis1&#39;, &#39;_reindex_axes&#39;, &#39;_reindex_columns&#39;, &#39;_reindex_index&#39;, &#39;_reindex_multi&#39;, &#39;_reindex_with_indexers&#39;, &#39;_rename&#39;, &#39;_replace_columnwise&#39;, &#39;_repr_data_resource_&#39;, &#39;_repr_fits_horizontal_&#39;, &#39;_repr_fits_vertical_&#39;, &#39;_repr_html_&#39;, &#39;_repr_latex_&#39;, &#39;_reset_cache&#39;, &#39;_reset_cacher&#39;, &#39;_sanitize_column&#39;, &#39;_series&#39;, &#39;_set_axis&#39;, &#39;_set_axis_name&#39;, &#39;_set_axis_nocheck&#39;, &#39;_set_is_copy&#39;, &#39;_set_item&#39;, &#39;_set_item_frame_value&#39;, &#39;_set_item_mgr&#39;, &#39;_set_value&#39;, &#39;_setitem_array&#39;, &#39;_setitem_frame&#39;, &#39;_setitem_slice&#39;, &#39;_slice&#39;, &#39;_stat_axis&#39;, &#39;_stat_axis_name&#39;, &#39;_stat_axis_number&#39;, &#39;_stat_function&#39;, &#39;_stat_function_ddof&#39;, &#39;_take_with_is_copy&#39;, &#39;_to_dict_of_blocks&#39;, &#39;_typ&#39;, &#39;_update_inplace&#39;, &#39;_validate_dtype&#39;, &#39;_values&#39;, &#39;_where&#39;, &#39;abs&#39;, &#39;add&#39;, &#39;add_prefix&#39;, &#39;add_suffix&#39;, &#39;agg&#39;, &#39;aggregate&#39;, &#39;align&#39;, &#39;all&#39;, &#39;any&#39;, &#39;append&#39;, &#39;apply&#39;, &#39;applymap&#39;, &#39;asfreq&#39;, &#39;asof&#39;, &#39;assign&#39;, &#39;astype&#39;, &#39;at&#39;, &#39;at_time&#39;, &#39;attrs&#39;, &#39;axes&#39;, &#39;backfill&#39;, &#39;between_time&#39;, &#39;bfill&#39;, &#39;bool&#39;, &#39;boxplot&#39;, &#39;clip&#39;, &#39;columns&#39;, &#39;combine&#39;, &#39;combine_first&#39;, &#39;compare&#39;, &#39;convert_dtypes&#39;, &#39;copy&#39;, &#39;corr&#39;, &#39;corrwith&#39;, &#39;count&#39;, &#39;cov&#39;, &#39;cummax&#39;, &#39;cummin&#39;, &#39;cumprod&#39;, &#39;cumsum&#39;, &#39;describe&#39;, &#39;diff&#39;, &#39;div&#39;, &#39;divide&#39;, &#39;dot&#39;, &#39;drop&#39;, &#39;drop_duplicates&#39;, &#39;droplevel&#39;, &#39;dropna&#39;, &#39;dtypes&#39;, &#39;duplicated&#39;, &#39;empty&#39;, &#39;eq&#39;, &#39;equals&#39;, &#39;eval&#39;, &#39;ewm&#39;, &#39;expanding&#39;, &#39;explode&#39;, &#39;ffill&#39;, &#39;fillna&#39;, &#39;filter&#39;, &#39;first&#39;, &#39;first_valid_index&#39;, &#39;flags&#39;, &#39;floordiv&#39;, &#39;from_dict&#39;, &#39;from_records&#39;, &#39;ge&#39;, &#39;get&#39;, &#39;groupby&#39;, &#39;gt&#39;, &#39;head&#39;, &#39;hist&#39;, &#39;iat&#39;, &#39;idxmax&#39;, &#39;idxmin&#39;, &#39;iloc&#39;, &#39;index&#39;, &#39;infer_objects&#39;, &#39;info&#39;, &#39;insert&#39;, &#39;interpolate&#39;, &#39;isin&#39;, &#39;isna&#39;, &#39;isnull&#39;, &#39;items&#39;, &#39;iteritems&#39;, &#39;iterrows&#39;, &#39;itertuples&#39;, &#39;join&#39;, &#39;keys&#39;, &#39;kurt&#39;, &#39;kurtosis&#39;, &#39;last&#39;, &#39;last_valid_index&#39;, &#39;le&#39;, &#39;loc&#39;, &#39;lookup&#39;, &#39;lt&#39;, &#39;mad&#39;, &#39;mask&#39;, &#39;max&#39;, &#39;mean&#39;, &#39;median&#39;, &#39;melt&#39;, &#39;memory_usage&#39;, &#39;merge&#39;, &#39;min&#39;, &#39;mod&#39;, &#39;mode&#39;, &#39;mul&#39;, &#39;multiply&#39;, &#39;ndim&#39;, &#39;ne&#39;, &#39;nlargest&#39;, &#39;notna&#39;, &#39;notnull&#39;, &#39;nsmallest&#39;, &#39;nunique&#39;, &#39;pad&#39;, &#39;pct_change&#39;, &#39;pipe&#39;, &#39;pivot&#39;, &#39;pivot_table&#39;, &#39;plot&#39;, &#39;pop&#39;, &#39;pow&#39;, &#39;prod&#39;, &#39;product&#39;, &#39;quantile&#39;, &#39;query&#39;, &#39;radd&#39;, &#39;rank&#39;, &#39;rdiv&#39;, &#39;reindex&#39;, &#39;reindex_like&#39;, &#39;rename&#39;, &#39;rename_axis&#39;, &#39;reorder_levels&#39;, &#39;replace&#39;, &#39;resample&#39;, &#39;reset_index&#39;, &#39;rfloordiv&#39;, &#39;rmod&#39;, &#39;rmul&#39;, &#39;rolling&#39;, &#39;round&#39;, &#39;rpow&#39;, &#39;rsub&#39;, &#39;rtruediv&#39;, &#39;sample&#39;, &#39;select_dtypes&#39;, &#39;sem&#39;, &#39;set_axis&#39;, &#39;set_flags&#39;, &#39;set_index&#39;, &#39;shape&#39;, &#39;shift&#39;, &#39;size&#39;, &#39;skew&#39;, &#39;slice_shift&#39;, &#39;sort_index&#39;, &#39;sort_values&#39;, &#39;sparse&#39;, &#39;squeeze&#39;, &#39;stack&#39;, &#39;std&#39;, &#39;style&#39;, &#39;sub&#39;, &#39;subtract&#39;, &#39;sum&#39;, &#39;swapaxes&#39;, &#39;swaplevel&#39;, &#39;tail&#39;, &#39;take&#39;, &#39;to_clipboard&#39;, &#39;to_csv&#39;, &#39;to_dict&#39;, &#39;to_excel&#39;, &#39;to_feather&#39;, &#39;to_gbq&#39;, &#39;to_hdf&#39;, &#39;to_html&#39;, &#39;to_json&#39;, &#39;to_latex&#39;, &#39;to_markdown&#39;, &#39;to_numpy&#39;, &#39;to_parquet&#39;, &#39;to_period&#39;, &#39;to_pickle&#39;, &#39;to_records&#39;, &#39;to_sql&#39;, &#39;to_stata&#39;, &#39;to_string&#39;, &#39;to_timestamp&#39;, &#39;to_xarray&#39;, &#39;to_xml&#39;, &#39;transform&#39;, &#39;transpose&#39;, &#39;truediv&#39;, &#39;truncate&#39;, &#39;tshift&#39;, &#39;tz_convert&#39;, &#39;tz_localize&#39;, &#39;unstack&#39;, &#39;update&#39;, &#39;value_counts&#39;, &#39;values&#39;, &#39;var&#39;, &#39;where&#39;, &#39;xs&#39;], 31: {...}}, &#39;_dh&#39;: [WindowsPath(&#39;C:/Users/20190073/Documents/PerfectML/PerfectGuide-master/2장&#39;)], &#39;In&#39;: [&#39;&#39;, &#34;import numpy as np nimport pandas as pd nimport matplotlib.pyplot as plt nimport seaborn as sns nget_ipython().run_line_magic(&#39;matplotlib&#39;, &#39;inline&#39;) n ntitanic_df = pd.read_csv(&#39;./train.csv&#39;) ntitanic_df.head(3)&#34;, &#34;print(&#39;### train 데이터 정보 ### n&#39;) nprint(titanic_df.info())&#34;, &#39;titanic_df.describe()&#39;, &#34;titanic_df[&#39;Age&#39;].fillna(titanic_df[&#39;Age&#39;].mean(), inplace=True) ntitanic_df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) ntitanic_df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) n nprint(&#39;컬럼별 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum()) nprint(&#39; n총 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum().sum())&#34;, &#34;# object 컬럼타입 추출 n# 조건 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;], &#39; n&#39;) n# 조건의 인덱스 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index, &#39; n&#39;) n# 조건 인덱스 후 리스트변환 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index.to_list(), &#39; n&#39;)&#34;, &#34;print(&#39;Sex 값 분포 : n&#39;, titanic_df[&#39;Sex&#39;].value_counts()) nprint(&#39; n Cabin 값 분포 : n&#39;, titanic_df[&#39;Cabin&#39;].value_counts()) nprint(&#39; n Embarked 값 분포 : n&#39;, titanic_df[&#39;Embarked&#39;].value_counts())&#34;, &#34;titanic_df[&#39;Cabin&#39;].str[:1]&#34;, &#34;titanic_df[&#39;Cabin&#39;] = titanic_df[&#39;Cabin&#39;].str[:1] nprint(titanic_df[&#39;Cabin&#39;].head(3))&#34;, &#34;titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;])&#34;, &#34;titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;])[&#39;Survived&#39;].count()&#34;, &#34;titanic_df[&#39;Survived&#39;].value_counts()&#34;, &#34;sns.barplot(x=&#39;Sex&#39;, y=&#39;Survived&#39;, data=titanic_df)&#34;, &#34;sns.barplot(x=&#39;Pclass&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df)&#34;, &#34;# 입력 age에 따라 구분값을 반환하는 함수 설정, DataFrame의 apply lambda 식에 사용 ndef get_category(age): n cat=&#39;&#39; n if age &lt;= -1: cat = &#39;Unknown&#39; n elif age &lt;= 5: cat = &#39;Baby&#39; n elif age &lt;= 12: cat = &#39;Child&#39; n elif age &lt;= 18: cat = &#39;Teenage&#39; n elif age &lt;= 25: cat = &#39;Student&#39; n elif age &lt;= 35: cat = &#39;Young Adult&#39; n elif age &lt;= 60: cat = &#39;Adult&#39; n else: cat = &#39;Elderly&#39; n n return cat n n# 막대 그래프의 크기 figure를 더 크게 설정 nplt.figure(figsize=(10, 6)) n n# x 축의 값을 순차적으로 표시하기 위한 설정 ngroup_names = [&#39;Unknown&#39;, &#39;Baby&#39;, &#39;Child&#39;, &#39;Teenager&#39;, &#39;Student&#39;, &#39;Young Adult&#39;, &#39;Adult&#39;, &#39;Elderly&#39;] n n# lambda 식에 위에서 생성한 get_category() 함수를 반환값으로 지정 n# get_category(x)는 입력값으로 &#39;Age&#39; 컬럼값을 받아서 해당하는 cat 반환 ntitanic_df[&#39;Age_cat&#39;] = titanic_df[&#39;Age&#39;].apply(lambda x: get_category(x)) n nsns.barplot(x=&#39;Age_cat&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df, order=group_names) ntitanic_df.drop(&#39;Age_cat&#39;, axis=1, inplace=True) &#34;, &#34;from sklearn.preprocessing import LabelEncoder n ndef encode_features(dataDF): n features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] n le = LabelEncoder() n for feature in features: n le.fit(dataDF[feature]) n dataDF[feature] = le.transform(dataDF[feature]) n n return dataDF n ntitanic_df = encode_features(titanic_df) # encode_features 함수에서 변환된 3개 컬럼값이 원본 titanic_df에 덮어써짐 ntitanic_df.head(3) &#34;, &#34;from sklearn.preprocessing import LabelEncoder n n# null 처리함수 ndef fillna(df): n df[&#39;Age&#39;].fillna(df[&#39;Age&#39;].mean(), inplace=True) n df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) n df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) n n return df n n# 머신러닝 알고리즘에 불필요한 피처제거 ndef drop_features(df): n df.drop([&#39;PassengerId&#39;, &#39;Name&#39;, &#39;Ticket&#39;], axis=1, inplace=True) n return df n n# 레이블 인코딩 수행 ndef format_features(df): n df[&#39;Cabin&#39;] = df[&#39;Cabin&#39;].str[:1] n features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] n for feature in features: n le = LabelEncoder() n le = le.fit(df[feature]) n df[feature] = le.transform(df[feature]) n return df n n# 앞에서 설정한 Data Preprocessing 함수 호출 ndef transform_features(df): n df = fillna(df) n df = drop_features(df) n df = format_features(df) n return df&#34;, &#39;titanic_df.head()&#39;, &#34;# 원본 데이터를 재로딩하고, feature 데이터 셋과 Label 데이터 셋 추출 ntitanic_df = pd.read_csv(&#39;./train.csv&#39;) ny_titanic_df = titanic_df[&#39;Survived&#39;] nX_titanic_df = titanic_df.drop(&#39;Survived&#39;, axis=1, inplace=False) n nX_titanic_df = transform_features(X_titanic_df)&#34;, &#39;X_titanic_df.head(3)&#39;, &#39;from sklearn.model_selection import train_test_split nX_train, X_test, y_train, y_test = train_test_split(X_titanic_df, y_titanic_df, n test_size=0.2, random_state=11) nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)&#39;, &#34;from sklearn.tree import DecisionTreeClassifier nfrom sklearn.ensemble import RandomForestClassifier nfrom sklearn.linear_model import LogisticRegression nfrom sklearn.metrics import accuracy_score n n# 결정트리, Random Forest, 로지스틱 회귀를 위한 사이킷런 Classifier 클래스 생성 ndt_clf = DecisionTreeClassifier(random_state=11) nrf_clf = RandomForestClassifier(random_state=11) nlr_clf = LogisticRegression(solver=&#39;liblinear&#39;) n n# DecisionTreeClassifier 학습/예측/평가 ndt_clf.fit(X_train, y_train) ndt_pred = dt_clf.predict(X_test) nprint(&#39;DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, dt_pred))) n n# RandomFroestClassifier 학습/예측/평가 nrf_clf.fit(X_train, y_train) nrf_pred = rf_clf.predict(X_test) nprint(&#39;RandomForestClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, rf_pred))) n n# LogisticRegression 학습/예측/평가 nlr_clf.fit(X_train, y_train) nlr_pred = lr_clf.predict(X_test) nprint(&#39;LogisticRegression 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, lr_pred)))&#34;, &#39;y_test_ndarray = np.array(y_test) nprint(y_test_ndarray)&#39;, &#39;dt_pred&#39;, &#39;help(accuracy_score)&#39;, &#39;X_titanic_df.values[[0, 1, 2, 3, 4, 5]]&#39;, &#34;from sklearn.model_selection import KFold n ndef exec_kfold(clf, folds=5): n # 폴드 세트를 5개인 KFold객체를 생성, 폴드 수만큼 예측결과 저장을 위한 리스트 객체 생성 n kfold = KFold(n_splits=folds) n scores = [] n # KFold 교차 검증수행 n for iter_count, (train_index, test_index) in enumerate(kfold.split(X_titanic_df)): n # X_titanic_df 데이터에서 교차 검증별로 학습과 검증 데이터를 가리키는 index 생성 n X_train, X_test = X_titanic_df.values[train_index], X_titanic_df.values[test_index] n y_train, y_test = y_titanic_df.values[train_index], y_titanic_df.values[test_index] n n # Classifier 학습, 예측, 정확도 계산 n clf.fit(X_train, y_train) n predictions = clf.predict(X_test) n accuracy = accuracy_score(y_test, predictions) n scores.append(accuracy) n print(&#39;교차 검증 {0} 정확도: {1:4f}&#39;.format(iter_count, accuracy)) n n # 5개 fold에서 평균 정확도 계산 n mean_score = np.mean(scores) n print(&#39;평균 정확도: {0: 4f}&#39;.format(mean_score)) n n# exec_fold 호출 nexec_kfold(dt_clf, folds=5)&#34;, &#34;from sklearn.model_selection import GridSearchCV n nparameters = {&#39;max_depth&#39;:[2,3,5,10], n &#39;min_samples_split&#39;:[2,3,5], &#39;min_samples_leaf&#39;:[1,5,8]} n ngrid_dclf = GridSearchCV(dt_clf, param_grid=parameters, scoring=&#39;accuracy&#39;, cv=5) ngrid_dclf.fit(X_train, y_train) n nprint(&#39;GridSearchCV 최적 하이퍼 파라미터: &#39;, grid_dclf.best_params_) nprint(&#39;GridSearchCV 최고 정확도: {0: .4f}&#39;.format(grid_dclf.best_score_)) nbest_dclf = grid_dclf.best_estimator_ n n# GridSearchCV의 최적 하이퍼 파라미터로 학습된 Estimator로 예측 및 평가 수행 ndprediction = best_dclf.predict(X_test) naccuracy = accuracy_score(y_test, dprediction) nprint(&#39;테스트 세트에서의 DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy))&#34;, &#39;help(GridSearchCV)&#39;, &#39;import pandas as pd n na = [1,2,3,4,5] na_df = pd.DataFrame(a) na_df.plot()&#39;, &#39;dir(pd.DataFrame)&#39;, &#39;globals()&#39;, &#39;locals()&#39;], &#39;Out&#39;: {1: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 Name Sex Age SibSp 0 Braund, Mr. Owen Harris male 22.0 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 2 Heikkinen, Miss. Laina female 26.0 0 Parch Ticket Fare Cabin Embarked 0 0 A/5 21171 7.2500 N S 1 0 PC 17599 71.2833 C85 C 2 0 STON/O2. 3101282 7.9250 N S , 3: PassengerId Survived Pclass Age SibSp count 891.000000 891.000000 891.000000 714.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 std 257.353842 0.486592 0.836071 14.526497 1.102743 min 1.000000 0.000000 1.000000 0.420000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 50% 446.000000 0.000000 3.000000 28.000000 0.000000 75% 668.500000 1.000000 3.000000 38.000000 1.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 Parch Fare count 891.000000 891.000000 mean 0.381594 32.204208 std 0.806057 49.693429 min 0.000000 0.000000 25% 0.000000 7.910400 50% 0.000000 14.454200 75% 0.000000 31.000000 max 6.000000 512.329200 , 7: 0 N 1 C 2 N 3 C 4 N .. 886 N 887 B 888 N 889 C 890 N Name: Cabin, Length: 891, dtype: object, 9: &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002725F96AB80&gt;, 10: Sex Survived female 0 81 1 233 male 0 468 1 109 Name: Survived, dtype: int64, 11: 0 549 1 342 Name: Survived, dtype: int64, 12: &lt;AxesSubplot:xlabel=&#39;Sex&#39;, ylabel=&#39;Survived&#39;&gt;, 13: &lt;AxesSubplot:xlabel=&#39;Pclass&#39;, ylabel=&#39;Survived&#39;&gt;, 15: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 Name Sex Age SibSp Parch 0 Braund, Mr. Owen Harris 1 22.0 1 0 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 0 38.0 1 0 2 Heikkinen, Miss. Laina 0 26.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7.2500 7 3 1 PC 17599 71.2833 2 0 2 STON/O2. 3101282 7.9250 7 3 , 17: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 3 4 1 1 4 5 0 3 Name Sex Age SibSp Parch 0 Braund, Mr. Owen Harris 1 22.0 1 0 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 0 38.0 1 0 2 Heikkinen, Miss. Laina 0 26.0 0 0 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) 0 35.0 1 0 4 Allen, Mr. William Henry 1 35.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7.2500 7 3 1 PC 17599 71.2833 2 0 2 STON/O2. 3101282 7.9250 7 3 3 113803 53.1000 2 3 4 373450 8.0500 7 3 , 19: Pclass Sex Age SibSp Parch Fare Cabin Embarked 0 3 1 22.0 1 0 7.2500 7 3 1 1 0 38.0 1 0 71.2833 2 0 2 3 0 26.0 0 0 7.9250 7 3, 23: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=int64), 25: array([[ 3. , 1. , 22. , 1. , 0. , 7.25 , 7. , 3. ], [ 1. , 0. , 38. , 1. , 0. , 71.2833 , 2. , 0. ], [ 3. , 0. , 26. , 0. , 0. , 7.925 , 7. , 3. ], [ 1. , 0. , 35. , 1. , 0. , 53.1 , 2. , 3. ], [ 3. , 1. , 35. , 0. , 0. , 8.05 , 7. , 3. ], [ 3. , 1. , 29.69911765, 0. , 0. , 8.4583 , 7. , 2. ]]), 29: &lt;AxesSubplot:&gt;, 30: [&#39;T&#39;, &#39;_AXIS_LEN&#39;, &#39;_AXIS_NAMES&#39;, &#39;_AXIS_NUMBERS&#39;, &#39;_AXIS_ORDERS&#39;, &#39;_AXIS_TO_AXIS_NUMBER&#39;, &#39;_HANDLED_TYPES&#39;, &#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__annotations__&#39;, &#39;__array__&#39;, &#39;__array_priority__&#39;, &#39;__array_ufunc__&#39;, &#39;__array_wrap__&#39;, &#39;__bool__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__finalize__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattr__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getstate__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__iand__&#39;, &#39;__ifloordiv__&#39;, &#39;__imod__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__invert__&#39;, &#39;__ior__&#39;, &#39;__ipow__&#39;, &#39;__isub__&#39;, &#39;__iter__&#39;, &#39;__itruediv__&#39;, &#39;__ixor__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__matmul__&#39;, &#39;__mod__&#39;, &#39;__module__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__nonzero__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;, &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rfloordiv__&#39;, &#39;__rmatmul__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;, &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rsub__&#39;, &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__setstate__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__weakref__&#39;, &#39;__xor__&#39;, &#39;_accessors&#39;, &#39;_accum_func&#39;, &#39;_add_numeric_operations&#39;, &#39;_agg_by_level&#39;, &#39;_agg_examples_doc&#39;, &#39;_agg_summary_and_see_also_doc&#39;, &#39;_align_frame&#39;, &#39;_align_series&#39;, &#39;_append&#39;, &#39;_arith_method&#39;, &#39;_as_manager&#39;, &#39;_box_col_values&#39;, &#39;_can_fast_transpose&#39;, &#39;_check_inplace_and_allows_duplicate_labels&#39;, &#39;_check_inplace_setting&#39;, &#39;_check_is_chained_assignment_possible&#39;, &#39;_check_label_or_level_ambiguity&#39;, &#39;_check_setitem_copy&#39;, &#39;_clear_item_cache&#39;, &#39;_clip_with_one_bound&#39;, &#39;_clip_with_scalar&#39;, &#39;_cmp_method&#39;, &#39;_combine_frame&#39;, &#39;_consolidate&#39;, &#39;_consolidate_inplace&#39;, &#39;_construct_axes_dict&#39;, &#39;_construct_axes_from_arguments&#39;, &#39;_construct_result&#39;, &#39;_constructor&#39;, &#39;_constructor_sliced&#39;, &#39;_convert&#39;, &#39;_count_level&#39;, &#39;_data&#39;, &#39;_dir_additions&#39;, &#39;_dir_deletions&#39;, &#39;_dispatch_frame_op&#39;, &#39;_drop_axis&#39;, &#39;_drop_labels_or_levels&#39;, &#39;_ensure_valid_index&#39;, &#39;_find_valid_index&#39;, &#39;_from_arrays&#39;, &#39;_from_mgr&#39;, &#39;_get_agg_axis&#39;, &#39;_get_axis&#39;, &#39;_get_axis_name&#39;, &#39;_get_axis_number&#39;, &#39;_get_axis_resolvers&#39;, &#39;_get_block_manager_axis&#39;, &#39;_get_bool_data&#39;, &#39;_get_cleaned_column_resolvers&#39;, &#39;_get_column_array&#39;, &#39;_get_index_resolvers&#39;, &#39;_get_item_cache&#39;, &#39;_get_label_or_level_values&#39;, &#39;_get_numeric_data&#39;, &#39;_get_value&#39;, &#39;_getitem_bool_array&#39;, &#39;_getitem_multilevel&#39;, &#39;_gotitem&#39;, &#39;_hidden_attrs&#39;, &#39;_indexed_same&#39;, &#39;_info_axis&#39;, &#39;_info_axis_name&#39;, &#39;_info_axis_number&#39;, &#39;_info_repr&#39;, &#39;_init_mgr&#39;, &#39;_inplace_method&#39;, &#39;_internal_names&#39;, &#39;_internal_names_set&#39;, &#39;_is_copy&#39;, &#39;_is_homogeneous_type&#39;, &#39;_is_label_or_level_reference&#39;, &#39;_is_label_reference&#39;, &#39;_is_level_reference&#39;, &#39;_is_mixed_type&#39;, &#39;_is_view&#39;, &#39;_iset_item&#39;, &#39;_iset_item_mgr&#39;, &#39;_iset_not_inplace&#39;, &#39;_iter_column_arrays&#39;, &#39;_ixs&#39;, &#39;_join_compat&#39;, &#39;_logical_func&#39;, &#39;_logical_method&#39;, &#39;_maybe_cache_changed&#39;, &#39;_maybe_update_cacher&#39;, &#39;_metadata&#39;, &#39;_min_count_stat_function&#39;, &#39;_needs_reindex_multi&#39;, &#39;_protect_consolidate&#39;, &#39;_reduce&#39;, &#39;_reduce_axis1&#39;, &#39;_reindex_axes&#39;, &#39;_reindex_columns&#39;, &#39;_reindex_index&#39;, &#39;_reindex_multi&#39;, &#39;_reindex_with_indexers&#39;, &#39;_rename&#39;, &#39;_replace_columnwise&#39;, &#39;_repr_data_resource_&#39;, &#39;_repr_fits_horizontal_&#39;, &#39;_repr_fits_vertical_&#39;, &#39;_repr_html_&#39;, &#39;_repr_latex_&#39;, &#39;_reset_cache&#39;, &#39;_reset_cacher&#39;, &#39;_sanitize_column&#39;, &#39;_series&#39;, &#39;_set_axis&#39;, &#39;_set_axis_name&#39;, &#39;_set_axis_nocheck&#39;, &#39;_set_is_copy&#39;, &#39;_set_item&#39;, &#39;_set_item_frame_value&#39;, &#39;_set_item_mgr&#39;, &#39;_set_value&#39;, &#39;_setitem_array&#39;, &#39;_setitem_frame&#39;, &#39;_setitem_slice&#39;, &#39;_slice&#39;, &#39;_stat_axis&#39;, &#39;_stat_axis_name&#39;, &#39;_stat_axis_number&#39;, &#39;_stat_function&#39;, &#39;_stat_function_ddof&#39;, &#39;_take_with_is_copy&#39;, &#39;_to_dict_of_blocks&#39;, &#39;_typ&#39;, &#39;_update_inplace&#39;, &#39;_validate_dtype&#39;, &#39;_values&#39;, &#39;_where&#39;, &#39;abs&#39;, &#39;add&#39;, &#39;add_prefix&#39;, &#39;add_suffix&#39;, &#39;agg&#39;, &#39;aggregate&#39;, &#39;align&#39;, &#39;all&#39;, &#39;any&#39;, &#39;append&#39;, &#39;apply&#39;, &#39;applymap&#39;, &#39;asfreq&#39;, &#39;asof&#39;, &#39;assign&#39;, &#39;astype&#39;, &#39;at&#39;, &#39;at_time&#39;, &#39;attrs&#39;, &#39;axes&#39;, &#39;backfill&#39;, &#39;between_time&#39;, &#39;bfill&#39;, &#39;bool&#39;, &#39;boxplot&#39;, &#39;clip&#39;, &#39;columns&#39;, &#39;combine&#39;, &#39;combine_first&#39;, &#39;compare&#39;, &#39;convert_dtypes&#39;, &#39;copy&#39;, &#39;corr&#39;, &#39;corrwith&#39;, &#39;count&#39;, &#39;cov&#39;, &#39;cummax&#39;, &#39;cummin&#39;, &#39;cumprod&#39;, &#39;cumsum&#39;, &#39;describe&#39;, &#39;diff&#39;, &#39;div&#39;, &#39;divide&#39;, &#39;dot&#39;, &#39;drop&#39;, &#39;drop_duplicates&#39;, &#39;droplevel&#39;, &#39;dropna&#39;, &#39;dtypes&#39;, &#39;duplicated&#39;, &#39;empty&#39;, &#39;eq&#39;, &#39;equals&#39;, &#39;eval&#39;, &#39;ewm&#39;, &#39;expanding&#39;, &#39;explode&#39;, &#39;ffill&#39;, &#39;fillna&#39;, &#39;filter&#39;, &#39;first&#39;, &#39;first_valid_index&#39;, &#39;flags&#39;, &#39;floordiv&#39;, &#39;from_dict&#39;, &#39;from_records&#39;, &#39;ge&#39;, &#39;get&#39;, &#39;groupby&#39;, &#39;gt&#39;, &#39;head&#39;, &#39;hist&#39;, &#39;iat&#39;, &#39;idxmax&#39;, &#39;idxmin&#39;, &#39;iloc&#39;, &#39;index&#39;, &#39;infer_objects&#39;, &#39;info&#39;, &#39;insert&#39;, &#39;interpolate&#39;, &#39;isin&#39;, &#39;isna&#39;, &#39;isnull&#39;, &#39;items&#39;, &#39;iteritems&#39;, &#39;iterrows&#39;, &#39;itertuples&#39;, &#39;join&#39;, &#39;keys&#39;, &#39;kurt&#39;, &#39;kurtosis&#39;, &#39;last&#39;, &#39;last_valid_index&#39;, &#39;le&#39;, &#39;loc&#39;, &#39;lookup&#39;, &#39;lt&#39;, &#39;mad&#39;, &#39;mask&#39;, &#39;max&#39;, &#39;mean&#39;, &#39;median&#39;, &#39;melt&#39;, &#39;memory_usage&#39;, &#39;merge&#39;, &#39;min&#39;, &#39;mod&#39;, &#39;mode&#39;, &#39;mul&#39;, &#39;multiply&#39;, &#39;ndim&#39;, &#39;ne&#39;, &#39;nlargest&#39;, &#39;notna&#39;, &#39;notnull&#39;, &#39;nsmallest&#39;, &#39;nunique&#39;, &#39;pad&#39;, &#39;pct_change&#39;, &#39;pipe&#39;, &#39;pivot&#39;, &#39;pivot_table&#39;, &#39;plot&#39;, &#39;pop&#39;, &#39;pow&#39;, &#39;prod&#39;, &#39;product&#39;, &#39;quantile&#39;, &#39;query&#39;, &#39;radd&#39;, &#39;rank&#39;, &#39;rdiv&#39;, &#39;reindex&#39;, &#39;reindex_like&#39;, &#39;rename&#39;, &#39;rename_axis&#39;, &#39;reorder_levels&#39;, &#39;replace&#39;, &#39;resample&#39;, &#39;reset_index&#39;, &#39;rfloordiv&#39;, &#39;rmod&#39;, &#39;rmul&#39;, &#39;rolling&#39;, &#39;round&#39;, &#39;rpow&#39;, &#39;rsub&#39;, &#39;rtruediv&#39;, &#39;sample&#39;, &#39;select_dtypes&#39;, &#39;sem&#39;, &#39;set_axis&#39;, &#39;set_flags&#39;, &#39;set_index&#39;, &#39;shape&#39;, &#39;shift&#39;, &#39;size&#39;, &#39;skew&#39;, &#39;slice_shift&#39;, &#39;sort_index&#39;, &#39;sort_values&#39;, &#39;sparse&#39;, &#39;squeeze&#39;, &#39;stack&#39;, &#39;std&#39;, &#39;style&#39;, &#39;sub&#39;, &#39;subtract&#39;, &#39;sum&#39;, &#39;swapaxes&#39;, &#39;swaplevel&#39;, &#39;tail&#39;, &#39;take&#39;, &#39;to_clipboard&#39;, &#39;to_csv&#39;, &#39;to_dict&#39;, &#39;to_excel&#39;, &#39;to_feather&#39;, &#39;to_gbq&#39;, &#39;to_hdf&#39;, &#39;to_html&#39;, &#39;to_json&#39;, &#39;to_latex&#39;, &#39;to_markdown&#39;, &#39;to_numpy&#39;, &#39;to_parquet&#39;, &#39;to_period&#39;, &#39;to_pickle&#39;, &#39;to_records&#39;, &#39;to_sql&#39;, &#39;to_stata&#39;, &#39;to_string&#39;, &#39;to_timestamp&#39;, &#39;to_xarray&#39;, &#39;to_xml&#39;, &#39;transform&#39;, &#39;transpose&#39;, &#39;truediv&#39;, &#39;truncate&#39;, &#39;tshift&#39;, &#39;tz_convert&#39;, &#39;tz_localize&#39;, &#39;unstack&#39;, &#39;update&#39;, &#39;value_counts&#39;, &#39;values&#39;, &#39;var&#39;, &#39;where&#39;, &#39;xs&#39;], 31: {...}}, &#39;get_ipython&#39;: &lt;bound method InteractiveShell.get_ipython of &lt;ipykernel.zmqshell.ZMQInteractiveShell object at 0x000002725A7D2D30&gt;&gt;, &#39;exit&#39;: &lt;IPython.core.autocall.ZMQExitAutocall at 0x2725a78eee0&gt;, &#39;quit&#39;: &lt;IPython.core.autocall.ZMQExitAutocall at 0x2725a78eee0&gt;, &#39;_&#39;: {...}, &#39;__&#39;: [&#39;T&#39;, &#39;_AXIS_LEN&#39;, &#39;_AXIS_NAMES&#39;, &#39;_AXIS_NUMBERS&#39;, &#39;_AXIS_ORDERS&#39;, &#39;_AXIS_TO_AXIS_NUMBER&#39;, &#39;_HANDLED_TYPES&#39;, &#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__annotations__&#39;, &#39;__array__&#39;, &#39;__array_priority__&#39;, &#39;__array_ufunc__&#39;, &#39;__array_wrap__&#39;, &#39;__bool__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__finalize__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattr__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getstate__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__iand__&#39;, &#39;__ifloordiv__&#39;, &#39;__imod__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__invert__&#39;, &#39;__ior__&#39;, &#39;__ipow__&#39;, &#39;__isub__&#39;, &#39;__iter__&#39;, &#39;__itruediv__&#39;, &#39;__ixor__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__matmul__&#39;, &#39;__mod__&#39;, &#39;__module__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__nonzero__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;, &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rfloordiv__&#39;, &#39;__rmatmul__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;, &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rsub__&#39;, &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__setstate__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__weakref__&#39;, &#39;__xor__&#39;, &#39;_accessors&#39;, &#39;_accum_func&#39;, &#39;_add_numeric_operations&#39;, &#39;_agg_by_level&#39;, &#39;_agg_examples_doc&#39;, &#39;_agg_summary_and_see_also_doc&#39;, &#39;_align_frame&#39;, &#39;_align_series&#39;, &#39;_append&#39;, &#39;_arith_method&#39;, &#39;_as_manager&#39;, &#39;_box_col_values&#39;, &#39;_can_fast_transpose&#39;, &#39;_check_inplace_and_allows_duplicate_labels&#39;, &#39;_check_inplace_setting&#39;, &#39;_check_is_chained_assignment_possible&#39;, &#39;_check_label_or_level_ambiguity&#39;, &#39;_check_setitem_copy&#39;, &#39;_clear_item_cache&#39;, &#39;_clip_with_one_bound&#39;, &#39;_clip_with_scalar&#39;, &#39;_cmp_method&#39;, &#39;_combine_frame&#39;, &#39;_consolidate&#39;, &#39;_consolidate_inplace&#39;, &#39;_construct_axes_dict&#39;, &#39;_construct_axes_from_arguments&#39;, &#39;_construct_result&#39;, &#39;_constructor&#39;, &#39;_constructor_sliced&#39;, &#39;_convert&#39;, &#39;_count_level&#39;, &#39;_data&#39;, &#39;_dir_additions&#39;, &#39;_dir_deletions&#39;, &#39;_dispatch_frame_op&#39;, &#39;_drop_axis&#39;, &#39;_drop_labels_or_levels&#39;, &#39;_ensure_valid_index&#39;, &#39;_find_valid_index&#39;, &#39;_from_arrays&#39;, &#39;_from_mgr&#39;, &#39;_get_agg_axis&#39;, &#39;_get_axis&#39;, &#39;_get_axis_name&#39;, &#39;_get_axis_number&#39;, &#39;_get_axis_resolvers&#39;, &#39;_get_block_manager_axis&#39;, &#39;_get_bool_data&#39;, &#39;_get_cleaned_column_resolvers&#39;, &#39;_get_column_array&#39;, &#39;_get_index_resolvers&#39;, &#39;_get_item_cache&#39;, &#39;_get_label_or_level_values&#39;, &#39;_get_numeric_data&#39;, &#39;_get_value&#39;, &#39;_getitem_bool_array&#39;, &#39;_getitem_multilevel&#39;, &#39;_gotitem&#39;, &#39;_hidden_attrs&#39;, &#39;_indexed_same&#39;, &#39;_info_axis&#39;, &#39;_info_axis_name&#39;, &#39;_info_axis_number&#39;, &#39;_info_repr&#39;, &#39;_init_mgr&#39;, &#39;_inplace_method&#39;, &#39;_internal_names&#39;, &#39;_internal_names_set&#39;, &#39;_is_copy&#39;, &#39;_is_homogeneous_type&#39;, &#39;_is_label_or_level_reference&#39;, &#39;_is_label_reference&#39;, &#39;_is_level_reference&#39;, &#39;_is_mixed_type&#39;, &#39;_is_view&#39;, &#39;_iset_item&#39;, &#39;_iset_item_mgr&#39;, &#39;_iset_not_inplace&#39;, &#39;_iter_column_arrays&#39;, &#39;_ixs&#39;, &#39;_join_compat&#39;, &#39;_logical_func&#39;, &#39;_logical_method&#39;, &#39;_maybe_cache_changed&#39;, &#39;_maybe_update_cacher&#39;, &#39;_metadata&#39;, &#39;_min_count_stat_function&#39;, &#39;_needs_reindex_multi&#39;, &#39;_protect_consolidate&#39;, &#39;_reduce&#39;, &#39;_reduce_axis1&#39;, &#39;_reindex_axes&#39;, &#39;_reindex_columns&#39;, &#39;_reindex_index&#39;, &#39;_reindex_multi&#39;, &#39;_reindex_with_indexers&#39;, &#39;_rename&#39;, &#39;_replace_columnwise&#39;, &#39;_repr_data_resource_&#39;, &#39;_repr_fits_horizontal_&#39;, &#39;_repr_fits_vertical_&#39;, &#39;_repr_html_&#39;, &#39;_repr_latex_&#39;, &#39;_reset_cache&#39;, &#39;_reset_cacher&#39;, &#39;_sanitize_column&#39;, &#39;_series&#39;, &#39;_set_axis&#39;, &#39;_set_axis_name&#39;, &#39;_set_axis_nocheck&#39;, &#39;_set_is_copy&#39;, &#39;_set_item&#39;, &#39;_set_item_frame_value&#39;, &#39;_set_item_mgr&#39;, &#39;_set_value&#39;, &#39;_setitem_array&#39;, &#39;_setitem_frame&#39;, &#39;_setitem_slice&#39;, &#39;_slice&#39;, &#39;_stat_axis&#39;, &#39;_stat_axis_name&#39;, &#39;_stat_axis_number&#39;, &#39;_stat_function&#39;, &#39;_stat_function_ddof&#39;, &#39;_take_with_is_copy&#39;, &#39;_to_dict_of_blocks&#39;, &#39;_typ&#39;, &#39;_update_inplace&#39;, &#39;_validate_dtype&#39;, &#39;_values&#39;, &#39;_where&#39;, &#39;abs&#39;, &#39;add&#39;, &#39;add_prefix&#39;, &#39;add_suffix&#39;, &#39;agg&#39;, &#39;aggregate&#39;, &#39;align&#39;, &#39;all&#39;, &#39;any&#39;, &#39;append&#39;, &#39;apply&#39;, &#39;applymap&#39;, &#39;asfreq&#39;, &#39;asof&#39;, &#39;assign&#39;, &#39;astype&#39;, &#39;at&#39;, &#39;at_time&#39;, &#39;attrs&#39;, &#39;axes&#39;, &#39;backfill&#39;, &#39;between_time&#39;, &#39;bfill&#39;, &#39;bool&#39;, &#39;boxplot&#39;, &#39;clip&#39;, &#39;columns&#39;, &#39;combine&#39;, &#39;combine_first&#39;, &#39;compare&#39;, &#39;convert_dtypes&#39;, &#39;copy&#39;, &#39;corr&#39;, &#39;corrwith&#39;, &#39;count&#39;, &#39;cov&#39;, &#39;cummax&#39;, &#39;cummin&#39;, &#39;cumprod&#39;, &#39;cumsum&#39;, &#39;describe&#39;, &#39;diff&#39;, &#39;div&#39;, &#39;divide&#39;, &#39;dot&#39;, &#39;drop&#39;, &#39;drop_duplicates&#39;, &#39;droplevel&#39;, &#39;dropna&#39;, &#39;dtypes&#39;, &#39;duplicated&#39;, &#39;empty&#39;, &#39;eq&#39;, &#39;equals&#39;, &#39;eval&#39;, &#39;ewm&#39;, &#39;expanding&#39;, &#39;explode&#39;, &#39;ffill&#39;, &#39;fillna&#39;, &#39;filter&#39;, &#39;first&#39;, &#39;first_valid_index&#39;, &#39;flags&#39;, &#39;floordiv&#39;, &#39;from_dict&#39;, &#39;from_records&#39;, &#39;ge&#39;, &#39;get&#39;, &#39;groupby&#39;, &#39;gt&#39;, &#39;head&#39;, &#39;hist&#39;, &#39;iat&#39;, &#39;idxmax&#39;, &#39;idxmin&#39;, &#39;iloc&#39;, &#39;index&#39;, &#39;infer_objects&#39;, &#39;info&#39;, &#39;insert&#39;, &#39;interpolate&#39;, &#39;isin&#39;, &#39;isna&#39;, &#39;isnull&#39;, &#39;items&#39;, &#39;iteritems&#39;, &#39;iterrows&#39;, &#39;itertuples&#39;, &#39;join&#39;, &#39;keys&#39;, &#39;kurt&#39;, &#39;kurtosis&#39;, &#39;last&#39;, &#39;last_valid_index&#39;, &#39;le&#39;, &#39;loc&#39;, &#39;lookup&#39;, &#39;lt&#39;, &#39;mad&#39;, &#39;mask&#39;, &#39;max&#39;, &#39;mean&#39;, &#39;median&#39;, &#39;melt&#39;, &#39;memory_usage&#39;, &#39;merge&#39;, &#39;min&#39;, &#39;mod&#39;, &#39;mode&#39;, &#39;mul&#39;, &#39;multiply&#39;, &#39;ndim&#39;, &#39;ne&#39;, &#39;nlargest&#39;, &#39;notna&#39;, &#39;notnull&#39;, &#39;nsmallest&#39;, &#39;nunique&#39;, &#39;pad&#39;, &#39;pct_change&#39;, &#39;pipe&#39;, &#39;pivot&#39;, &#39;pivot_table&#39;, &#39;plot&#39;, &#39;pop&#39;, &#39;pow&#39;, &#39;prod&#39;, &#39;product&#39;, &#39;quantile&#39;, &#39;query&#39;, &#39;radd&#39;, &#39;rank&#39;, &#39;rdiv&#39;, &#39;reindex&#39;, &#39;reindex_like&#39;, &#39;rename&#39;, &#39;rename_axis&#39;, &#39;reorder_levels&#39;, &#39;replace&#39;, &#39;resample&#39;, &#39;reset_index&#39;, &#39;rfloordiv&#39;, &#39;rmod&#39;, &#39;rmul&#39;, &#39;rolling&#39;, &#39;round&#39;, &#39;rpow&#39;, &#39;rsub&#39;, &#39;rtruediv&#39;, &#39;sample&#39;, &#39;select_dtypes&#39;, &#39;sem&#39;, &#39;set_axis&#39;, &#39;set_flags&#39;, &#39;set_index&#39;, &#39;shape&#39;, &#39;shift&#39;, &#39;size&#39;, &#39;skew&#39;, &#39;slice_shift&#39;, &#39;sort_index&#39;, &#39;sort_values&#39;, &#39;sparse&#39;, &#39;squeeze&#39;, &#39;stack&#39;, &#39;std&#39;, &#39;style&#39;, &#39;sub&#39;, &#39;subtract&#39;, &#39;sum&#39;, &#39;swapaxes&#39;, &#39;swaplevel&#39;, &#39;tail&#39;, &#39;take&#39;, &#39;to_clipboard&#39;, &#39;to_csv&#39;, &#39;to_dict&#39;, &#39;to_excel&#39;, &#39;to_feather&#39;, &#39;to_gbq&#39;, &#39;to_hdf&#39;, &#39;to_html&#39;, &#39;to_json&#39;, &#39;to_latex&#39;, &#39;to_markdown&#39;, &#39;to_numpy&#39;, &#39;to_parquet&#39;, &#39;to_period&#39;, &#39;to_pickle&#39;, &#39;to_records&#39;, &#39;to_sql&#39;, &#39;to_stata&#39;, &#39;to_string&#39;, &#39;to_timestamp&#39;, &#39;to_xarray&#39;, &#39;to_xml&#39;, &#39;transform&#39;, &#39;transpose&#39;, &#39;truediv&#39;, &#39;truncate&#39;, &#39;tshift&#39;, &#39;tz_convert&#39;, &#39;tz_localize&#39;, &#39;unstack&#39;, &#39;update&#39;, &#39;value_counts&#39;, &#39;values&#39;, &#39;var&#39;, &#39;where&#39;, &#39;xs&#39;], &#39;___&#39;: &lt;AxesSubplot:&gt;, &#39;_i&#39;: &#39;globals()&#39;, &#39;_ii&#39;: &#39;dir(pd.DataFrame)&#39;, &#39;_iii&#39;: &#39;import pandas as pd n na = [1,2,3,4,5] na_df = pd.DataFrame(a) na_df.plot()&#39;, &#39;_i1&#39;: &#34;import numpy as np nimport pandas as pd nimport matplotlib.pyplot as plt nimport seaborn as sns n%matplotlib inline n ntitanic_df = pd.read_csv(&#39;./train.csv&#39;) ntitanic_df.head(3)&#34;, &#39;np&#39;: &lt;module &#39;numpy&#39; from &#39;C: Users 20190073 Anaconda3 lib site-packages numpy __init__.py&#39;&gt;, &#39;pd&#39;: &lt;module &#39;pandas&#39; from &#39;C: Users 20190073 Anaconda3 lib site-packages pandas __init__.py&#39;&gt;, &#39;plt&#39;: &lt;module &#39;matplotlib.pyplot&#39; from &#39;C: Users 20190073 Anaconda3 lib site-packages matplotlib pyplot.py&#39;&gt;, &#39;sns&#39;: &lt;module &#39;seaborn&#39; from &#39;C: Users 20190073 Anaconda3 lib site-packages seaborn __init__.py&#39;&gt;, &#39;titanic_df&#39;: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 3 4 1 1 4 5 0 3 .. ... ... ... 886 887 0 2 887 888 1 1 888 889 0 3 889 890 1 1 890 891 0 3 Name Sex Age SibSp 0 Braund, Mr. Owen Harris male 22.0 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 2 Heikkinen, Miss. Laina female 26.0 0 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 4 Allen, Mr. William Henry male 35.0 0 .. ... ... ... ... 886 Montvila, Rev. Juozas male 27.0 0 887 Graham, Miss. Margaret Edith female 19.0 0 888 Johnston, Miss. Catherine Helen &#34;Carrie&#34; female NaN 1 889 Behr, Mr. Karl Howell male 26.0 0 890 Dooley, Mr. Patrick male 32.0 0 Parch Ticket Fare Cabin Embarked 0 0 A/5 21171 7.2500 NaN S 1 0 PC 17599 71.2833 C85 C 2 0 STON/O2. 3101282 7.9250 NaN S 3 0 113803 53.1000 C123 S 4 0 373450 8.0500 NaN S .. ... ... ... ... ... 886 0 211536 13.0000 NaN S 887 0 112053 30.0000 B42 S 888 2 W./C. 6607 23.4500 NaN S 889 0 111369 30.0000 C148 C 890 0 370376 7.7500 NaN Q [891 rows x 12 columns], &#39;_1&#39;: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 Name Sex Age SibSp 0 Braund, Mr. Owen Harris male 22.0 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 2 Heikkinen, Miss. Laina female 26.0 0 Parch Ticket Fare Cabin Embarked 0 0 A/5 21171 7.2500 N S 1 0 PC 17599 71.2833 C85 C 2 0 STON/O2. 3101282 7.9250 N S , &#39;_i2&#39;: &#34;print(&#39;### train 데이터 정보 ### n&#39;) nprint(titanic_df.info())&#34;, &#39;_i3&#39;: &#39;titanic_df.describe()&#39;, &#39;_3&#39;: PassengerId Survived Pclass Age SibSp count 891.000000 891.000000 891.000000 714.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 std 257.353842 0.486592 0.836071 14.526497 1.102743 min 1.000000 0.000000 1.000000 0.420000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 50% 446.000000 0.000000 3.000000 28.000000 0.000000 75% 668.500000 1.000000 3.000000 38.000000 1.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 Parch Fare count 891.000000 891.000000 mean 0.381594 32.204208 std 0.806057 49.693429 min 0.000000 0.000000 25% 0.000000 7.910400 50% 0.000000 14.454200 75% 0.000000 31.000000 max 6.000000 512.329200 , &#39;_i4&#39;: &#34;titanic_df[&#39;Age&#39;].fillna(titanic_df[&#39;Age&#39;].mean(), inplace=True) ntitanic_df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) ntitanic_df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) n nprint(&#39;컬럼별 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum()) nprint(&#39; n총 데이터 세트 null 값 갯수: &#39;, titanic_df.isnull().sum().sum())&#34;, &#39;_i5&#39;: &#34;# object 컬럼타입 추출 n# 조건 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;], &#39; n&#39;) n# 조건의 인덱스 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index, &#39; n&#39;) n# 조건 인덱스 후 리스트변환 nprint(titanic_df.dtypes[titanic_df.dtypes==&#39;object&#39;].index.to_list(), &#39; n&#39;)&#34;, &#39;_i6&#39;: &#34;print(&#39;Sex 값 분포 : n&#39;, titanic_df[&#39;Sex&#39;].value_counts()) nprint(&#39; n Cabin 값 분포 : n&#39;, titanic_df[&#39;Cabin&#39;].value_counts()) nprint(&#39; n Embarked 값 분포 : n&#39;, titanic_df[&#39;Embarked&#39;].value_counts())&#34;, &#39;_i7&#39;: &#34;titanic_df[&#39;Cabin&#39;].str[:1]&#34;, &#39;_7&#39;: 0 N 1 C 2 N 3 C 4 N .. 886 N 887 B 888 N 889 C 890 N Name: Cabin, Length: 891, dtype: object, &#39;_i8&#39;: &#34;titanic_df[&#39;Cabin&#39;] = titanic_df[&#39;Cabin&#39;].str[:1] nprint(titanic_df[&#39;Cabin&#39;].head(3))&#34;, &#39;_i9&#39;: &#34;titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;])&#34;, &#39;_9&#39;: &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000002725F96AB80&gt;, &#39;_i10&#39;: &#34;titanic_df.groupby([&#39;Sex&#39;, &#39;Survived&#39;])[&#39;Survived&#39;].count()&#34;, &#39;_10&#39;: Sex Survived female 0 81 1 233 male 0 468 1 109 Name: Survived, dtype: int64, &#39;_i11&#39;: &#34;titanic_df[&#39;Survived&#39;].value_counts()&#34;, &#39;_11&#39;: 0 549 1 342 Name: Survived, dtype: int64, &#39;_i12&#39;: &#34;sns.barplot(x=&#39;Sex&#39;, y=&#39;Survived&#39;, data=titanic_df)&#34;, &#39;_12&#39;: &lt;AxesSubplot:xlabel=&#39;Sex&#39;, ylabel=&#39;Survived&#39;&gt;, &#39;_i13&#39;: &#34;sns.barplot(x=&#39;Pclass&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df)&#34;, &#39;_13&#39;: &lt;AxesSubplot:xlabel=&#39;Pclass&#39;, ylabel=&#39;Survived&#39;&gt;, &#39;_i14&#39;: &#34;# 입력 age에 따라 구분값을 반환하는 함수 설정, DataFrame의 apply lambda 식에 사용 ndef get_category(age): n cat=&#39;&#39; n if age &lt;= -1: cat = &#39;Unknown&#39; n elif age &lt;= 5: cat = &#39;Baby&#39; n elif age &lt;= 12: cat = &#39;Child&#39; n elif age &lt;= 18: cat = &#39;Teenage&#39; n elif age &lt;= 25: cat = &#39;Student&#39; n elif age &lt;= 35: cat = &#39;Young Adult&#39; n elif age &lt;= 60: cat = &#39;Adult&#39; n else: cat = &#39;Elderly&#39; n n return cat n n# 막대 그래프의 크기 figure를 더 크게 설정 nplt.figure(figsize=(10, 6)) n n# x 축의 값을 순차적으로 표시하기 위한 설정 ngroup_names = [&#39;Unknown&#39;, &#39;Baby&#39;, &#39;Child&#39;, &#39;Teenager&#39;, &#39;Student&#39;, &#39;Young Adult&#39;, &#39;Adult&#39;, &#39;Elderly&#39;] n n# lambda 식에 위에서 생성한 get_category() 함수를 반환값으로 지정 n# get_category(x)는 입력값으로 &#39;Age&#39; 컬럼값을 받아서 해당하는 cat 반환 ntitanic_df[&#39;Age_cat&#39;] = titanic_df[&#39;Age&#39;].apply(lambda x: get_category(x)) n nsns.barplot(x=&#39;Age_cat&#39;, y=&#39;Survived&#39;, hue=&#39;Sex&#39;, data=titanic_df, order=group_names) ntitanic_df.drop(&#39;Age_cat&#39;, axis=1, inplace=True) &#34;, &#39;get_category&#39;: &lt;function __main__.get_category(age)&gt;, &#39;group_names&#39;: [&#39;Unknown&#39;, &#39;Baby&#39;, &#39;Child&#39;, &#39;Teenager&#39;, &#39;Student&#39;, &#39;Young Adult&#39;, &#39;Adult&#39;, &#39;Elderly&#39;], &#39;_i15&#39;: &#34;from sklearn.preprocessing import LabelEncoder n ndef encode_features(dataDF): n features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] n le = LabelEncoder() n for feature in features: n le.fit(dataDF[feature]) n dataDF[feature] = le.transform(dataDF[feature]) n n return dataDF n ntitanic_df = encode_features(titanic_df) # encode_features 함수에서 변환된 3개 컬럼값이 원본 titanic_df에 덮어써짐 ntitanic_df.head(3) &#34;, &#39;LabelEncoder&#39;: sklearn.preprocessing._label.LabelEncoder, &#39;encode_features&#39;: &lt;function __main__.encode_features(dataDF)&gt;, &#39;_15&#39;: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 Name Sex Age SibSp Parch 0 Braund, Mr. Owen Harris 1 22.0 1 0 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 0 38.0 1 0 2 Heikkinen, Miss. Laina 0 26.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7.2500 7 3 1 PC 17599 71.2833 2 0 2 STON/O2. 3101282 7.9250 7 3 , &#39;_i16&#39;: &#34;from sklearn.preprocessing import LabelEncoder n n# null 처리함수 ndef fillna(df): n df[&#39;Age&#39;].fillna(df[&#39;Age&#39;].mean(), inplace=True) n df[&#39;Cabin&#39;].fillna(&#39;N&#39;, inplace=True) n df[&#39;Embarked&#39;].fillna(&#39;N&#39;, inplace=True) n n return df n n# 머신러닝 알고리즘에 불필요한 피처제거 ndef drop_features(df): n df.drop([&#39;PassengerId&#39;, &#39;Name&#39;, &#39;Ticket&#39;], axis=1, inplace=True) n return df n n# 레이블 인코딩 수행 ndef format_features(df): n df[&#39;Cabin&#39;] = df[&#39;Cabin&#39;].str[:1] n features = [&#39;Cabin&#39;, &#39;Sex&#39;, &#39;Embarked&#39;] n for feature in features: n le = LabelEncoder() n le = le.fit(df[feature]) n df[feature] = le.transform(df[feature]) n return df n n# 앞에서 설정한 Data Preprocessing 함수 호출 ndef transform_features(df): n df = fillna(df) n df = drop_features(df) n df = format_features(df) n return df&#34;, &#39;fillna&#39;: &lt;function __main__.fillna(df)&gt;, &#39;drop_features&#39;: &lt;function __main__.drop_features(df)&gt;, &#39;format_features&#39;: &lt;function __main__.format_features(df)&gt;, &#39;transform_features&#39;: &lt;function __main__.transform_features(df)&gt;, &#39;_i17&#39;: &#39;titanic_df.head()&#39;, &#39;_17&#39;: PassengerId Survived Pclass 0 1 0 3 1 2 1 1 2 3 1 3 3 4 1 1 4 5 0 3 Name Sex Age SibSp Parch 0 Braund, Mr. Owen Harris 1 22.0 1 0 1 Cumings, Mrs. John Bradley (Florence Briggs Th... 0 38.0 1 0 2 Heikkinen, Miss. Laina 0 26.0 0 0 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) 0 35.0 1 0 4 Allen, Mr. William Henry 1 35.0 0 0 Ticket Fare Cabin Embarked 0 A/5 21171 7.2500 7 3 1 PC 17599 71.2833 2 0 2 STON/O2. 3101282 7.9250 7 3 3 113803 53.1000 2 3 4 373450 8.0500 7 3 , &#39;_i18&#39;: &#34;# 원본 데이터를 재로딩하고, feature 데이터 셋과 Label 데이터 셋 추출 ntitanic_df = pd.read_csv(&#39;./train.csv&#39;) ny_titanic_df = titanic_df[&#39;Survived&#39;] nX_titanic_df = titanic_df.drop(&#39;Survived&#39;, axis=1, inplace=False) n nX_titanic_df = transform_features(X_titanic_df)&#34;, &#39;y_titanic_df&#39;: 0 0 1 1 2 1 3 1 4 0 .. 886 0 887 1 888 0 889 1 890 0 Name: Survived, Length: 891, dtype: int64, &#39;X_titanic_df&#39;: Pclass Sex Age SibSp Parch Fare Cabin Embarked 0 3 1 22.000000 1 0 7.2500 7 3 1 1 0 38.000000 1 0 71.2833 2 0 2 3 0 26.000000 0 0 7.9250 7 3 3 1 0 35.000000 1 0 53.1000 2 3 4 3 1 35.000000 0 0 8.0500 7 3 .. ... ... ... ... ... ... ... ... 886 2 1 27.000000 0 0 13.0000 7 3 887 1 0 19.000000 0 0 30.0000 1 3 888 3 0 29.699118 1 2 23.4500 7 3 889 1 1 26.000000 0 0 30.0000 2 0 890 3 1 32.000000 0 0 7.7500 7 2 [891 rows x 8 columns], &#39;_i19&#39;: &#39;X_titanic_df.head(3)&#39;, &#39;_19&#39;: Pclass Sex Age SibSp Parch Fare Cabin Embarked 0 3 1 22.0 1 0 7.2500 7 3 1 1 0 38.0 1 0 71.2833 2 0 2 3 0 26.0 0 0 7.9250 7 3, &#39;_i20&#39;: &#39;from sklearn.model_selection import train_test_split nX_train, X_test, y_train, y_test = train_test_split(X_titanic_df, y_titanic_df, n test_size=0.2, random_state=11) nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)&#39;, &#39;train_test_split&#39;: &lt;function sklearn.model_selection._split.train_test_split(*arrays, test_size=None, train_size=None, random_state=None, shuffle=True, stratify=None)&gt;, &#39;X_train&#39;: Pclass Sex Age SibSp Parch Fare Cabin Embarked 333 3 1 16.0 2 0 18.0000 7 3 662 1 1 47.0 0 0 25.5875 4 3 382 3 1 32.0 0 0 7.9250 7 3 331 1 1 45.5 0 0 28.5000 2 3 149 2 1 42.0 0 0 13.0000 7 3 .. ... ... ... ... ... ... ... ... 269 1 0 35.0 0 0 135.6333 2 3 337 1 0 41.0 0 0 134.5000 4 0 91 3 1 20.0 0 0 7.8542 7 3 80 3 1 22.0 0 0 9.0000 7 3 703 3 1 25.0 0 0 7.7417 7 2 [712 rows x 8 columns], &#39;X_test&#39;: Pclass Sex Age SibSp Parch Fare Cabin Embarked 431 3 0 29.699118 1 0 16.1000 7 3 821 3 1 27.000000 0 0 8.6625 7 3 629 3 1 29.699118 0 0 7.7333 7 2 626 2 1 57.000000 0 0 12.3500 7 2 665 2 1 32.000000 2 0 73.5000 7 3 .. ... ... ... ... ... ... ... ... 638 3 0 41.000000 0 5 39.6875 7 3 771 3 1 48.000000 0 0 7.8542 7 3 521 3 1 22.000000 0 0 7.8958 7 3 711 1 1 29.699118 0 0 26.5500 2 3 484 1 1 25.000000 1 0 91.0792 1 0 [179 rows x 8 columns], &#39;y_train&#39;: 333 0 662 0 382 0 331 0 149 0 .. 269 1 337 1 91 0 80 0 703 0 Name: Survived, Length: 712, dtype: int64, &#39;y_test&#39;: 431 1 821 1 629 0 626 0 665 0 .. 638 0 771 0 521 0 711 0 484 1 Name: Survived, Length: 179, dtype: int64, &#39;_i21&#39;: &#34;from sklearn.tree import DecisionTreeClassifier nfrom sklearn.ensemble import RandomForestClassifier nfrom sklearn.linear_model import LogisticRegression nfrom sklearn.metrics import accuracy_score n n# 결정트리, Random Forest, 로지스틱 회귀를 위한 사이킷런 Classifier 클래스 생성 ndt_clf = DecisionTreeClassifier(random_state=11) nrf_clf = RandomForestClassifier(random_state=11) nlr_clf = LogisticRegression(solver=&#39;liblinear&#39;) n n# DecisionTreeClassifier 학습/예측/평가 ndt_clf.fit(X_train, y_train) ndt_pred = dt_clf.predict(X_test) nprint(&#39;DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, dt_pred))) n n# RandomFroestClassifier 학습/예측/평가 nrf_clf.fit(X_train, y_train) nrf_pred = rf_clf.predict(X_test) nprint(&#39;RandomForestClassifier 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, rf_pred))) n n# LogisticRegression 학습/예측/평가 nlr_clf.fit(X_train, y_train) nlr_pred = lr_clf.predict(X_test) nprint(&#39;LogisticRegression 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, lr_pred)))&#34;, &#39;DecisionTreeClassifier&#39;: sklearn.tree._classes.DecisionTreeClassifier, &#39;RandomForestClassifier&#39;: sklearn.ensemble._forest.RandomForestClassifier, &#39;LogisticRegression&#39;: sklearn.linear_model._logistic.LogisticRegression, &#39;accuracy_score&#39;: &lt;function sklearn.metrics._classification.accuracy_score(y_true, y_pred, *, normalize=True, sample_weight=None)&gt;, &#39;dt_clf&#39;: DecisionTreeClassifier(random_state=11), &#39;rf_clf&#39;: RandomForestClassifier(random_state=11), &#39;lr_clf&#39;: LogisticRegression(solver=&#39;liblinear&#39;), &#39;dt_pred&#39;: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=int64), &#39;rf_pred&#39;: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], dtype=int64), &#39;lr_pred&#39;: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=int64), &#39;_i22&#39;: &#39;y_test_ndarray = np.array(y_test) nprint(y_test_ndarray)&#39;, &#39;y_test_ndarray&#39;: array([1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=int64), &#39;_i23&#39;: &#39;dt_pred&#39;, &#39;_23&#39;: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], dtype=int64), &#39;_i24&#39;: &#39;help(accuracy_score)&#39;, &#39;_i25&#39;: &#39;X_titanic_df.values[[0, 1, 2, 3, 4, 5]]&#39;, &#39;_25&#39;: array([[ 3. , 1. , 22. , 1. , 0. , 7.25 , 7. , 3. ], [ 1. , 0. , 38. , 1. , 0. , 71.2833 , 2. , 0. ], [ 3. , 0. , 26. , 0. , 0. , 7.925 , 7. , 3. ], [ 1. , 0. , 35. , 1. , 0. , 53.1 , 2. , 3. ], [ 3. , 1. , 35. , 0. , 0. , 8.05 , 7. , 3. ], [ 3. , 1. , 29.69911765, 0. , 0. , 8.4583 , 7. , 2. ]]), &#39;_i26&#39;: &#34;from sklearn.model_selection import KFold n ndef exec_kfold(clf, folds=5): n # 폴드 세트를 5개인 KFold객체를 생성, 폴드 수만큼 예측결과 저장을 위한 리스트 객체 생성 n kfold = KFold(n_splits=folds) n scores = [] n # KFold 교차 검증수행 n for iter_count, (train_index, test_index) in enumerate(kfold.split(X_titanic_df)): n # X_titanic_df 데이터에서 교차 검증별로 학습과 검증 데이터를 가리키는 index 생성 n X_train, X_test = X_titanic_df.values[train_index], X_titanic_df.values[test_index] n y_train, y_test = y_titanic_df.values[train_index], y_titanic_df.values[test_index] n n # Classifier 학습, 예측, 정확도 계산 n clf.fit(X_train, y_train) n predictions = clf.predict(X_test) n accuracy = accuracy_score(y_test, predictions) n scores.append(accuracy) n print(&#39;교차 검증 {0} 정확도: {1:4f}&#39;.format(iter_count, accuracy)) n n # 5개 fold에서 평균 정확도 계산 n mean_score = np.mean(scores) n print(&#39;평균 정확도: {0: 4f}&#39;.format(mean_score)) n n# exec_fold 호출 nexec_kfold(dt_clf, folds=5)&#34;, &#39;KFold&#39;: sklearn.model_selection._split.KFold, &#39;exec_kfold&#39;: &lt;function __main__.exec_kfold(clf, folds=5)&gt;, &#39;_i27&#39;: &#34;from sklearn.model_selection import GridSearchCV n nparameters = {&#39;max_depth&#39;:[2,3,5,10], n &#39;min_samples_split&#39;:[2,3,5], &#39;min_samples_leaf&#39;:[1,5,8]} n ngrid_dclf = GridSearchCV(dt_clf, param_grid=parameters, scoring=&#39;accuracy&#39;, cv=5) ngrid_dclf.fit(X_train, y_train) n nprint(&#39;GridSearchCV 최적 하이퍼 파라미터: &#39;, grid_dclf.best_params_) nprint(&#39;GridSearchCV 최고 정확도: {0: .4f}&#39;.format(grid_dclf.best_score_)) nbest_dclf = grid_dclf.best_estimator_ n n# GridSearchCV의 최적 하이퍼 파라미터로 학습된 Estimator로 예측 및 평가 수행 ndprediction = best_dclf.predict(X_test) naccuracy = accuracy_score(y_test, dprediction) nprint(&#39;테스트 세트에서의 DecisionTreeClassifier 정확도: {0: .4f}&#39;.format(accuracy))&#34;, &#39;GridSearchCV&#39;: sklearn.model_selection._search.GridSearchCV, &#39;parameters&#39;: {&#39;max_depth&#39;: [2, 3, 5, 10], &#39;min_samples_split&#39;: [2, 3, 5], &#39;min_samples_leaf&#39;: [1, 5, 8]}, &#39;grid_dclf&#39;: GridSearchCV(cv=5, estimator=DecisionTreeClassifier(random_state=11), param_grid={&#39;max_depth&#39;: [2, 3, 5, 10], &#39;min_samples_leaf&#39;: [1, 5, 8], &#39;min_samples_split&#39;: [2, 3, 5]}, scoring=&#39;accuracy&#39;), &#39;best_dclf&#39;: DecisionTreeClassifier(max_depth=3, min_samples_leaf=5, random_state=11), &#39;dprediction&#39;: array([1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], dtype=int64), &#39;accuracy&#39;: 0.8715083798882681, &#39;_i28&#39;: &#39;help(GridSearchCV)&#39;, &#39;_i29&#39;: &#39;import pandas as pd n na = [1,2,3,4,5] na_df = pd.DataFrame(a) na_df.plot()&#39;, &#39;a&#39;: [1, 2, 3, 4, 5], &#39;a_df&#39;: 0 0 1 1 2 2 3 3 4 4 5, &#39;_29&#39;: &lt;AxesSubplot:&gt;, &#39;_i30&#39;: &#39;dir(pd.DataFrame)&#39;, &#39;_30&#39;: [&#39;T&#39;, &#39;_AXIS_LEN&#39;, &#39;_AXIS_NAMES&#39;, &#39;_AXIS_NUMBERS&#39;, &#39;_AXIS_ORDERS&#39;, &#39;_AXIS_TO_AXIS_NUMBER&#39;, &#39;_HANDLED_TYPES&#39;, &#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__annotations__&#39;, &#39;__array__&#39;, &#39;__array_priority__&#39;, &#39;__array_ufunc__&#39;, &#39;__array_wrap__&#39;, &#39;__bool__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__copy__&#39;, &#39;__deepcopy__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__finalize__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattr__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getstate__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__iand__&#39;, &#39;__ifloordiv__&#39;, &#39;__imod__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__invert__&#39;, &#39;__ior__&#39;, &#39;__ipow__&#39;, &#39;__isub__&#39;, &#39;__iter__&#39;, &#39;__itruediv__&#39;, &#39;__ixor__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__matmul__&#39;, &#39;__mod__&#39;, &#39;__module__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__nonzero__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;, &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rfloordiv__&#39;, &#39;__rmatmul__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;, &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rsub__&#39;, &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__setstate__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__weakref__&#39;, &#39;__xor__&#39;, &#39;_accessors&#39;, &#39;_accum_func&#39;, &#39;_add_numeric_operations&#39;, &#39;_agg_by_level&#39;, &#39;_agg_examples_doc&#39;, &#39;_agg_summary_and_see_also_doc&#39;, &#39;_align_frame&#39;, &#39;_align_series&#39;, &#39;_append&#39;, &#39;_arith_method&#39;, &#39;_as_manager&#39;, &#39;_box_col_values&#39;, &#39;_can_fast_transpose&#39;, &#39;_check_inplace_and_allows_duplicate_labels&#39;, &#39;_check_inplace_setting&#39;, &#39;_check_is_chained_assignment_possible&#39;, &#39;_check_label_or_level_ambiguity&#39;, &#39;_check_setitem_copy&#39;, &#39;_clear_item_cache&#39;, &#39;_clip_with_one_bound&#39;, &#39;_clip_with_scalar&#39;, &#39;_cmp_method&#39;, &#39;_combine_frame&#39;, &#39;_consolidate&#39;, &#39;_consolidate_inplace&#39;, &#39;_construct_axes_dict&#39;, &#39;_construct_axes_from_arguments&#39;, &#39;_construct_result&#39;, &#39;_constructor&#39;, &#39;_constructor_sliced&#39;, &#39;_convert&#39;, &#39;_count_level&#39;, &#39;_data&#39;, &#39;_dir_additions&#39;, &#39;_dir_deletions&#39;, &#39;_dispatch_frame_op&#39;, &#39;_drop_axis&#39;, &#39;_drop_labels_or_levels&#39;, &#39;_ensure_valid_index&#39;, &#39;_find_valid_index&#39;, &#39;_from_arrays&#39;, &#39;_from_mgr&#39;, &#39;_get_agg_axis&#39;, &#39;_get_axis&#39;, &#39;_get_axis_name&#39;, &#39;_get_axis_number&#39;, &#39;_get_axis_resolvers&#39;, &#39;_get_block_manager_axis&#39;, &#39;_get_bool_data&#39;, &#39;_get_cleaned_column_resolvers&#39;, &#39;_get_column_array&#39;, &#39;_get_index_resolvers&#39;, &#39;_get_item_cache&#39;, &#39;_get_label_or_level_values&#39;, &#39;_get_numeric_data&#39;, &#39;_get_value&#39;, &#39;_getitem_bool_array&#39;, &#39;_getitem_multilevel&#39;, &#39;_gotitem&#39;, &#39;_hidden_attrs&#39;, &#39;_indexed_same&#39;, &#39;_info_axis&#39;, &#39;_info_axis_name&#39;, &#39;_info_axis_number&#39;, &#39;_info_repr&#39;, &#39;_init_mgr&#39;, &#39;_inplace_method&#39;, &#39;_internal_names&#39;, &#39;_internal_names_set&#39;, &#39;_is_copy&#39;, &#39;_is_homogeneous_type&#39;, &#39;_is_label_or_level_reference&#39;, &#39;_is_label_reference&#39;, &#39;_is_level_reference&#39;, &#39;_is_mixed_type&#39;, &#39;_is_view&#39;, &#39;_iset_item&#39;, &#39;_iset_item_mgr&#39;, &#39;_iset_not_inplace&#39;, &#39;_iter_column_arrays&#39;, &#39;_ixs&#39;, &#39;_join_compat&#39;, &#39;_logical_func&#39;, &#39;_logical_method&#39;, &#39;_maybe_cache_changed&#39;, &#39;_maybe_update_cacher&#39;, &#39;_metadata&#39;, &#39;_min_count_stat_function&#39;, &#39;_needs_reindex_multi&#39;, &#39;_protect_consolidate&#39;, &#39;_reduce&#39;, &#39;_reduce_axis1&#39;, &#39;_reindex_axes&#39;, &#39;_reindex_columns&#39;, &#39;_reindex_index&#39;, &#39;_reindex_multi&#39;, &#39;_reindex_with_indexers&#39;, &#39;_rename&#39;, &#39;_replace_columnwise&#39;, &#39;_repr_data_resource_&#39;, &#39;_repr_fits_horizontal_&#39;, &#39;_repr_fits_vertical_&#39;, &#39;_repr_html_&#39;, &#39;_repr_latex_&#39;, &#39;_reset_cache&#39;, &#39;_reset_cacher&#39;, &#39;_sanitize_column&#39;, &#39;_series&#39;, &#39;_set_axis&#39;, &#39;_set_axis_name&#39;, &#39;_set_axis_nocheck&#39;, &#39;_set_is_copy&#39;, &#39;_set_item&#39;, &#39;_set_item_frame_value&#39;, &#39;_set_item_mgr&#39;, &#39;_set_value&#39;, &#39;_setitem_array&#39;, &#39;_setitem_frame&#39;, &#39;_setitem_slice&#39;, &#39;_slice&#39;, &#39;_stat_axis&#39;, &#39;_stat_axis_name&#39;, &#39;_stat_axis_number&#39;, &#39;_stat_function&#39;, &#39;_stat_function_ddof&#39;, &#39;_take_with_is_copy&#39;, &#39;_to_dict_of_blocks&#39;, &#39;_typ&#39;, &#39;_update_inplace&#39;, &#39;_validate_dtype&#39;, &#39;_values&#39;, &#39;_where&#39;, &#39;abs&#39;, &#39;add&#39;, &#39;add_prefix&#39;, &#39;add_suffix&#39;, &#39;agg&#39;, &#39;aggregate&#39;, &#39;align&#39;, &#39;all&#39;, &#39;any&#39;, &#39;append&#39;, &#39;apply&#39;, &#39;applymap&#39;, &#39;asfreq&#39;, &#39;asof&#39;, &#39;assign&#39;, &#39;astype&#39;, &#39;at&#39;, &#39;at_time&#39;, &#39;attrs&#39;, &#39;axes&#39;, &#39;backfill&#39;, &#39;between_time&#39;, &#39;bfill&#39;, &#39;bool&#39;, &#39;boxplot&#39;, &#39;clip&#39;, &#39;columns&#39;, &#39;combine&#39;, &#39;combine_first&#39;, &#39;compare&#39;, &#39;convert_dtypes&#39;, &#39;copy&#39;, &#39;corr&#39;, &#39;corrwith&#39;, &#39;count&#39;, &#39;cov&#39;, &#39;cummax&#39;, &#39;cummin&#39;, &#39;cumprod&#39;, &#39;cumsum&#39;, &#39;describe&#39;, &#39;diff&#39;, &#39;div&#39;, &#39;divide&#39;, &#39;dot&#39;, &#39;drop&#39;, &#39;drop_duplicates&#39;, &#39;droplevel&#39;, &#39;dropna&#39;, &#39;dtypes&#39;, &#39;duplicated&#39;, &#39;empty&#39;, &#39;eq&#39;, &#39;equals&#39;, &#39;eval&#39;, &#39;ewm&#39;, &#39;expanding&#39;, &#39;explode&#39;, &#39;ffill&#39;, &#39;fillna&#39;, &#39;filter&#39;, &#39;first&#39;, &#39;first_valid_index&#39;, &#39;flags&#39;, &#39;floordiv&#39;, &#39;from_dict&#39;, &#39;from_records&#39;, &#39;ge&#39;, &#39;get&#39;, &#39;groupby&#39;, &#39;gt&#39;, &#39;head&#39;, &#39;hist&#39;, &#39;iat&#39;, &#39;idxmax&#39;, &#39;idxmin&#39;, &#39;iloc&#39;, &#39;index&#39;, &#39;infer_objects&#39;, &#39;info&#39;, &#39;insert&#39;, &#39;interpolate&#39;, &#39;isin&#39;, &#39;isna&#39;, &#39;isnull&#39;, &#39;items&#39;, &#39;iteritems&#39;, &#39;iterrows&#39;, &#39;itertuples&#39;, &#39;join&#39;, &#39;keys&#39;, &#39;kurt&#39;, &#39;kurtosis&#39;, &#39;last&#39;, &#39;last_valid_index&#39;, &#39;le&#39;, &#39;loc&#39;, &#39;lookup&#39;, &#39;lt&#39;, &#39;mad&#39;, &#39;mask&#39;, &#39;max&#39;, &#39;mean&#39;, &#39;median&#39;, &#39;melt&#39;, &#39;memory_usage&#39;, &#39;merge&#39;, &#39;min&#39;, &#39;mod&#39;, &#39;mode&#39;, &#39;mul&#39;, &#39;multiply&#39;, &#39;ndim&#39;, &#39;ne&#39;, &#39;nlargest&#39;, &#39;notna&#39;, &#39;notnull&#39;, &#39;nsmallest&#39;, &#39;nunique&#39;, &#39;pad&#39;, &#39;pct_change&#39;, &#39;pipe&#39;, &#39;pivot&#39;, &#39;pivot_table&#39;, &#39;plot&#39;, &#39;pop&#39;, &#39;pow&#39;, &#39;prod&#39;, &#39;product&#39;, &#39;quantile&#39;, &#39;query&#39;, &#39;radd&#39;, &#39;rank&#39;, &#39;rdiv&#39;, &#39;reindex&#39;, &#39;reindex_like&#39;, &#39;rename&#39;, &#39;rename_axis&#39;, &#39;reorder_levels&#39;, &#39;replace&#39;, &#39;resample&#39;, &#39;reset_index&#39;, &#39;rfloordiv&#39;, &#39;rmod&#39;, &#39;rmul&#39;, &#39;rolling&#39;, &#39;round&#39;, &#39;rpow&#39;, &#39;rsub&#39;, &#39;rtruediv&#39;, &#39;sample&#39;, &#39;select_dtypes&#39;, &#39;sem&#39;, &#39;set_axis&#39;, &#39;set_flags&#39;, &#39;set_index&#39;, &#39;shape&#39;, &#39;shift&#39;, &#39;size&#39;, &#39;skew&#39;, &#39;slice_shift&#39;, &#39;sort_index&#39;, &#39;sort_values&#39;, &#39;sparse&#39;, &#39;squeeze&#39;, &#39;stack&#39;, &#39;std&#39;, &#39;style&#39;, &#39;sub&#39;, &#39;subtract&#39;, &#39;sum&#39;, &#39;swapaxes&#39;, &#39;swaplevel&#39;, &#39;tail&#39;, &#39;take&#39;, &#39;to_clipboard&#39;, &#39;to_csv&#39;, &#39;to_dict&#39;, &#39;to_excel&#39;, &#39;to_feather&#39;, &#39;to_gbq&#39;, &#39;to_hdf&#39;, &#39;to_html&#39;, &#39;to_json&#39;, &#39;to_latex&#39;, &#39;to_markdown&#39;, &#39;to_numpy&#39;, &#39;to_parquet&#39;, &#39;to_period&#39;, &#39;to_pickle&#39;, &#39;to_records&#39;, &#39;to_sql&#39;, &#39;to_stata&#39;, &#39;to_string&#39;, &#39;to_timestamp&#39;, &#39;to_xarray&#39;, &#39;to_xml&#39;, &#39;transform&#39;, &#39;transpose&#39;, &#39;truediv&#39;, &#39;truncate&#39;, &#39;tshift&#39;, &#39;tz_convert&#39;, &#39;tz_localize&#39;, &#39;unstack&#39;, &#39;update&#39;, &#39;value_counts&#39;, &#39;values&#39;, &#39;var&#39;, &#39;where&#39;, &#39;xs&#39;], &#39;_i31&#39;: &#39;globals()&#39;, &#39;_31&#39;: {...}, &#39;_i32&#39;: &#39;locals()&#39;} .",
            "url": "https://hyunwoo24.github.io/blog/2022/07/12/titanic_test.html",
            "relUrl": "/2022/07/12/titanic_test.html",
            "date": " • Jul 12, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "sklearn version . import sklearn print(sklearn.__version__) . 1.0.2 . sklearn module loading for iris classification . from sklearn.datasets import load_iris from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import train_test_split . load_iris . &lt;function sklearn.datasets._base.load_iris(*, return_X_y=False, as_frame=False)&gt; . type(load_iris) . function . load_iris() &quot;&quot;&quot; Signature: load_iris(*, return_X_y=False, as_frame=False) Docstring: Load and return the iris dataset (classification). - multi-class classification dataset. ================= ============== Classes 3 Samples per class 50 Samples total 150 Dimensionality 4 Features real, positive ================= ============== Parameters - return_X_y : bool, default=False If True, returns ``(data, target)`` instead of a Bunch object. See below for more information about the `data` and `target` object. as_frame : bool, default=False If True, the data is a pandas DataFrame including columns with appropriate dtypes (numeric). The target is a pandas DataFrame or Series depending on the number of target columns. If `return_X_y` is True, then (`data`, `target`) will be pandas DataFrames or Series as described below. Returns - data : :class:`~sklearn.utils.Bunch` Dictionary-like object, with the following attributes. data : {ndarray, dataframe} of shape (150, 4) The data matrix. If `as_frame=True`, `data` will be a pandas DataFrame. target: {ndarray, Series} of shape (150,) The classification target. If `as_frame=True`, `target` will be a pandas Series. feature_names: list The names of the dataset columns. target_names: list The names of target classes. frame: DataFrame of shape (150, 5) Only present when `as_frame=True`. DataFrame with `data` and `target`. DESCR: str The full description of the dataset. filename: str The path to the location of the data. (data, target) : tuple if ``return_X_y`` is True A tuple of two ndarray. The first containing a 2D array of shape (n_samples, n_features) with each row representing one sample and each column representing the features. The second ndarray of shape (n_samples,) containing the target samples. Examples -- Let&#39;s say you are interested in the samples 10, 25, and 50, and want to know their class name. &gt;&gt;&gt; from sklearn.datasets import load_iris &gt;&gt;&gt; data = load_iris() &gt;&gt;&gt; data.target[[10, 25, 50]] array([0, 0, 1]) &gt;&gt;&gt; list(data.target_names) [&#39;setosa&#39;, &#39;versicolor&#39;, &#39;virginica&#39;] Type: function &quot;&quot;&quot; . &#34; nSignature: load_iris(*, return_X_y=False, as_frame=False) nDocstring: Load and return the iris dataset (classification). n n- multi-class classification dataset. n n================= ============== nClasses 3 nSamples per class 50 nSamples total 150 nDimensionality 4 nFeatures real, positive n================= ============== n nParameters n- nreturn_X_y : bool, default=False n If True, returns ``(data, target)`` instead of a Bunch object. See n below for more information about the `data` and `target` object. n nas_frame : bool, default=False n If True, the data is a pandas DataFrame including columns with n appropriate dtypes (numeric). The target is n a pandas DataFrame or Series depending on the number of target columns. n If `return_X_y` is True, then (`data`, `target`) will be pandas n DataFrames or Series as described below. n nReturns n- ndata : :class:`~sklearn.utils.Bunch` n Dictionary-like object, with the following attributes. n n data : {ndarray, dataframe} of shape (150, 4) n The data matrix. If `as_frame=True`, `data` will be a pandas n DataFrame. n target: {ndarray, Series} of shape (150,) n The classification target. If `as_frame=True`, `target` will be n a pandas Series. n feature_names: list n The names of the dataset columns. n target_names: list n The names of target classes. n frame: DataFrame of shape (150, 5) n Only present when `as_frame=True`. DataFrame with `data` and `target`. n n DESCR: str n The full description of the dataset. n filename: str n The path to the location of the data. n n(data, target) : tuple if ``return_X_y`` is True n A tuple of two ndarray. The first containing a 2D array of shape n (n_samples, n_features) with each row representing one sample and n each column representing the features. The second ndarray of shape n (n_samples,) containing the target samples. n nExamples n-- nLet&#39;s say you are interested in the samples 10, 25, and 50, nand want to know their class name. n n&gt;&gt;&gt; from sklearn.datasets import load_iris n&gt;&gt;&gt; data = load_iris() n&gt;&gt;&gt; data.target[[10, 25, 50]] narray([0, 0, 1]) n&gt;&gt;&gt; list(data.target_names) n[&#39;setosa&#39;, &#39;versicolor&#39;, &#39;virginica&#39;] nType: function n&#34; . import pandas as pd # iris dataset load iris = load_iris() # iris.data는 iris 데이터 세트에서 피처 만으로 된 데이터를 numpy로 가지고 있음 iris_data = iris.data # iris.target은 붓꽃 데이터 세트에서 레이블(결정 값) 데이터를 numpy로 가지고 있음 iris_label = iris.target print(&#39;iris target값: &#39;, type(iris_label), iris_label) print(&#39;iris target명: &#39;, type(iris.target_names), iris.target_names) # dataframe으로 변환 print(type(iris_data)) iris_df = pd.DataFrame(data=iris_data, columns=iris.feature_names) iris_df[&#39;label&#39;] = iris.target iris_df.head(3) . iris target값: &lt;class &#39;numpy.ndarray&#39;&gt; [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2] iris target명: &lt;class &#39;numpy.ndarray&#39;&gt; [&#39;setosa&#39; &#39;versicolor&#39; &#39;virginica&#39;] &lt;class &#39;numpy.ndarray&#39;&gt; . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) label . 0 5.1 | 3.5 | 1.4 | 0.2 | 0 | . 1 4.9 | 3.0 | 1.4 | 0.2 | 0 | . 2 4.7 | 3.2 | 1.3 | 0.2 | 0 | . &#54617;&#49845;&#45936;&#51060;&#53552;&#50752; &#53580;&#49828;&#53944; &#45936;&#51060;&#53552;&#49464;&#53944;&#47196; &#48516;&#47532; . X_train, X_test, y_train, y_test = train_test_split(iris_data, iris_label, test_size=0.2, random_state=11) . &#54617;&#49845; &#45936;&#51060;&#53552; &#49464;&#53944;&#47196; &#54617;&#49845;(train) &#49688;&#54665; . dt_clf = DecisionTreeClassifier(random_state=11) # 학습 수행 dt_clf.fit(X_train, y_train) . DecisionTreeClassifier(random_state=11) . &#53580;&#49828;&#53944; &#45936;&#51060;&#53552; &#49464;&#53944;&#47196; &#50696;&#52769;(predict) &#49688;&#54665; . pred = dt_clf.predict(X_test) . pred . array([2, 2, 1, 1, 2, 0, 1, 0, 0, 1, 1, 1, 1, 2, 2, 0, 2, 1, 2, 2, 1, 0, 0, 1, 0, 0, 2, 1, 0, 1]) . &#50696;&#52769; &#51221;&#54869;&#46020; &#54217;&#44032; . from sklearn.metrics import accuracy_score print(&#39;예측 정확도: {0:.4f}&#39;.format(accuracy_score(y_test, pred))) . 예측 정확도: 0.9333 . &#49324;&#51060;&#53431;&#47088; &#45236;&#51109; &#50696;&#51228; &#45936;&#51060;&#53552; . from sklearn.datasets import load_iris iris_data=load_iris() print(type(iris_data)) . &lt;class &#39;sklearn.utils.Bunch&#39;&gt; . keys=iris_data.keys() print(&#39;iris dataset keys: &#39;, keys) . iris dataset keys: dict_keys([&#39;data&#39;, &#39;target&#39;, &#39;frame&#39;, &#39;target_names&#39;, &#39;DESCR&#39;, &#39;feature_names&#39;, &#39;filename&#39;, &#39;data_module&#39;]) . 키는 보통 data, target, target_name, feature_names, DESCR로 구성돼 있습니다. 개별 키가 가리키는 의미는 다음과 같습니다. . feature_names는 피처의 이름을 나타냅니다. | data는 피처의 데이터 세트를 가리킵니다. . | target_names는 개별 레이블의 이름을 나타냅니다. . | target은 분류 시 레이블 값, 회귀일 때는 숫자 결괏값 데이터 세트입니다 | . DESCR은 데이터 세트에 대한 설명과 각 피처의 설명을 나타냅니다. | . values=iris_data.values() print(&#39;iris dataset values: &#39;, values) . iris dataset values: dict_values([array([[5.1, 3.5, 1.4, 0.2], [4.9, 3. , 1.4, 0.2], [4.7, 3.2, 1.3, 0.2], [4.6, 3.1, 1.5, 0.2], [5. , 3.6, 1.4, 0.2], [5.4, 3.9, 1.7, 0.4], [4.6, 3.4, 1.4, 0.3], [5. , 3.4, 1.5, 0.2], [4.4, 2.9, 1.4, 0.2], [4.9, 3.1, 1.5, 0.1], [5.4, 3.7, 1.5, 0.2], [4.8, 3.4, 1.6, 0.2], [4.8, 3. , 1.4, 0.1], [4.3, 3. , 1.1, 0.1], [5.8, 4. , 1.2, 0.2], [5.7, 4.4, 1.5, 0.4], [5.4, 3.9, 1.3, 0.4], [5.1, 3.5, 1.4, 0.3], [5.7, 3.8, 1.7, 0.3], [5.1, 3.8, 1.5, 0.3], [5.4, 3.4, 1.7, 0.2], [5.1, 3.7, 1.5, 0.4], [4.6, 3.6, 1. , 0.2], [5.1, 3.3, 1.7, 0.5], [4.8, 3.4, 1.9, 0.2], [5. , 3. , 1.6, 0.2], [5. , 3.4, 1.6, 0.4], [5.2, 3.5, 1.5, 0.2], [5.2, 3.4, 1.4, 0.2], [4.7, 3.2, 1.6, 0.2], [4.8, 3.1, 1.6, 0.2], [5.4, 3.4, 1.5, 0.4], [5.2, 4.1, 1.5, 0.1], [5.5, 4.2, 1.4, 0.2], [4.9, 3.1, 1.5, 0.2], [5. , 3.2, 1.2, 0.2], [5.5, 3.5, 1.3, 0.2], [4.9, 3.6, 1.4, 0.1], [4.4, 3. , 1.3, 0.2], [5.1, 3.4, 1.5, 0.2], [5. , 3.5, 1.3, 0.3], [4.5, 2.3, 1.3, 0.3], [4.4, 3.2, 1.3, 0.2], [5. , 3.5, 1.6, 0.6], [5.1, 3.8, 1.9, 0.4], [4.8, 3. , 1.4, 0.3], [5.1, 3.8, 1.6, 0.2], [4.6, 3.2, 1.4, 0.2], [5.3, 3.7, 1.5, 0.2], [5. , 3.3, 1.4, 0.2], [7. , 3.2, 4.7, 1.4], [6.4, 3.2, 4.5, 1.5], [6.9, 3.1, 4.9, 1.5], [5.5, 2.3, 4. , 1.3], [6.5, 2.8, 4.6, 1.5], [5.7, 2.8, 4.5, 1.3], [6.3, 3.3, 4.7, 1.6], [4.9, 2.4, 3.3, 1. ], [6.6, 2.9, 4.6, 1.3], [5.2, 2.7, 3.9, 1.4], [5. , 2. , 3.5, 1. ], [5.9, 3. , 4.2, 1.5], [6. , 2.2, 4. , 1. ], [6.1, 2.9, 4.7, 1.4], [5.6, 2.9, 3.6, 1.3], [6.7, 3.1, 4.4, 1.4], [5.6, 3. , 4.5, 1.5], [5.8, 2.7, 4.1, 1. ], [6.2, 2.2, 4.5, 1.5], [5.6, 2.5, 3.9, 1.1], [5.9, 3.2, 4.8, 1.8], [6.1, 2.8, 4. , 1.3], [6.3, 2.5, 4.9, 1.5], [6.1, 2.8, 4.7, 1.2], [6.4, 2.9, 4.3, 1.3], [6.6, 3. , 4.4, 1.4], [6.8, 2.8, 4.8, 1.4], [6.7, 3. , 5. , 1.7], [6. , 2.9, 4.5, 1.5], [5.7, 2.6, 3.5, 1. ], [5.5, 2.4, 3.8, 1.1], [5.5, 2.4, 3.7, 1. ], [5.8, 2.7, 3.9, 1.2], [6. , 2.7, 5.1, 1.6], [5.4, 3. , 4.5, 1.5], [6. , 3.4, 4.5, 1.6], [6.7, 3.1, 4.7, 1.5], [6.3, 2.3, 4.4, 1.3], [5.6, 3. , 4.1, 1.3], [5.5, 2.5, 4. , 1.3], [5.5, 2.6, 4.4, 1.2], [6.1, 3. , 4.6, 1.4], [5.8, 2.6, 4. , 1.2], [5. , 2.3, 3.3, 1. ], [5.6, 2.7, 4.2, 1.3], [5.7, 3. , 4.2, 1.2], [5.7, 2.9, 4.2, 1.3], [6.2, 2.9, 4.3, 1.3], [5.1, 2.5, 3. , 1.1], [5.7, 2.8, 4.1, 1.3], [6.3, 3.3, 6. , 2.5], [5.8, 2.7, 5.1, 1.9], [7.1, 3. , 5.9, 2.1], [6.3, 2.9, 5.6, 1.8], [6.5, 3. , 5.8, 2.2], [7.6, 3. , 6.6, 2.1], [4.9, 2.5, 4.5, 1.7], [7.3, 2.9, 6.3, 1.8], [6.7, 2.5, 5.8, 1.8], [7.2, 3.6, 6.1, 2.5], [6.5, 3.2, 5.1, 2. ], [6.4, 2.7, 5.3, 1.9], [6.8, 3. , 5.5, 2.1], [5.7, 2.5, 5. , 2. ], [5.8, 2.8, 5.1, 2.4], [6.4, 3.2, 5.3, 2.3], [6.5, 3. , 5.5, 1.8], [7.7, 3.8, 6.7, 2.2], [7.7, 2.6, 6.9, 2.3], [6. , 2.2, 5. , 1.5], [6.9, 3.2, 5.7, 2.3], [5.6, 2.8, 4.9, 2. ], [7.7, 2.8, 6.7, 2. ], [6.3, 2.7, 4.9, 1.8], [6.7, 3.3, 5.7, 2.1], [7.2, 3.2, 6. , 1.8], [6.2, 2.8, 4.8, 1.8], [6.1, 3. , 4.9, 1.8], [6.4, 2.8, 5.6, 2.1], [7.2, 3. , 5.8, 1.6], [7.4, 2.8, 6.1, 1.9], [7.9, 3.8, 6.4, 2. ], [6.4, 2.8, 5.6, 2.2], [6.3, 2.8, 5.1, 1.5], [6.1, 2.6, 5.6, 1.4], [7.7, 3. , 6.1, 2.3], [6.3, 3.4, 5.6, 2.4], [6.4, 3.1, 5.5, 1.8], [6. , 3. , 4.8, 1.8], [6.9, 3.1, 5.4, 2.1], [6.7, 3.1, 5.6, 2.4], [6.9, 3.1, 5.1, 2.3], [5.8, 2.7, 5.1, 1.9], [6.8, 3.2, 5.9, 2.3], [6.7, 3.3, 5.7, 2.5], [6.7, 3. , 5.2, 2.3], [6.3, 2.5, 5. , 1.9], [6.5, 3. , 5.2, 2. ], [6.2, 3.4, 5.4, 2.3], [5.9, 3. , 5.1, 1.8]]), array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), None, array([&#39;setosa&#39;, &#39;versicolor&#39;, &#39;virginica&#39;], dtype=&#39;&lt;U10&#39;), &#39;.. _iris_dataset: n nIris plants dataset n-- n n**Data Set Characteristics:** n n :Number of Instances: 150 (50 in each of three classes) n :Number of Attributes: 4 numeric, predictive attributes and the class n :Attribute Information: n - sepal length in cm n - sepal width in cm n - petal length in cm n - petal width in cm n - class: n - Iris-Setosa n - Iris-Versicolour n - Iris-Virginica n n :Summary Statistics: n n ============== ==== ==== ======= ===== ==================== n Min Max Mean SD Class Correlation n ============== ==== ==== ======= ===== ==================== n sepal length: 4.3 7.9 5.84 0.83 0.7826 n sepal width: 2.0 4.4 3.05 0.43 -0.4194 n petal length: 1.0 6.9 3.76 1.76 0.9490 (high!) n petal width: 0.1 2.5 1.20 0.76 0.9565 (high!) n ============== ==== ==== ======= ===== ==================== n n :Missing Attribute Values: None n :Class Distribution: 33.3% for each of 3 classes. n :Creator: R.A. Fisher n :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov) n :Date: July, 1988 n nThe famous Iris database, first used by Sir R.A. Fisher. The dataset is taken nfrom Fisher &#39;s paper. Note that it &#39;s the same as in R, but not as in the UCI nMachine Learning Repository, which has two wrong data points. n nThis is perhaps the best known database to be found in the npattern recognition literature. Fisher &#39;s paper is a classic in the field and nis referenced frequently to this day. (See Duda &amp; Hart, for example.) The ndata set contains 3 classes of 50 instances each, where each class refers to a ntype of iris plant. One class is linearly separable from the other 2; the nlatter are NOT linearly separable from each other. n n.. topic:: References n n - Fisher, R.A. &#34;The use of multiple measurements in taxonomic problems&#34; n Annual Eugenics, 7, Part II, 179-188 (1936); also in &#34;Contributions to n Mathematical Statistics&#34; (John Wiley, NY, 1950). n - Duda, R.O., &amp; Hart, P.E. (1973) Pattern Classification and Scene Analysis. n (Q327.D83) John Wiley &amp; Sons. ISBN 0-471-22361-1. See page 218. n - Dasarathy, B.V. (1980) &#34;Nosing Around the Neighborhood: A New System n Structure and Classification Rule for Recognition in Partially Exposed n Environments&#34;. IEEE Transactions on Pattern Analysis and Machine n Intelligence, Vol. PAMI-2, No. 1, 67-71. n - Gates, G.W. (1972) &#34;The Reduced Nearest Neighbor Rule&#34;. IEEE Transactions n on Information Theory, May 1972, 431-433. n - See also: 1988 MLC Proceedings, 54-64. Cheeseman et al&#34;s AUTOCLASS II n conceptual clustering system finds 3 classes in the data. n - Many, many more ...&#39;, [&#39;sepal length (cm)&#39;, &#39;sepal width (cm)&#39;, &#39;petal length (cm)&#39;, &#39;petal width (cm)&#39;], &#39;iris.csv&#39;, &#39;sklearn.datasets.data&#39;]) . print(type(iris_data.feature_names)) print(len(iris_data.feature_names)) print(iris_data.feature_names) . &lt;class &#39;list&#39;&gt; 4 [&#39;sepal length (cm)&#39;, &#39;sepal width (cm)&#39;, &#39;petal length (cm)&#39;, &#39;petal width (cm)&#39;] . print(type(iris_data.target_names)) print(len(iris_data.target_names)) print(iris_data.target_names) . &lt;class &#39;numpy.ndarray&#39;&gt; 3 [&#39;setosa&#39; &#39;versicolor&#39; &#39;virginica&#39;] . print(type(iris_data.data)) print(len(iris_data.data.shape)) print(iris_data.data) . &lt;class &#39;numpy.ndarray&#39;&gt; 2 [[5.1 3.5 1.4 0.2] [4.9 3. 1.4 0.2] [4.7 3.2 1.3 0.2] [4.6 3.1 1.5 0.2] [5. 3.6 1.4 0.2] [5.4 3.9 1.7 0.4] [4.6 3.4 1.4 0.3] [5. 3.4 1.5 0.2] [4.4 2.9 1.4 0.2] [4.9 3.1 1.5 0.1] [5.4 3.7 1.5 0.2] [4.8 3.4 1.6 0.2] [4.8 3. 1.4 0.1] [4.3 3. 1.1 0.1] [5.8 4. 1.2 0.2] [5.7 4.4 1.5 0.4] [5.4 3.9 1.3 0.4] [5.1 3.5 1.4 0.3] [5.7 3.8 1.7 0.3] [5.1 3.8 1.5 0.3] [5.4 3.4 1.7 0.2] [5.1 3.7 1.5 0.4] [4.6 3.6 1. 0.2] [5.1 3.3 1.7 0.5] [4.8 3.4 1.9 0.2] [5. 3. 1.6 0.2] [5. 3.4 1.6 0.4] [5.2 3.5 1.5 0.2] [5.2 3.4 1.4 0.2] [4.7 3.2 1.6 0.2] [4.8 3.1 1.6 0.2] [5.4 3.4 1.5 0.4] [5.2 4.1 1.5 0.1] [5.5 4.2 1.4 0.2] [4.9 3.1 1.5 0.2] [5. 3.2 1.2 0.2] [5.5 3.5 1.3 0.2] [4.9 3.6 1.4 0.1] [4.4 3. 1.3 0.2] [5.1 3.4 1.5 0.2] [5. 3.5 1.3 0.3] [4.5 2.3 1.3 0.3] [4.4 3.2 1.3 0.2] [5. 3.5 1.6 0.6] [5.1 3.8 1.9 0.4] [4.8 3. 1.4 0.3] [5.1 3.8 1.6 0.2] [4.6 3.2 1.4 0.2] [5.3 3.7 1.5 0.2] [5. 3.3 1.4 0.2] [7. 3.2 4.7 1.4] [6.4 3.2 4.5 1.5] [6.9 3.1 4.9 1.5] [5.5 2.3 4. 1.3] [6.5 2.8 4.6 1.5] [5.7 2.8 4.5 1.3] [6.3 3.3 4.7 1.6] [4.9 2.4 3.3 1. ] [6.6 2.9 4.6 1.3] [5.2 2.7 3.9 1.4] [5. 2. 3.5 1. ] [5.9 3. 4.2 1.5] [6. 2.2 4. 1. ] [6.1 2.9 4.7 1.4] [5.6 2.9 3.6 1.3] [6.7 3.1 4.4 1.4] [5.6 3. 4.5 1.5] [5.8 2.7 4.1 1. ] [6.2 2.2 4.5 1.5] [5.6 2.5 3.9 1.1] [5.9 3.2 4.8 1.8] [6.1 2.8 4. 1.3] [6.3 2.5 4.9 1.5] [6.1 2.8 4.7 1.2] [6.4 2.9 4.3 1.3] [6.6 3. 4.4 1.4] [6.8 2.8 4.8 1.4] [6.7 3. 5. 1.7] [6. 2.9 4.5 1.5] [5.7 2.6 3.5 1. ] [5.5 2.4 3.8 1.1] [5.5 2.4 3.7 1. ] [5.8 2.7 3.9 1.2] [6. 2.7 5.1 1.6] [5.4 3. 4.5 1.5] [6. 3.4 4.5 1.6] [6.7 3.1 4.7 1.5] [6.3 2.3 4.4 1.3] [5.6 3. 4.1 1.3] [5.5 2.5 4. 1.3] [5.5 2.6 4.4 1.2] [6.1 3. 4.6 1.4] [5.8 2.6 4. 1.2] [5. 2.3 3.3 1. ] [5.6 2.7 4.2 1.3] [5.7 3. 4.2 1.2] [5.7 2.9 4.2 1.3] [6.2 2.9 4.3 1.3] [5.1 2.5 3. 1.1] [5.7 2.8 4.1 1.3] [6.3 3.3 6. 2.5] [5.8 2.7 5.1 1.9] [7.1 3. 5.9 2.1] [6.3 2.9 5.6 1.8] [6.5 3. 5.8 2.2] [7.6 3. 6.6 2.1] [4.9 2.5 4.5 1.7] [7.3 2.9 6.3 1.8] [6.7 2.5 5.8 1.8] [7.2 3.6 6.1 2.5] [6.5 3.2 5.1 2. ] [6.4 2.7 5.3 1.9] [6.8 3. 5.5 2.1] [5.7 2.5 5. 2. ] [5.8 2.8 5.1 2.4] [6.4 3.2 5.3 2.3] [6.5 3. 5.5 1.8] [7.7 3.8 6.7 2.2] [7.7 2.6 6.9 2.3] [6. 2.2 5. 1.5] [6.9 3.2 5.7 2.3] [5.6 2.8 4.9 2. ] [7.7 2.8 6.7 2. ] [6.3 2.7 4.9 1.8] [6.7 3.3 5.7 2.1] [7.2 3.2 6. 1.8] [6.2 2.8 4.8 1.8] [6.1 3. 4.9 1.8] [6.4 2.8 5.6 2.1] [7.2 3. 5.8 1.6] [7.4 2.8 6.1 1.9] [7.9 3.8 6.4 2. ] [6.4 2.8 5.6 2.2] [6.3 2.8 5.1 1.5] [6.1 2.6 5.6 1.4] [7.7 3. 6.1 2.3] [6.3 3.4 5.6 2.4] [6.4 3.1 5.5 1.8] [6. 3. 4.8 1.8] [6.9 3.1 5.4 2.1] [6.7 3.1 5.6 2.4] [6.9 3.1 5.1 2.3] [5.8 2.7 5.1 1.9] [6.8 3.2 5.9 2.3] [6.7 3.3 5.7 2.5] [6.7 3. 5.2 2.3] [6.3 2.5 5. 1.9] [6.5 3. 5.2 2. ] [6.2 3.4 5.4 2.3] [5.9 3. 5.1 1.8]] . print(type(iris_data.target)) print(len(iris_data.target.shape)) print(iris_data.target) . &lt;class &#39;numpy.ndarray&#39;&gt; 1 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2] . train_label . NameError Traceback (most recent call last) Input In [19], in &lt;cell line: 1&gt;() -&gt; 1 train_label NameError: name &#39;train_label&#39; is not defined .",
            "url": "https://hyunwoo24.github.io/blog/2022/07/12/sklearn_iris.html",
            "relUrl": "/2022/07/12/sklearn_iris.html",
            "date": " • Jul 12, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "&#45936;&#51060;&#53552; &#51064;&#53076;&#46377; . label encoding | . from sklearn.preprocessing import LabelEncoder items = [&#39;TV&#39;, &#39;refrigerator&#39;, &#39;microwave&#39;, &#39;computer&#39;, &#39;pan&#39;, &#39;pan&#39;, &#39;mixer&#39;, &#39;mixer&#39;] # LabelEncoder를 객체로 생성한 후, fit()과 transform()으로 label 인코딩 수행 encoder = LabelEncoder() # 1. LabelEncoder를 객체로 생성 encoder.fit(items) # 2. 해당 객체에 fit() labels = encoder.transform(items) # 해당 객체에 trnsform() print(&#39;fit: &#39;, encoder.fit(items)) print(&#39;인코딩 변환값: &#39;, labels) . fit: LabelEncoder() 인코딩 변환값: [0 5 2 1 4 4 3 3] . labels = encoder.fit_transform(items) . print(&#39;인코딩 클래스: &#39;, encoder.classes_) . 인코딩 클래스: [&#39;TV&#39; &#39;computer&#39; &#39;microwave&#39; &#39;mixer&#39; &#39;pan&#39; &#39;refrigerator&#39;] . print(&#39;디코딩 원본 값: &#39;, encoder.inverse_transform([0, 5, 2, 1, 4, 4, 3, 3])) . 디코딩 원본 값: [&#39;TV&#39; &#39;refrigerator&#39; &#39;microwave&#39; &#39;computer&#39; &#39;pan&#39; &#39;pan&#39; &#39;mixer&#39; &#39;mixer&#39;] . One-Hot encoding | . from sklearn.preprocessing import OneHotEncoder import numpy as np items = [&#39;TV&#39;, &#39;refrigerator&#39;, &#39;microwave&#39;, &#39;computer&#39;, &#39;pan&#39;, &#39;pan&#39;, &#39;mixer&#39;, &#39;mixer&#39;] # transform 2-dimension ndarray items = np.array(items).reshape(-1, 1) # 원핫 인코딩 적용 oh_encoder = OneHotEncoder() oh_encoder.fit(items) oh_labels = oh_encoder.transform(items) # OneHotEncoder로 변환한 결과는 희소행렬(Spare Matrix)이므로 toarray()를 이용하여 밀집 행렬(Dense Matrix)로 변환 # 인코딩 변환값: [0 5 2 1 4 4 3 3] print(&#39;원핫 인코딩 데이터 n&#39;) print(oh_labels.toarray()) print(&#39;원핫 인코딩 데이터 차원&#39;) print(oh_labels.shape) . 원핫 인코딩 데이터 [[1. 0. 0. 0. 0. 0.] [0. 0. 0. 0. 0. 1.] [0. 0. 1. 0. 0. 0.] [0. 1. 0. 0. 0. 0.] [0. 0. 0. 0. 1. 0.] [0. 0. 0. 0. 1. 0.] [0. 0. 0. 1. 0. 0.] [0. 0. 0. 1. 0. 0.]] 원핫 인코딩 데이터 차원 (8, 6) . import pandas as pd df = pd.DataFrame({&#39;Item&#39;: [&#39;TV&#39;, &#39;refrigerator&#39;, &#39;microwave&#39;, &#39;computer&#39;, &#39;pan&#39;, &#39;pan&#39;, &#39;mixer&#39;, &#39;mixer&#39;]}) pd.get_dummies(df) . Item_TV Item_computer Item_microwave Item_mixer Item_pan Item_refrigerator . 0 1 | 0 | 0 | 0 | 0 | 0 | . 1 0 | 0 | 0 | 0 | 0 | 1 | . 2 0 | 0 | 1 | 0 | 0 | 0 | . 3 0 | 1 | 0 | 0 | 0 | 0 | . 4 0 | 0 | 0 | 0 | 1 | 0 | . 5 0 | 0 | 0 | 0 | 1 | 0 | . 6 0 | 0 | 0 | 1 | 0 | 0 | . 7 0 | 0 | 0 | 1 | 0 | 0 | . &#54588;&#52376; &#49828;&#52992;&#51068;&#47553;&#44284; &#51221;&#44508;&#54868; . StandardScaler | . from sklearn.datasets import load_iris import pandas as pd # iris 데이터셋을 로딩하고 DataFrame로 변환 iris = load_iris() iris_data = iris.data print(type(iris_data)) iris_df = pd.DataFrame(data=iris_data, columns=iris.feature_names) print(display(iris_df)) . &lt;class &#39;numpy.ndarray&#39;&gt; . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) . 0 5.1 | 3.5 | 1.4 | 0.2 | . 1 4.9 | 3.0 | 1.4 | 0.2 | . 2 4.7 | 3.2 | 1.3 | 0.2 | . 3 4.6 | 3.1 | 1.5 | 0.2 | . 4 5.0 | 3.6 | 1.4 | 0.2 | . ... ... | ... | ... | ... | . 145 6.7 | 3.0 | 5.2 | 2.3 | . 146 6.3 | 2.5 | 5.0 | 1.9 | . 147 6.5 | 3.0 | 5.2 | 2.0 | . 148 6.2 | 3.4 | 5.4 | 2.3 | . 149 5.9 | 3.0 | 5.1 | 1.8 | . 150 rows × 4 columns . None . print(&#39;feature 평균값&#39;) print(iris_df.mean()) print(&#39; nfeature 분산값&#39;) print(iris_df.std()) . feature 평균값 sepal length (cm) 5.843333 sepal width (cm) 3.057333 petal length (cm) 3.758000 petal width (cm) 1.199333 dtype: float64 feature 분산값 sepal length (cm) 0.828066 sepal width (cm) 0.435866 petal length (cm) 1.765298 petal width (cm) 0.762238 dtype: float64 . from sklearn.preprocessing import StandardScaler # StandardScaler 객체 생성 scaler = StandardScaler() # StandardScaler 로 데이터 셋 변환, fit()과 fransform() 호출 scaler.fit(iris_df) iris_scaled = scaler.transform(iris_df) print(display(iris_scaled)) . array([[-9.00681170e-01, 1.01900435e+00, -1.34022653e+00, -1.31544430e+00], [-1.14301691e+00, -1.31979479e-01, -1.34022653e+00, -1.31544430e+00], [-1.38535265e+00, 3.28414053e-01, -1.39706395e+00, -1.31544430e+00], [-1.50652052e+00, 9.82172869e-02, -1.28338910e+00, -1.31544430e+00], [-1.02184904e+00, 1.24920112e+00, -1.34022653e+00, -1.31544430e+00], [-5.37177559e-01, 1.93979142e+00, -1.16971425e+00, -1.05217993e+00], [-1.50652052e+00, 7.88807586e-01, -1.34022653e+00, -1.18381211e+00], [-1.02184904e+00, 7.88807586e-01, -1.28338910e+00, -1.31544430e+00], [-1.74885626e+00, -3.62176246e-01, -1.34022653e+00, -1.31544430e+00], [-1.14301691e+00, 9.82172869e-02, -1.28338910e+00, -1.44707648e+00], [-5.37177559e-01, 1.47939788e+00, -1.28338910e+00, -1.31544430e+00], [-1.26418478e+00, 7.88807586e-01, -1.22655167e+00, -1.31544430e+00], [-1.26418478e+00, -1.31979479e-01, -1.34022653e+00, -1.44707648e+00], [-1.87002413e+00, -1.31979479e-01, -1.51073881e+00, -1.44707648e+00], [-5.25060772e-02, 2.16998818e+00, -1.45390138e+00, -1.31544430e+00], [-1.73673948e-01, 3.09077525e+00, -1.28338910e+00, -1.05217993e+00], [-5.37177559e-01, 1.93979142e+00, -1.39706395e+00, -1.05217993e+00], [-9.00681170e-01, 1.01900435e+00, -1.34022653e+00, -1.18381211e+00], [-1.73673948e-01, 1.70959465e+00, -1.16971425e+00, -1.18381211e+00], [-9.00681170e-01, 1.70959465e+00, -1.28338910e+00, -1.18381211e+00], [-5.37177559e-01, 7.88807586e-01, -1.16971425e+00, -1.31544430e+00], [-9.00681170e-01, 1.47939788e+00, -1.28338910e+00, -1.05217993e+00], [-1.50652052e+00, 1.24920112e+00, -1.56757623e+00, -1.31544430e+00], [-9.00681170e-01, 5.58610819e-01, -1.16971425e+00, -9.20547742e-01], [-1.26418478e+00, 7.88807586e-01, -1.05603939e+00, -1.31544430e+00], [-1.02184904e+00, -1.31979479e-01, -1.22655167e+00, -1.31544430e+00], [-1.02184904e+00, 7.88807586e-01, -1.22655167e+00, -1.05217993e+00], [-7.79513300e-01, 1.01900435e+00, -1.28338910e+00, -1.31544430e+00], [-7.79513300e-01, 7.88807586e-01, -1.34022653e+00, -1.31544430e+00], [-1.38535265e+00, 3.28414053e-01, -1.22655167e+00, -1.31544430e+00], [-1.26418478e+00, 9.82172869e-02, -1.22655167e+00, -1.31544430e+00], [-5.37177559e-01, 7.88807586e-01, -1.28338910e+00, -1.05217993e+00], [-7.79513300e-01, 2.40018495e+00, -1.28338910e+00, -1.44707648e+00], [-4.16009689e-01, 2.63038172e+00, -1.34022653e+00, -1.31544430e+00], [-1.14301691e+00, 9.82172869e-02, -1.28338910e+00, -1.31544430e+00], [-1.02184904e+00, 3.28414053e-01, -1.45390138e+00, -1.31544430e+00], [-4.16009689e-01, 1.01900435e+00, -1.39706395e+00, -1.31544430e+00], [-1.14301691e+00, 1.24920112e+00, -1.34022653e+00, -1.44707648e+00], [-1.74885626e+00, -1.31979479e-01, -1.39706395e+00, -1.31544430e+00], [-9.00681170e-01, 7.88807586e-01, -1.28338910e+00, -1.31544430e+00], [-1.02184904e+00, 1.01900435e+00, -1.39706395e+00, -1.18381211e+00], [-1.62768839e+00, -1.74335684e+00, -1.39706395e+00, -1.18381211e+00], [-1.74885626e+00, 3.28414053e-01, -1.39706395e+00, -1.31544430e+00], [-1.02184904e+00, 1.01900435e+00, -1.22655167e+00, -7.88915558e-01], [-9.00681170e-01, 1.70959465e+00, -1.05603939e+00, -1.05217993e+00], [-1.26418478e+00, -1.31979479e-01, -1.34022653e+00, -1.18381211e+00], [-9.00681170e-01, 1.70959465e+00, -1.22655167e+00, -1.31544430e+00], [-1.50652052e+00, 3.28414053e-01, -1.34022653e+00, -1.31544430e+00], [-6.58345429e-01, 1.47939788e+00, -1.28338910e+00, -1.31544430e+00], [-1.02184904e+00, 5.58610819e-01, -1.34022653e+00, -1.31544430e+00], [ 1.40150837e+00, 3.28414053e-01, 5.35408562e-01, 2.64141916e-01], [ 6.74501145e-01, 3.28414053e-01, 4.21733708e-01, 3.95774101e-01], [ 1.28034050e+00, 9.82172869e-02, 6.49083415e-01, 3.95774101e-01], [-4.16009689e-01, -1.74335684e+00, 1.37546573e-01, 1.32509732e-01], [ 7.95669016e-01, -5.92373012e-01, 4.78571135e-01, 3.95774101e-01], [-1.73673948e-01, -5.92373012e-01, 4.21733708e-01, 1.32509732e-01], [ 5.53333275e-01, 5.58610819e-01, 5.35408562e-01, 5.27406285e-01], [-1.14301691e+00, -1.51316008e+00, -2.60315415e-01, -2.62386821e-01], [ 9.16836886e-01, -3.62176246e-01, 4.78571135e-01, 1.32509732e-01], [-7.79513300e-01, -8.22569778e-01, 8.07091462e-02, 2.64141916e-01], [-1.02184904e+00, -2.43394714e+00, -1.46640561e-01, -2.62386821e-01], [ 6.86617933e-02, -1.31979479e-01, 2.51221427e-01, 3.95774101e-01], [ 1.89829664e-01, -1.97355361e+00, 1.37546573e-01, -2.62386821e-01], [ 3.10997534e-01, -3.62176246e-01, 5.35408562e-01, 2.64141916e-01], [-2.94841818e-01, -3.62176246e-01, -8.98031345e-02, 1.32509732e-01], [ 1.03800476e+00, 9.82172869e-02, 3.64896281e-01, 2.64141916e-01], [-2.94841818e-01, -1.31979479e-01, 4.21733708e-01, 3.95774101e-01], [-5.25060772e-02, -8.22569778e-01, 1.94384000e-01, -2.62386821e-01], [ 4.32165405e-01, -1.97355361e+00, 4.21733708e-01, 3.95774101e-01], [-2.94841818e-01, -1.28296331e+00, 8.07091462e-02, -1.30754636e-01], [ 6.86617933e-02, 3.28414053e-01, 5.92245988e-01, 7.90670654e-01], [ 3.10997534e-01, -5.92373012e-01, 1.37546573e-01, 1.32509732e-01], [ 5.53333275e-01, -1.28296331e+00, 6.49083415e-01, 3.95774101e-01], [ 3.10997534e-01, -5.92373012e-01, 5.35408562e-01, 8.77547895e-04], [ 6.74501145e-01, -3.62176246e-01, 3.08058854e-01, 1.32509732e-01], [ 9.16836886e-01, -1.31979479e-01, 3.64896281e-01, 2.64141916e-01], [ 1.15917263e+00, -5.92373012e-01, 5.92245988e-01, 2.64141916e-01], [ 1.03800476e+00, -1.31979479e-01, 7.05920842e-01, 6.59038469e-01], [ 1.89829664e-01, -3.62176246e-01, 4.21733708e-01, 3.95774101e-01], [-1.73673948e-01, -1.05276654e+00, -1.46640561e-01, -2.62386821e-01], [-4.16009689e-01, -1.51316008e+00, 2.38717193e-02, -1.30754636e-01], [-4.16009689e-01, -1.51316008e+00, -3.29657076e-02, -2.62386821e-01], [-5.25060772e-02, -8.22569778e-01, 8.07091462e-02, 8.77547895e-04], [ 1.89829664e-01, -8.22569778e-01, 7.62758269e-01, 5.27406285e-01], [-5.37177559e-01, -1.31979479e-01, 4.21733708e-01, 3.95774101e-01], [ 1.89829664e-01, 7.88807586e-01, 4.21733708e-01, 5.27406285e-01], [ 1.03800476e+00, 9.82172869e-02, 5.35408562e-01, 3.95774101e-01], [ 5.53333275e-01, -1.74335684e+00, 3.64896281e-01, 1.32509732e-01], [-2.94841818e-01, -1.31979479e-01, 1.94384000e-01, 1.32509732e-01], [-4.16009689e-01, -1.28296331e+00, 1.37546573e-01, 1.32509732e-01], [-4.16009689e-01, -1.05276654e+00, 3.64896281e-01, 8.77547895e-04], [ 3.10997534e-01, -1.31979479e-01, 4.78571135e-01, 2.64141916e-01], [-5.25060772e-02, -1.05276654e+00, 1.37546573e-01, 8.77547895e-04], [-1.02184904e+00, -1.74335684e+00, -2.60315415e-01, -2.62386821e-01], [-2.94841818e-01, -8.22569778e-01, 2.51221427e-01, 1.32509732e-01], [-1.73673948e-01, -1.31979479e-01, 2.51221427e-01, 8.77547895e-04], [-1.73673948e-01, -3.62176246e-01, 2.51221427e-01, 1.32509732e-01], [ 4.32165405e-01, -3.62176246e-01, 3.08058854e-01, 1.32509732e-01], [-9.00681170e-01, -1.28296331e+00, -4.30827696e-01, -1.30754636e-01], [-1.73673948e-01, -5.92373012e-01, 1.94384000e-01, 1.32509732e-01], [ 5.53333275e-01, 5.58610819e-01, 1.27429511e+00, 1.71209594e+00], [-5.25060772e-02, -8.22569778e-01, 7.62758269e-01, 9.22302838e-01], [ 1.52267624e+00, -1.31979479e-01, 1.21745768e+00, 1.18556721e+00], [ 5.53333275e-01, -3.62176246e-01, 1.04694540e+00, 7.90670654e-01], [ 7.95669016e-01, -1.31979479e-01, 1.16062026e+00, 1.31719939e+00], [ 2.12851559e+00, -1.31979479e-01, 1.61531967e+00, 1.18556721e+00], [-1.14301691e+00, -1.28296331e+00, 4.21733708e-01, 6.59038469e-01], [ 1.76501198e+00, -3.62176246e-01, 1.44480739e+00, 7.90670654e-01], [ 1.03800476e+00, -1.28296331e+00, 1.16062026e+00, 7.90670654e-01], [ 1.64384411e+00, 1.24920112e+00, 1.33113254e+00, 1.71209594e+00], [ 7.95669016e-01, 3.28414053e-01, 7.62758269e-01, 1.05393502e+00], [ 6.74501145e-01, -8.22569778e-01, 8.76433123e-01, 9.22302838e-01], [ 1.15917263e+00, -1.31979479e-01, 9.90107977e-01, 1.18556721e+00], [-1.73673948e-01, -1.28296331e+00, 7.05920842e-01, 1.05393502e+00], [-5.25060772e-02, -5.92373012e-01, 7.62758269e-01, 1.58046376e+00], [ 6.74501145e-01, 3.28414053e-01, 8.76433123e-01, 1.44883158e+00], [ 7.95669016e-01, -1.31979479e-01, 9.90107977e-01, 7.90670654e-01], [ 2.24968346e+00, 1.70959465e+00, 1.67215710e+00, 1.31719939e+00], [ 2.24968346e+00, -1.05276654e+00, 1.78583195e+00, 1.44883158e+00], [ 1.89829664e-01, -1.97355361e+00, 7.05920842e-01, 3.95774101e-01], [ 1.28034050e+00, 3.28414053e-01, 1.10378283e+00, 1.44883158e+00], [-2.94841818e-01, -5.92373012e-01, 6.49083415e-01, 1.05393502e+00], [ 2.24968346e+00, -5.92373012e-01, 1.67215710e+00, 1.05393502e+00], [ 5.53333275e-01, -8.22569778e-01, 6.49083415e-01, 7.90670654e-01], [ 1.03800476e+00, 5.58610819e-01, 1.10378283e+00, 1.18556721e+00], [ 1.64384411e+00, 3.28414053e-01, 1.27429511e+00, 7.90670654e-01], [ 4.32165405e-01, -5.92373012e-01, 5.92245988e-01, 7.90670654e-01], [ 3.10997534e-01, -1.31979479e-01, 6.49083415e-01, 7.90670654e-01], [ 6.74501145e-01, -5.92373012e-01, 1.04694540e+00, 1.18556721e+00], [ 1.64384411e+00, -1.31979479e-01, 1.16062026e+00, 5.27406285e-01], [ 1.88617985e+00, -5.92373012e-01, 1.33113254e+00, 9.22302838e-01], [ 2.49201920e+00, 1.70959465e+00, 1.50164482e+00, 1.05393502e+00], [ 6.74501145e-01, -5.92373012e-01, 1.04694540e+00, 1.31719939e+00], [ 5.53333275e-01, -5.92373012e-01, 7.62758269e-01, 3.95774101e-01], [ 3.10997534e-01, -1.05276654e+00, 1.04694540e+00, 2.64141916e-01], [ 2.24968346e+00, -1.31979479e-01, 1.33113254e+00, 1.44883158e+00], [ 5.53333275e-01, 7.88807586e-01, 1.04694540e+00, 1.58046376e+00], [ 6.74501145e-01, 9.82172869e-02, 9.90107977e-01, 7.90670654e-01], [ 1.89829664e-01, -1.31979479e-01, 5.92245988e-01, 7.90670654e-01], [ 1.28034050e+00, 9.82172869e-02, 9.33270550e-01, 1.18556721e+00], [ 1.03800476e+00, 9.82172869e-02, 1.04694540e+00, 1.58046376e+00], [ 1.28034050e+00, 9.82172869e-02, 7.62758269e-01, 1.44883158e+00], [-5.25060772e-02, -8.22569778e-01, 7.62758269e-01, 9.22302838e-01], [ 1.15917263e+00, 3.28414053e-01, 1.21745768e+00, 1.44883158e+00], [ 1.03800476e+00, 5.58610819e-01, 1.10378283e+00, 1.71209594e+00], [ 1.03800476e+00, -1.31979479e-01, 8.19595696e-01, 1.44883158e+00], [ 5.53333275e-01, -1.28296331e+00, 7.05920842e-01, 9.22302838e-01], [ 7.95669016e-01, -1.31979479e-01, 8.19595696e-01, 1.05393502e+00], [ 4.32165405e-01, 7.88807586e-01, 9.33270550e-01, 1.44883158e+00], [ 6.86617933e-02, -1.31979479e-01, 7.62758269e-01, 7.90670654e-01]]) . None . iris_df_scaled = pd.DataFrame(data = iris_scaled, columns = iris.feature_names) print(iris_df_scaled) print(&#39; n feature 평균값&#39;) print(iris_df_scaled.mean()) print(&#39; n feature 분산값&#39;) print(iris_df_scaled.std()) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 0 -0.900681 1.019004 -1.340227 -1.315444 1 -1.143017 -0.131979 -1.340227 -1.315444 2 -1.385353 0.328414 -1.397064 -1.315444 3 -1.506521 0.098217 -1.283389 -1.315444 4 -1.021849 1.249201 -1.340227 -1.315444 .. ... ... ... ... 145 1.038005 -0.131979 0.819596 1.448832 146 0.553333 -1.282963 0.705921 0.922303 147 0.795669 -0.131979 0.819596 1.053935 148 0.432165 0.788808 0.933271 1.448832 149 0.068662 -0.131979 0.762758 0.790671 [150 rows x 4 columns] feature 평균값 sepal length (cm) -1.690315e-15 sepal width (cm) -1.842970e-15 petal length (cm) -1.698641e-15 petal width (cm) -1.409243e-15 dtype: float64 feature 분산값 sepal length (cm) 1.00335 sepal width (cm) 1.00335 petal length (cm) 1.00335 petal width (cm) 1.00335 dtype: float64 . MinMaxScaler | . from sklearn.preprocessing import MinMaxScaler # MinMaxScaler 객체 생성 scaler = MinMaxScaler() # MinMaxSclaer 로 데이터 셋 변환, fit()과 transform() 호출 scaler.fit(iris_df) iris_scaled = scaler.transform(iris_df) # transform() 시 scale 변환된 데이터 셋이 numpy ndarray로 반환되어 이를 DataFrame으로 변환 iris_df_scaled = pd.DataFrame(data=iris_scaled, columns=iris.feature_names) print(iris_df_scaled) print(&#39; n feature 평균값&#39;) print(iris_df_scaled.mean()) print(&#39; n feature 분산값&#39;) print(iris_df_scaled.std()) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) 0 0.222222 0.625000 0.067797 0.041667 1 0.166667 0.416667 0.067797 0.041667 2 0.111111 0.500000 0.050847 0.041667 3 0.083333 0.458333 0.084746 0.041667 4 0.194444 0.666667 0.067797 0.041667 .. ... ... ... ... 145 0.666667 0.416667 0.711864 0.916667 146 0.555556 0.208333 0.677966 0.750000 147 0.611111 0.416667 0.711864 0.791667 148 0.527778 0.583333 0.745763 0.916667 149 0.444444 0.416667 0.694915 0.708333 [150 rows x 4 columns] feature 평균값 sepal length (cm) 0.428704 sepal width (cm) 0.440556 petal length (cm) 0.467458 petal width (cm) 0.458056 dtype: float64 feature 분산값 sepal length (cm) 0.230018 sepal width (cm) 0.181611 petal length (cm) 0.299203 petal width (cm) 0.317599 dtype: float64 . Scaler를 이용하여 학습 데이터와 테스트데이터에 | fit(), transform(), fit_transform() 적용 시 유의사항 | . from sklearn.preprocessing import MinMaxScaler import numpy as np # 학습 데이터는 0 부터 10까지, 테스트 데이터는 0부터 4까지 값을 가지는 데이터 세트로 생성 # Scaler 클래스의 fit, trainsform()은 2차원 이상 데이터만 가능하므로 reshape(-1, 1)로 차원 변경 train_array = np.arange(0, 11).reshape(-1, 1) test_array = np.arange(0, 6).reshape(-1, 1) . #최소값 0, 최대값 1로 변환하는 MinMaxScaler 객체 생성 scaler = MinMaxScaler() # fit() 하게 되면 train_array 데이터의 최소값이 0, 최대값이 10으로 설정 scaler.fit(train_array) # 1/10 scaler 로 train_array 데이터 변환함, 원본 10 -&gt; 1로 변환됨. train_scaled = scaler.transform(train_array) print(&#39;원본 train_array 데이터: &#39;, np.round(train_array.reshape(-1), 2)) # 1차원 ndarray로 변환 .reshape(-1) print(&#39;Scale 된 train_array 데이터: &#39;, np.round(train_scaled.reshape(-1), 2)) . 원본 train_array 데이터: [ 0 1 2 3 4 5 6 7 8 9 10] Scale 된 train_array 데이터: [0. 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ] . # 앞에서 생성한 MinMaxScaler에 test_array를 fit()하게 되면 원본 데이터의 최소값이 0, 최대값이 5로 설정됨 scaler.fit(test_array) # 1/5 scaler로 test_array 데이터 변환함, 원본 5-&gt;1로 변환. test_scaled = scaler.transform(test_array) # train_array 변환 출력 print(&#39;원본 test_array 데이터: &#39;, np.round(test_array.reshape(-1), 2)) # 1차원 ndarray로 변환 .reshape(-1) print(&#39;scale 된 test_array 데이터: &#39;, np.round(test_scaled.reshape(-1), 2)) . 원본 test_array 데이터: [0 1 2 3 4 5] scale 된 test_array 데이터: [0. 0.2 0.4 0.6 0.8 1. ] . scaler = MinMaxScaler() scaler.fit(train_array) # train 데이터 척도 기준 train_scaled = scaler.transform(train_array) print(&#39;원본 train_array 데이터: &#39;, np.round(train_array.reshape(-1), 2)) print(&#39;Scale 된 train_array 데이터: &#39;, np.round(train_scaled.reshape(-1), 2)) # test_array에 Scale 변환을 할 때는 반드시 fit()을 호출하지 않고 transform 만으로 변환해야 함 test_scaled = scaler.transform(test_array) # train 데이터 척도 기준 print(&#39;원본 test_array 데이터: &#39;, np.round(test_array.reshape(-1), 2)) # 1차원 ndarray로 변환 .reshape(-1) print(&#39;scale 된 test_array 데이터: &#39;, np.round(test_scaled.reshape(-1), 2)) . 원본 train_array 데이터: [ 0 1 2 3 4 5 6 7 8 9 10] Scale 된 train_array 데이터: [0. 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ] 원본 test_array 데이터: [0 1 2 3 4 5] scale 된 test_array 데이터: [0. 0.1 0.2 0.3 0.4 0.5] .",
            "url": "https://hyunwoo24.github.io/blog/2022/07/12/preprocessing.html",
            "relUrl": "/2022/07/12/preprocessing.html",
            "date": " • Jul 12, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Title",
            "content": "&#54617;&#49845;/&#45936;&#51060;&#53552; &#45936;&#51060;&#53552; &#49483; &#48516;&#47532;-train_test_split() . from sklearn.datasets import load_iris from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import accuracy_score iris = load_iris() dt_clf = DecisionTreeClassifier() train_data = iris.data train_label = iris.target dt_clf.fit(train_data, train_label) # 학습 데이터 셋으로 예측 수행 &gt; 당연히 100% 정확도 pred = dt_clf.predict(train_data) print(&#39;예측 정확도:&#39;,accuracy_score(train_label,pred)) . 예측 정확도: 1.0 . from sklearn.datasets import load_iris from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import accuracy_score from sklearn.model_selection import train_test_split dt_clf = DecisionTreeClassifier() iris_data = load_iris() X_train, X_test, y_train, y_test = train_test_split(iris_data.data, iris_data.target , test_size=0.3, random_state=121) . dt_clf.fit(X_train, y_train) pred = dt_clf.predict(X_test) print(&#39;예측정확도: {0: .4f}&#39;.format(accuracy_score(y_test, pred))) . 예측정확도: 0.9556 . narray, DataFrame/Series : train_test_split()로 분할 가능 | . import pandas as pd iris_df = pd.DataFrame(iris_data.data, columns=iris_data.feature_names) iris_df[&#39;tager&#39;]=iris_data.target iris_df.head() . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) tager . 0 5.1 | 3.5 | 1.4 | 0.2 | 0 | . 1 4.9 | 3.0 | 1.4 | 0.2 | 0 | . 2 4.7 | 3.2 | 1.3 | 0.2 | 0 | . 3 4.6 | 3.1 | 1.5 | 0.2 | 0 | . 4 5.0 | 3.6 | 1.4 | 0.2 | 0 | . ftr_df = iris_df.iloc[:, :-1] tgt_df = iris_df.iloc[:, -1] X_train, X_test, y_train, y_test = train_test_split(ftr_df, tgt_df, test_size=0.3, random_state=121) . print(type(X_train), type(X_test), type(y_train), type(y_test)) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; &lt;class &#39;pandas.core.series.Series&#39;&gt; &lt;class &#39;pandas.core.series.Series&#39;&gt; . dt_clf = DecisionTreeClassifier() dt_clf.fit(X_train, y_train) pred = dt_clf.predict(X_test) print(&#39;예측 정확도: {0:.4f}&#39;.format(accuracy_score(y_test, pred))) . 예측 정확도: 0.9556 . &#44368;&#52264;&#44160;&#51613; . K 폴드 | . from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import accuracy_score from sklearn.model_selection import KFold import numpy as np iris = load_iris() features = iris.data label = iris.target dt_clf = DecisionTreeClassifier(random_state = 156) # 5개의 폴드 세트로 분리해 KFlod 객체와 폴드 세트별 정확도를 담을 리스트 객체 생성 kflod = KFold(n_splits=5) cv_accuracy=[] print(&#39;iris data set size: &#39;, features.shape[0]) . iris data set size: 150 . n_iter = 0 # KFlod 객체의 split() 호출하면 폴드별 학습용, 검증용 테스트의 로우 인덱스를 array로 반환 for train_index, test_index in kflod.split(features): # kflod.split()으로 반환된 인덱스를 이용하여 학습용, 검증용 테스트 데이터 추출 X_train, X_test = features[train_index], features[test_index] y_train, y_test = label[train_index], label[test_index] # 학습 및 예측 dt_clf.fit(X_train, y_train) pred = dt_clf.predict(X_test) n_iter +=1 # 반복 시 마다 정확도 측정 accuracy = np.round(accuracy_score(y_test, pred), 4) train_size = X_train.shape[0] test_size = X_test.shape[0] print(&#39; n# {0} 교차 검증 정확도 :{1}, 학습 데이터 크기: {2}, 검증 데이터 크기: {3}&#39; .format(n_iter, accuracy, train_size, test_size)) print(&#39; n#{0} 검증 세트 인덱스 :{1}&#39;.format(n_iter, test_index)) cv_accuracy.append(accuracy) # 개별 iteration별 정확도를 합하여 평균 정확도 계산 print(&#39; n## 평균 검증 정확도:&#39;, np.mean(cv_accuracy)) . # 1 교차 검증 정확도 :1.0, 학습 데이터 크기: 120, 검증 데이터 크기: 30 #1 검증 세트 인덱스 :[ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29] # 2 교차 검증 정확도 :0.9667, 학습 데이터 크기: 120, 검증 데이터 크기: 30 #2 검증 세트 인덱스 :[30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59] # 3 교차 검증 정확도 :0.8667, 학습 데이터 크기: 120, 검증 데이터 크기: 30 #3 검증 세트 인덱스 :[60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89] # 4 교차 검증 정확도 :0.9333, 학습 데이터 크기: 120, 검증 데이터 크기: 30 #4 검증 세트 인덱스 :[ 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119] # 5 교차 검증 정확도 :0.7333, 학습 데이터 크기: 120, 검증 데이터 크기: 30 #5 검증 세트 인덱스 :[120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149] ## 평균 검증 정확도: 0.9 . features.shape . (150, 4) . Stratified K 폴드 | . import pandas as pd iris = load_iris() iris_df = pd.DataFrame(data = iris.data, columns=iris.feature_names) iris_df[&#39;label&#39;] = iris.target iris_df[&#39;label&#39;].value_counts() . 0 50 1 50 2 50 Name: label, dtype: int64 . kfold = KFold(n_splits = 3) # kflod.split(X)는 폴드 세트를 3번 반복할 때마다 달라지는 학습/테스트 용 데이터 로우 인덱스 번호 반환. n_iter=0 for train_index, test_index in kfold.split(iris_df): n_iter += 1 label_train = iris_df[&#39;label&#39;].iloc[train_index] label_test = iris_df[&#39;label&#39;].iloc[test_index] print(&#39;## 교차 검증: {0}&#39;.format(n_iter)) print(&#39;학습 레이블 데이터 분포: n&#39;, label_train.value_counts()) print(&#39;검증 레이블 데이터 분포: n&#39;, label_test.value_counts()) print(&#39; n&#39;) # 오류: 0,1,2 각 그룹 별로 50개씩 나누게 되면 &quot;학습&gt;테스트&quot; 과정에서 불균형이 발생함 # 개선: 0,1,2 각 그룹 별로 섞어서 50개씩 나눠서 학습&gt;테스트&quot; 필요 . ## 교차 검증: 1 학습 레이블 데이터 분포: 1 50 2 50 Name: label, dtype: int64 검증 레이블 데이터 분포: 0 50 Name: label, dtype: int64 ## 교차 검증: 2 학습 레이블 데이터 분포: 0 50 2 50 Name: label, dtype: int64 검증 레이블 데이터 분포: 1 50 Name: label, dtype: int64 ## 교차 검증: 3 학습 레이블 데이터 분포: 0 50 1 50 Name: label, dtype: int64 검증 레이블 데이터 분포: 2 50 Name: label, dtype: int64 . from sklearn.model_selection import StratifiedKFold skf = StratifiedKFold(n_splits=3) n_iter = 0 for train_index, test_index in skf.split(iris_df, iris_df[&#39;label&#39;]): n_iter += 1 label_train = iris_df[&#39;label&#39;].iloc[train_index] label_test = iris_df[&#39;label&#39;].iloc[test_index] print(&#39;## 교차 검증: {0}&#39;.format(n_iter)) print(&#39;학습 레이블 데이터 분포: n&#39;, label_train.value_counts()) print(&#39;검증 레이블 데이터 분포: n&#39;, label_test.value_counts()) print(&#39; n&#39;) . ## 교차 검증: 1 학습 레이블 데이터 분포: 2 34 0 33 1 33 Name: label, dtype: int64 검증 레이블 데이터 분포: 0 17 1 17 2 16 Name: label, dtype: int64 ## 교차 검증: 2 학습 레이블 데이터 분포: 1 34 0 33 2 33 Name: label, dtype: int64 검증 레이블 데이터 분포: 0 17 2 17 1 16 Name: label, dtype: int64 ## 교차 검증: 3 학습 레이블 데이터 분포: 0 34 1 33 2 33 Name: label, dtype: int64 검증 레이블 데이터 분포: 1 17 2 17 0 16 Name: label, dtype: int64 . dt_clf = DecisionTreeClassifier(random_state=156) skfold = StratifiedKFold(n_splits = 3) n_iter = 0 cv_accuracy = [] # StratifiedKFold의 split() 호출 시 반드시 레이블 데이터 셋도 추가 입력 필요 for train_index, test_index in skfold.split(features, label): # split()으로 반환된 인덱스를 이용하여 학습용, 검증용 테스트 데이터 추출 X_train, X_test = features[train_index], features[test_index] y_train, y_test = label[train_index], label[test_index] # 학습 및 예측 dt_clf.fit(X_train, y_train) pred = dt_clf.predict(X_test) #반복 시 마다 정확도 측정 n_iter += 1 accuracy = np.round(accuracy_score(y_test, pred), 4) train_size = X_train.shape[0] test_size = X_test.shape[0] print(&#39; n#{0} 교차 검증 정확도 :{1}, 학습 데이터 크기: {2}, 검증 데이터 크기: {3}&#39; .format(n_iter, accuracy, train_size, test_size)) print(&#39;#{0} 검증 세트 인덱스: {1}&#39;.format(n_iter, test_index)) cv_accuracy.append(accuracy) # 교차 검증별 정확도 및 평균 정확도 계산 print(&#39; n## 교차 검증별 정확도:&#39;, np.round(cv_accuracy, 4)) print(&#39;## 평균 검증 정확도: &#39;, np.mean(cv_accuracy)) . #1 교차 검증 정확도 :0.98, 학습 데이터 크기: 100, 검증 데이터 크기: 50 #1 검증 세트 인덱스: [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115] #2 교차 검증 정확도 :0.94, 학습 데이터 크기: 100, 검증 데이터 크기: 50 #2 검증 세트 인덱스: [ 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132] #3 교차 검증 정확도 :0.98, 학습 데이터 크기: 100, 검증 데이터 크기: 50 #3 검증 세트 인덱스: [ 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149] ## 교차 검증별 정확도: [0.98 0.94 0.98] ## 평균 검증 정확도: 0.9666666666666667 . cross_val_score() | . from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import cross_val_score from sklearn.datasets import load_iris import numpy as np iris_data = load_iris() dt_clf = DecisionTreeClassifier(random_state = 156) data = iris_data.data label = iris_data.target # 성능 지표는 정확도(accuracy), 교차 검증 세트는 3개 scores = cross_val_score(dt_clf, data, label, scoring = &#39;accuracy&#39;, cv = 3) print(&#39;교차 검증별 정확도: &#39;, np.round(scores, 4)) print(&#39;평균 검증 정확도: &#39;, np.round(np.mean(scores), 4)) # 분류는 StratifitedKFold 사용, 회귀는 사용불가능 # cross_val_score 는 StratifitedKFold 사용 . 교차 검증별 정확도: [0.98 0.94 0.98] 평균 검증 정확도: 0.9667 . GridSearchCV | . from sklearn.datasets import load_iris from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import GridSearchCV, train_test_split from sklearn.metrics import accuracy_score iris = load_iris() X_train, X_test, y_train, y_test = train_test_split(iris_data.data, iris_data.target, test_size = 0.2, random_state = 121) dtree = DecisionTreeClassifier() ### parameter를 dictionary 형태로 설정 parameters = {&#39;max_depth&#39;: [ 1, 2, 3], &#39;min_samples_split&#39;: [2, 3]} . import pandas as pd # param_grid의 하이퍼 파라미터들을 3개의 train, test set fold로 나눠 테스트 수행 설정 ### refit=True 가 default, True이면 가장 좋은 파라미터 설정으로 재학습 시킴 grid_dtree = GridSearchCV(dtree, param_grid=parameters, cv=3, refit=True, return_train_score=True) # Iris Train 데이터로 param_grid의 하이퍼 파라미터들을 순차적으로 학습/평가 grid_dtree.fit(X_train, y_train) # GridSearchCV 결과는 cv_results_ 라는 딕셔너리로 저장, 이를 DataFrame으로 변환 scores_df = pd.DataFrame(grid_dtree.cv_results_) scores_df[[&#39;params&#39;, &#39;mean_test_score&#39;, &#39;rank_test_score&#39;, &#39;split0_test_score&#39;, &#39;split1_test_score&#39;, &#39;split2_test_score&#39;]] . params mean_test_score rank_test_score split0_test_score split1_test_score split2_test_score . 0 {&#39;max_depth&#39;: 1, &#39;min_samples_split&#39;: 2} | 0.700000 | 5 | 0.700 | 0.7 | 0.70 | . 1 {&#39;max_depth&#39;: 1, &#39;min_samples_split&#39;: 3} | 0.700000 | 5 | 0.700 | 0.7 | 0.70 | . 2 {&#39;max_depth&#39;: 2, &#39;min_samples_split&#39;: 2} | 0.958333 | 3 | 0.925 | 1.0 | 0.95 | . 3 {&#39;max_depth&#39;: 2, &#39;min_samples_split&#39;: 3} | 0.958333 | 3 | 0.925 | 1.0 | 0.95 | . 4 {&#39;max_depth&#39;: 3, &#39;min_samples_split&#39;: 2} | 0.975000 | 1 | 0.975 | 1.0 | 0.95 | . 5 {&#39;max_depth&#39;: 3, &#39;min_samples_split&#39;: 3} | 0.975000 | 1 | 0.975 | 1.0 | 0.95 | . grid_dtree.cv_results_ . {&#39;mean_fit_time&#39;: array([0.00066551, 0.00033188, 0. , 0.00033347, 0. , 0. ]), &#39;std_fit_time&#39;: array([0.00047058, 0.00046935, 0. , 0.0004716 , 0. , 0. ]), &#39;mean_score_time&#39;: array([0. , 0.00033315, 0. , 0.00100835, 0.00099746, 0.00099675]), &#39;std_score_time&#39;: array([0.00000000e+00, 4.71145571e-04, 0.00000000e+00, 1.69990199e-05, 9.19964862e-07, 8.10467325e-07]), &#39;param_max_depth&#39;: masked_array(data=[1, 1, 2, 2, 3, 3], mask=[False, False, False, False, False, False], fill_value=&#39;?&#39;, dtype=object), &#39;param_min_samples_split&#39;: masked_array(data=[2, 3, 2, 3, 2, 3], mask=[False, False, False, False, False, False], fill_value=&#39;?&#39;, dtype=object), &#39;params&#39;: [{&#39;max_depth&#39;: 1, &#39;min_samples_split&#39;: 2}, {&#39;max_depth&#39;: 1, &#39;min_samples_split&#39;: 3}, {&#39;max_depth&#39;: 2, &#39;min_samples_split&#39;: 2}, {&#39;max_depth&#39;: 2, &#39;min_samples_split&#39;: 3}, {&#39;max_depth&#39;: 3, &#39;min_samples_split&#39;: 2}, {&#39;max_depth&#39;: 3, &#39;min_samples_split&#39;: 3}], &#39;split0_test_score&#39;: array([0.7 , 0.7 , 0.925, 0.925, 0.975, 0.975]), &#39;split1_test_score&#39;: array([0.7, 0.7, 1. , 1. , 1. , 1. ]), &#39;split2_test_score&#39;: array([0.7 , 0.7 , 0.95, 0.95, 0.95, 0.95]), &#39;mean_test_score&#39;: array([0.7 , 0.7 , 0.95833333, 0.95833333, 0.975 , 0.975 ]), &#39;std_test_score&#39;: array([1.11022302e-16, 1.11022302e-16, 3.11804782e-02, 3.11804782e-02, 2.04124145e-02, 2.04124145e-02]), &#39;rank_test_score&#39;: array([5, 5, 3, 3, 1, 1]), &#39;split0_train_score&#39;: array([0.7 , 0.7 , 0.975 , 0.975 , 0.9875, 0.9875]), &#39;split1_train_score&#39;: array([0.7 , 0.7 , 0.9375, 0.9375, 0.9625, 0.9625]), &#39;split2_train_score&#39;: array([0.7 , 0.7 , 0.9625, 0.9625, 0.9875, 0.9875]), &#39;mean_train_score&#39;: array([0.7 , 0.7 , 0.95833333, 0.95833333, 0.97916667, 0.97916667]), &#39;std_train_score&#39;: array([1.11022302e-16, 1.11022302e-16, 1.55902391e-02, 1.55902391e-02, 1.17851130e-02, 1.17851130e-02])} . print(&#39;GridSearchCV 최적 파라미터: &#39;, grid_dtree.best_params_) print(&#39;GridSearchCV 최고 정확도: {0: .4f}&#39;.format(grid_dtree.best_score_)) # refit = True로 설정된 GridSearchCV 객체가 fit()을 수행 시 학습이 완료된 Estimator를 내고 하고 있으므로 # predict()를 통해 예측도 가능 pred = grid_dtree.predict(X_test) print(&#39;테스트 데이터 세트 정확도: {0: .4f}&#39;.format(accuracy_score(y_test, pred))) . GridSearchCV 최적 파라미터: {&#39;max_depth&#39;: 3, &#39;min_samples_split&#39;: 2} GridSearchCV 최고 정확도: 0.9750 테스트 데이터 세트 정확도: 0.9667 . estimator = grid_dtree.best_estimator_ # GridSearchCV의 best_estimator_는 이미 최적 파라미터로 학습 됨 pred = estimator.predict(X_test) print(&#39;테스트 데이터 세트 정확도 {0: .4f}&#39;.format(accuracy_score(y_test, pred))) . 테스트 데이터 세트 정확도 0.9667 . grid_dtree . GridSearchCV(cv=3, estimator=DecisionTreeClassifier(), param_grid={&#39;max_depth&#39;: [1, 2, 3], &#39;min_samples_split&#39;: [2, 3]}, return_train_score=True) . grid_dtree.best_index_ . 4 . pred = grid_dtree.predict(X_test) estimator = grid_dtree.best_estimator_ pred = estimator.predict(X_test) .",
            "url": "https://hyunwoo24.github.io/blog/2022/07/12/model_selection.html",
            "relUrl": "/2022/07/12/model_selection.html",
            "date": " • Jul 12, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": "Pandas &#49884;&#51089;-&#54028;&#51068;&#51012; DataFrame &#47196;&#46377;, &#44592;&#48376; API . import pandas as pd . pd.__version__ . &#39;1.3.4&#39; . read_csv() . titanic_df = pd.read_csv(&#39;./train.csv&#39;) print(type(titanic_df)) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; . titanic_df.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . titanic_df.tail() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 886 887 | 0 | 2 | Montvila, Rev. Juozas | male | 27.0 | 0 | 0 | 211536 | 13.00 | NaN | S | . 887 888 | 1 | 1 | Graham, Miss. Margaret Edith | female | 19.0 | 0 | 0 | 112053 | 30.00 | B42 | S | . 888 889 | 0 | 3 | Johnston, Miss. Catherine Helen &quot;Carrie&quot; | female | NaN | 1 | 2 | W./C. 6607 | 23.45 | NaN | S | . 889 890 | 1 | 1 | Behr, Mr. Karl Howell | male | 26.0 | 0 | 0 | 111369 | 30.00 | C148 | C | . 890 891 | 0 | 3 | Dooley, Mr. Patrick | male | 32.0 | 0 | 0 | 370376 | 7.75 | NaN | Q | . display(titanic_df.head()) display(titanic_df.tail()) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Th... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 886 887 | 0 | 2 | Montvila, Rev. Juozas | male | 27.0 | 0 | 0 | 211536 | 13.00 | NaN | S | . 887 888 | 1 | 1 | Graham, Miss. Margaret Edith | female | 19.0 | 0 | 0 | 112053 | 30.00 | B42 | S | . 888 889 | 0 | 3 | Johnston, Miss. Catherine Helen &quot;Carrie&quot; | female | NaN | 1 | 2 | W./C. 6607 | 23.45 | NaN | S | . 889 890 | 1 | 1 | Behr, Mr. Karl Howell | male | 26.0 | 0 | 0 | 111369 | 30.00 | C148 | C | . 890 891 | 0 | 3 | Dooley, Mr. Patrick | male | 32.0 | 0 | 0 | 370376 | 7.75 | NaN | Q | . pd.set_option(&#39;display.max_rows&#39;, 1000) pd.set_option(&#39;display.max_colwidth&#39;, 100) pd.set_option(&#39;display.max_columns&#39;, 100) titanic_df . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.00 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Thayer) | female | 38.00 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.00 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.00 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.00 | 0 | 0 | 373450 | 8.0500 | NaN | S | . 5 6 | 0 | 3 | Moran, Mr. James | male | NaN | 0 | 0 | 330877 | 8.4583 | NaN | Q | . 6 7 | 0 | 1 | McCarthy, Mr. Timothy J | male | 54.00 | 0 | 0 | 17463 | 51.8625 | E46 | S | . 7 8 | 0 | 3 | Palsson, Master. Gosta Leonard | male | 2.00 | 3 | 1 | 349909 | 21.0750 | NaN | S | . 8 9 | 1 | 3 | Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) | female | 27.00 | 0 | 2 | 347742 | 11.1333 | NaN | S | . 9 10 | 1 | 2 | Nasser, Mrs. Nicholas (Adele Achem) | female | 14.00 | 1 | 0 | 237736 | 30.0708 | NaN | C | . 10 11 | 1 | 3 | Sandstrom, Miss. Marguerite Rut | female | 4.00 | 1 | 1 | PP 9549 | 16.7000 | G6 | S | . 11 12 | 1 | 1 | Bonnell, Miss. Elizabeth | female | 58.00 | 0 | 0 | 113783 | 26.5500 | C103 | S | . 12 13 | 0 | 3 | Saundercock, Mr. William Henry | male | 20.00 | 0 | 0 | A/5. 2151 | 8.0500 | NaN | S | . 13 14 | 0 | 3 | Andersson, Mr. Anders Johan | male | 39.00 | 1 | 5 | 347082 | 31.2750 | NaN | S | . 14 15 | 0 | 3 | Vestrom, Miss. Hulda Amanda Adolfina | female | 14.00 | 0 | 0 | 350406 | 7.8542 | NaN | S | . 15 16 | 1 | 2 | Hewlett, Mrs. (Mary D Kingcome) | female | 55.00 | 0 | 0 | 248706 | 16.0000 | NaN | S | . 16 17 | 0 | 3 | Rice, Master. Eugene | male | 2.00 | 4 | 1 | 382652 | 29.1250 | NaN | Q | . 17 18 | 1 | 2 | Williams, Mr. Charles Eugene | male | NaN | 0 | 0 | 244373 | 13.0000 | NaN | S | . 18 19 | 0 | 3 | Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele) | female | 31.00 | 1 | 0 | 345763 | 18.0000 | NaN | S | . 19 20 | 1 | 3 | Masselmani, Mrs. Fatima | female | NaN | 0 | 0 | 2649 | 7.2250 | NaN | C | . 20 21 | 0 | 2 | Fynney, Mr. Joseph J | male | 35.00 | 0 | 0 | 239865 | 26.0000 | NaN | S | . 21 22 | 1 | 2 | Beesley, Mr. Lawrence | male | 34.00 | 0 | 0 | 248698 | 13.0000 | D56 | S | . 22 23 | 1 | 3 | McGowan, Miss. Anna &quot;Annie&quot; | female | 15.00 | 0 | 0 | 330923 | 8.0292 | NaN | Q | . 23 24 | 1 | 1 | Sloper, Mr. William Thompson | male | 28.00 | 0 | 0 | 113788 | 35.5000 | A6 | S | . 24 25 | 0 | 3 | Palsson, Miss. Torborg Danira | female | 8.00 | 3 | 1 | 349909 | 21.0750 | NaN | S | . 25 26 | 1 | 3 | Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson) | female | 38.00 | 1 | 5 | 347077 | 31.3875 | NaN | S | . 26 27 | 0 | 3 | Emir, Mr. Farred Chehab | male | NaN | 0 | 0 | 2631 | 7.2250 | NaN | C | . 27 28 | 0 | 1 | Fortune, Mr. Charles Alexander | male | 19.00 | 3 | 2 | 19950 | 263.0000 | C23 C25 C27 | S | . 28 29 | 1 | 3 | O&#39;Dwyer, Miss. Ellen &quot;Nellie&quot; | female | NaN | 0 | 0 | 330959 | 7.8792 | NaN | Q | . 29 30 | 0 | 3 | Todoroff, Mr. Lalio | male | NaN | 0 | 0 | 349216 | 7.8958 | NaN | S | . 30 31 | 0 | 1 | Uruchurtu, Don. Manuel E | male | 40.00 | 0 | 0 | PC 17601 | 27.7208 | NaN | C | . 31 32 | 1 | 1 | Spencer, Mrs. William Augustus (Marie Eugenie) | female | NaN | 1 | 0 | PC 17569 | 146.5208 | B78 | C | . 32 33 | 1 | 3 | Glynn, Miss. Mary Agatha | female | NaN | 0 | 0 | 335677 | 7.7500 | NaN | Q | . 33 34 | 0 | 2 | Wheadon, Mr. Edward H | male | 66.00 | 0 | 0 | C.A. 24579 | 10.5000 | NaN | S | . 34 35 | 0 | 1 | Meyer, Mr. Edgar Joseph | male | 28.00 | 1 | 0 | PC 17604 | 82.1708 | NaN | C | . 35 36 | 0 | 1 | Holverson, Mr. Alexander Oskar | male | 42.00 | 1 | 0 | 113789 | 52.0000 | NaN | S | . 36 37 | 1 | 3 | Mamee, Mr. Hanna | male | NaN | 0 | 0 | 2677 | 7.2292 | NaN | C | . 37 38 | 0 | 3 | Cann, Mr. Ernest Charles | male | 21.00 | 0 | 0 | A./5. 2152 | 8.0500 | NaN | S | . 38 39 | 0 | 3 | Vander Planke, Miss. Augusta Maria | female | 18.00 | 2 | 0 | 345764 | 18.0000 | NaN | S | . 39 40 | 1 | 3 | Nicola-Yarred, Miss. Jamila | female | 14.00 | 1 | 0 | 2651 | 11.2417 | NaN | C | . 40 41 | 0 | 3 | Ahlin, Mrs. Johan (Johanna Persdotter Larsson) | female | 40.00 | 1 | 0 | 7546 | 9.4750 | NaN | S | . 41 42 | 0 | 2 | Turpin, Mrs. William John Robert (Dorothy Ann Wonnacott) | female | 27.00 | 1 | 0 | 11668 | 21.0000 | NaN | S | . 42 43 | 0 | 3 | Kraeff, Mr. Theodor | male | NaN | 0 | 0 | 349253 | 7.8958 | NaN | C | . 43 44 | 1 | 2 | Laroche, Miss. Simonne Marie Anne Andree | female | 3.00 | 1 | 2 | SC/Paris 2123 | 41.5792 | NaN | C | . 44 45 | 1 | 3 | Devaney, Miss. Margaret Delia | female | 19.00 | 0 | 0 | 330958 | 7.8792 | NaN | Q | . 45 46 | 0 | 3 | Rogers, Mr. William John | male | NaN | 0 | 0 | S.C./A.4. 23567 | 8.0500 | NaN | S | . 46 47 | 0 | 3 | Lennon, Mr. Denis | male | NaN | 1 | 0 | 370371 | 15.5000 | NaN | Q | . 47 48 | 1 | 3 | O&#39;Driscoll, Miss. Bridget | female | NaN | 0 | 0 | 14311 | 7.7500 | NaN | Q | . 48 49 | 0 | 3 | Samaan, Mr. Youssef | male | NaN | 2 | 0 | 2662 | 21.6792 | NaN | C | . 49 50 | 0 | 3 | Arnold-Franchi, Mrs. Josef (Josefine Franchi) | female | 18.00 | 1 | 0 | 349237 | 17.8000 | NaN | S | . 50 51 | 0 | 3 | Panula, Master. Juha Niilo | male | 7.00 | 4 | 1 | 3101295 | 39.6875 | NaN | S | . 51 52 | 0 | 3 | Nosworthy, Mr. Richard Cater | male | 21.00 | 0 | 0 | A/4. 39886 | 7.8000 | NaN | S | . 52 53 | 1 | 1 | Harper, Mrs. Henry Sleeper (Myna Haxtun) | female | 49.00 | 1 | 0 | PC 17572 | 76.7292 | D33 | C | . 53 54 | 1 | 2 | Faunthorpe, Mrs. Lizzie (Elizabeth Anne Wilkinson) | female | 29.00 | 1 | 0 | 2926 | 26.0000 | NaN | S | . 54 55 | 0 | 1 | Ostby, Mr. Engelhart Cornelius | male | 65.00 | 0 | 1 | 113509 | 61.9792 | B30 | C | . 55 56 | 1 | 1 | Woolner, Mr. Hugh | male | NaN | 0 | 0 | 19947 | 35.5000 | C52 | S | . 56 57 | 1 | 2 | Rugg, Miss. Emily | female | 21.00 | 0 | 0 | C.A. 31026 | 10.5000 | NaN | S | . 57 58 | 0 | 3 | Novel, Mr. Mansouer | male | 28.50 | 0 | 0 | 2697 | 7.2292 | NaN | C | . 58 59 | 1 | 2 | West, Miss. Constance Mirium | female | 5.00 | 1 | 2 | C.A. 34651 | 27.7500 | NaN | S | . 59 60 | 0 | 3 | Goodwin, Master. William Frederick | male | 11.00 | 5 | 2 | CA 2144 | 46.9000 | NaN | S | . 60 61 | 0 | 3 | Sirayanian, Mr. Orsen | male | 22.00 | 0 | 0 | 2669 | 7.2292 | NaN | C | . 61 62 | 1 | 1 | Icard, Miss. Amelie | female | 38.00 | 0 | 0 | 113572 | 80.0000 | B28 | NaN | . 62 63 | 0 | 1 | Harris, Mr. Henry Birkhardt | male | 45.00 | 1 | 0 | 36973 | 83.4750 | C83 | S | . 63 64 | 0 | 3 | Skoog, Master. Harald | male | 4.00 | 3 | 2 | 347088 | 27.9000 | NaN | S | . 64 65 | 0 | 1 | Stewart, Mr. Albert A | male | NaN | 0 | 0 | PC 17605 | 27.7208 | NaN | C | . 65 66 | 1 | 3 | Moubarek, Master. Gerios | male | NaN | 1 | 1 | 2661 | 15.2458 | NaN | C | . 66 67 | 1 | 2 | Nye, Mrs. (Elizabeth Ramell) | female | 29.00 | 0 | 0 | C.A. 29395 | 10.5000 | F33 | S | . 67 68 | 0 | 3 | Crease, Mr. Ernest James | male | 19.00 | 0 | 0 | S.P. 3464 | 8.1583 | NaN | S | . 68 69 | 1 | 3 | Andersson, Miss. Erna Alexandra | female | 17.00 | 4 | 2 | 3101281 | 7.9250 | NaN | S | . 69 70 | 0 | 3 | Kink, Mr. Vincenz | male | 26.00 | 2 | 0 | 315151 | 8.6625 | NaN | S | . 70 71 | 0 | 2 | Jenkin, Mr. Stephen Curnow | male | 32.00 | 0 | 0 | C.A. 33111 | 10.5000 | NaN | S | . 71 72 | 0 | 3 | Goodwin, Miss. Lillian Amy | female | 16.00 | 5 | 2 | CA 2144 | 46.9000 | NaN | S | . 72 73 | 0 | 2 | Hood, Mr. Ambrose Jr | male | 21.00 | 0 | 0 | S.O.C. 14879 | 73.5000 | NaN | S | . 73 74 | 0 | 3 | Chronopoulos, Mr. Apostolos | male | 26.00 | 1 | 0 | 2680 | 14.4542 | NaN | C | . 74 75 | 1 | 3 | Bing, Mr. Lee | male | 32.00 | 0 | 0 | 1601 | 56.4958 | NaN | S | . 75 76 | 0 | 3 | Moen, Mr. Sigurd Hansen | male | 25.00 | 0 | 0 | 348123 | 7.6500 | F G73 | S | . 76 77 | 0 | 3 | Staneff, Mr. Ivan | male | NaN | 0 | 0 | 349208 | 7.8958 | NaN | S | . 77 78 | 0 | 3 | Moutal, Mr. Rahamin Haim | male | NaN | 0 | 0 | 374746 | 8.0500 | NaN | S | . 78 79 | 1 | 2 | Caldwell, Master. Alden Gates | male | 0.83 | 0 | 2 | 248738 | 29.0000 | NaN | S | . 79 80 | 1 | 3 | Dowdell, Miss. Elizabeth | female | 30.00 | 0 | 0 | 364516 | 12.4750 | NaN | S | . 80 81 | 0 | 3 | Waelens, Mr. Achille | male | 22.00 | 0 | 0 | 345767 | 9.0000 | NaN | S | . 81 82 | 1 | 3 | Sheerlinck, Mr. Jan Baptist | male | 29.00 | 0 | 0 | 345779 | 9.5000 | NaN | S | . 82 83 | 1 | 3 | McDermott, Miss. Brigdet Delia | female | NaN | 0 | 0 | 330932 | 7.7875 | NaN | Q | . 83 84 | 0 | 1 | Carrau, Mr. Francisco M | male | 28.00 | 0 | 0 | 113059 | 47.1000 | NaN | S | . 84 85 | 1 | 2 | Ilett, Miss. Bertha | female | 17.00 | 0 | 0 | SO/C 14885 | 10.5000 | NaN | S | . 85 86 | 1 | 3 | Backstrom, Mrs. Karl Alfred (Maria Mathilda Gustafsson) | female | 33.00 | 3 | 0 | 3101278 | 15.8500 | NaN | S | . 86 87 | 0 | 3 | Ford, Mr. William Neal | male | 16.00 | 1 | 3 | W./C. 6608 | 34.3750 | NaN | S | . 87 88 | 0 | 3 | Slocovski, Mr. Selman Francis | male | NaN | 0 | 0 | SOTON/OQ 392086 | 8.0500 | NaN | S | . 88 89 | 1 | 1 | Fortune, Miss. Mabel Helen | female | 23.00 | 3 | 2 | 19950 | 263.0000 | C23 C25 C27 | S | . 89 90 | 0 | 3 | Celotti, Mr. Francesco | male | 24.00 | 0 | 0 | 343275 | 8.0500 | NaN | S | . 90 91 | 0 | 3 | Christmann, Mr. Emil | male | 29.00 | 0 | 0 | 343276 | 8.0500 | NaN | S | . 91 92 | 0 | 3 | Andreasson, Mr. Paul Edvin | male | 20.00 | 0 | 0 | 347466 | 7.8542 | NaN | S | . 92 93 | 0 | 1 | Chaffee, Mr. Herbert Fuller | male | 46.00 | 1 | 0 | W.E.P. 5734 | 61.1750 | E31 | S | . 93 94 | 0 | 3 | Dean, Mr. Bertram Frank | male | 26.00 | 1 | 2 | C.A. 2315 | 20.5750 | NaN | S | . 94 95 | 0 | 3 | Coxon, Mr. Daniel | male | 59.00 | 0 | 0 | 364500 | 7.2500 | NaN | S | . 95 96 | 0 | 3 | Shorney, Mr. Charles Joseph | male | NaN | 0 | 0 | 374910 | 8.0500 | NaN | S | . 96 97 | 0 | 1 | Goldschmidt, Mr. George B | male | 71.00 | 0 | 0 | PC 17754 | 34.6542 | A5 | C | . 97 98 | 1 | 1 | Greenfield, Mr. William Bertram | male | 23.00 | 0 | 1 | PC 17759 | 63.3583 | D10 D12 | C | . 98 99 | 1 | 2 | Doling, Mrs. John T (Ada Julia Bone) | female | 34.00 | 0 | 1 | 231919 | 23.0000 | NaN | S | . 99 100 | 0 | 2 | Kantor, Mr. Sinai | male | 34.00 | 1 | 0 | 244367 | 26.0000 | NaN | S | . 100 101 | 0 | 3 | Petranec, Miss. Matilda | female | 28.00 | 0 | 0 | 349245 | 7.8958 | NaN | S | . 101 102 | 0 | 3 | Petroff, Mr. Pastcho (&quot;Pentcho&quot;) | male | NaN | 0 | 0 | 349215 | 7.8958 | NaN | S | . 102 103 | 0 | 1 | White, Mr. Richard Frasar | male | 21.00 | 0 | 1 | 35281 | 77.2875 | D26 | S | . 103 104 | 0 | 3 | Johansson, Mr. Gustaf Joel | male | 33.00 | 0 | 0 | 7540 | 8.6542 | NaN | S | . 104 105 | 0 | 3 | Gustafsson, Mr. Anders Vilhelm | male | 37.00 | 2 | 0 | 3101276 | 7.9250 | NaN | S | . 105 106 | 0 | 3 | Mionoff, Mr. Stoytcho | male | 28.00 | 0 | 0 | 349207 | 7.8958 | NaN | S | . 106 107 | 1 | 3 | Salkjelsvik, Miss. Anna Kristine | female | 21.00 | 0 | 0 | 343120 | 7.6500 | NaN | S | . 107 108 | 1 | 3 | Moss, Mr. Albert Johan | male | NaN | 0 | 0 | 312991 | 7.7750 | NaN | S | . 108 109 | 0 | 3 | Rekic, Mr. Tido | male | 38.00 | 0 | 0 | 349249 | 7.8958 | NaN | S | . 109 110 | 1 | 3 | Moran, Miss. Bertha | female | NaN | 1 | 0 | 371110 | 24.1500 | NaN | Q | . 110 111 | 0 | 1 | Porter, Mr. Walter Chamberlain | male | 47.00 | 0 | 0 | 110465 | 52.0000 | C110 | S | . 111 112 | 0 | 3 | Zabour, Miss. Hileni | female | 14.50 | 1 | 0 | 2665 | 14.4542 | NaN | C | . 112 113 | 0 | 3 | Barton, Mr. David John | male | 22.00 | 0 | 0 | 324669 | 8.0500 | NaN | S | . 113 114 | 0 | 3 | Jussila, Miss. Katriina | female | 20.00 | 1 | 0 | 4136 | 9.8250 | NaN | S | . 114 115 | 0 | 3 | Attalah, Miss. Malake | female | 17.00 | 0 | 0 | 2627 | 14.4583 | NaN | C | . 115 116 | 0 | 3 | Pekoniemi, Mr. Edvard | male | 21.00 | 0 | 0 | STON/O 2. 3101294 | 7.9250 | NaN | S | . 116 117 | 0 | 3 | Connors, Mr. Patrick | male | 70.50 | 0 | 0 | 370369 | 7.7500 | NaN | Q | . 117 118 | 0 | 2 | Turpin, Mr. William John Robert | male | 29.00 | 1 | 0 | 11668 | 21.0000 | NaN | S | . 118 119 | 0 | 1 | Baxter, Mr. Quigg Edmond | male | 24.00 | 0 | 1 | PC 17558 | 247.5208 | B58 B60 | C | . 119 120 | 0 | 3 | Andersson, Miss. Ellis Anna Maria | female | 2.00 | 4 | 2 | 347082 | 31.2750 | NaN | S | . 120 121 | 0 | 2 | Hickman, Mr. Stanley George | male | 21.00 | 2 | 0 | S.O.C. 14879 | 73.5000 | NaN | S | . 121 122 | 0 | 3 | Moore, Mr. Leonard Charles | male | NaN | 0 | 0 | A4. 54510 | 8.0500 | NaN | S | . 122 123 | 0 | 2 | Nasser, Mr. Nicholas | male | 32.50 | 1 | 0 | 237736 | 30.0708 | NaN | C | . 123 124 | 1 | 2 | Webber, Miss. Susan | female | 32.50 | 0 | 0 | 27267 | 13.0000 | E101 | S | . 124 125 | 0 | 1 | White, Mr. Percival Wayland | male | 54.00 | 0 | 1 | 35281 | 77.2875 | D26 | S | . 125 126 | 1 | 3 | Nicola-Yarred, Master. Elias | male | 12.00 | 1 | 0 | 2651 | 11.2417 | NaN | C | . 126 127 | 0 | 3 | McMahon, Mr. Martin | male | NaN | 0 | 0 | 370372 | 7.7500 | NaN | Q | . 127 128 | 1 | 3 | Madsen, Mr. Fridtjof Arne | male | 24.00 | 0 | 0 | C 17369 | 7.1417 | NaN | S | . 128 129 | 1 | 3 | Peter, Miss. Anna | female | NaN | 1 | 1 | 2668 | 22.3583 | F E69 | C | . 129 130 | 0 | 3 | Ekstrom, Mr. Johan | male | 45.00 | 0 | 0 | 347061 | 6.9750 | NaN | S | . 130 131 | 0 | 3 | Drazenoic, Mr. Jozef | male | 33.00 | 0 | 0 | 349241 | 7.8958 | NaN | C | . 131 132 | 0 | 3 | Coelho, Mr. Domingos Fernandeo | male | 20.00 | 0 | 0 | SOTON/O.Q. 3101307 | 7.0500 | NaN | S | . 132 133 | 0 | 3 | Robins, Mrs. Alexander A (Grace Charity Laury) | female | 47.00 | 1 | 0 | A/5. 3337 | 14.5000 | NaN | S | . 133 134 | 1 | 2 | Weisz, Mrs. Leopold (Mathilde Francoise Pede) | female | 29.00 | 1 | 0 | 228414 | 26.0000 | NaN | S | . 134 135 | 0 | 2 | Sobey, Mr. Samuel James Hayden | male | 25.00 | 0 | 0 | C.A. 29178 | 13.0000 | NaN | S | . 135 136 | 0 | 2 | Richard, Mr. Emile | male | 23.00 | 0 | 0 | SC/PARIS 2133 | 15.0458 | NaN | C | . 136 137 | 1 | 1 | Newsom, Miss. Helen Monypeny | female | 19.00 | 0 | 2 | 11752 | 26.2833 | D47 | S | . 137 138 | 0 | 1 | Futrelle, Mr. Jacques Heath | male | 37.00 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 138 139 | 0 | 3 | Osen, Mr. Olaf Elon | male | 16.00 | 0 | 0 | 7534 | 9.2167 | NaN | S | . 139 140 | 0 | 1 | Giglio, Mr. Victor | male | 24.00 | 0 | 0 | PC 17593 | 79.2000 | B86 | C | . 140 141 | 0 | 3 | Boulos, Mrs. Joseph (Sultana) | female | NaN | 0 | 2 | 2678 | 15.2458 | NaN | C | . 141 142 | 1 | 3 | Nysten, Miss. Anna Sofia | female | 22.00 | 0 | 0 | 347081 | 7.7500 | NaN | S | . 142 143 | 1 | 3 | Hakkarainen, Mrs. Pekka Pietari (Elin Matilda Dolck) | female | 24.00 | 1 | 0 | STON/O2. 3101279 | 15.8500 | NaN | S | . 143 144 | 0 | 3 | Burke, Mr. Jeremiah | male | 19.00 | 0 | 0 | 365222 | 6.7500 | NaN | Q | . 144 145 | 0 | 2 | Andrew, Mr. Edgardo Samuel | male | 18.00 | 0 | 0 | 231945 | 11.5000 | NaN | S | . 145 146 | 0 | 2 | Nicholls, Mr. Joseph Charles | male | 19.00 | 1 | 1 | C.A. 33112 | 36.7500 | NaN | S | . 146 147 | 1 | 3 | Andersson, Mr. August Edvard (&quot;Wennerstrom&quot;) | male | 27.00 | 0 | 0 | 350043 | 7.7958 | NaN | S | . 147 148 | 0 | 3 | Ford, Miss. Robina Maggie &quot;Ruby&quot; | female | 9.00 | 2 | 2 | W./C. 6608 | 34.3750 | NaN | S | . 148 149 | 0 | 2 | Navratil, Mr. Michel (&quot;Louis M Hoffman&quot;) | male | 36.50 | 0 | 2 | 230080 | 26.0000 | F2 | S | . 149 150 | 0 | 2 | Byles, Rev. Thomas Roussel Davids | male | 42.00 | 0 | 0 | 244310 | 13.0000 | NaN | S | . 150 151 | 0 | 2 | Bateman, Rev. Robert James | male | 51.00 | 0 | 0 | S.O.P. 1166 | 12.5250 | NaN | S | . 151 152 | 1 | 1 | Pears, Mrs. Thomas (Edith Wearne) | female | 22.00 | 1 | 0 | 113776 | 66.6000 | C2 | S | . 152 153 | 0 | 3 | Meo, Mr. Alfonzo | male | 55.50 | 0 | 0 | A.5. 11206 | 8.0500 | NaN | S | . 153 154 | 0 | 3 | van Billiard, Mr. Austin Blyler | male | 40.50 | 0 | 2 | A/5. 851 | 14.5000 | NaN | S | . 154 155 | 0 | 3 | Olsen, Mr. Ole Martin | male | NaN | 0 | 0 | Fa 265302 | 7.3125 | NaN | S | . 155 156 | 0 | 1 | Williams, Mr. Charles Duane | male | 51.00 | 0 | 1 | PC 17597 | 61.3792 | NaN | C | . 156 157 | 1 | 3 | Gilnagh, Miss. Katherine &quot;Katie&quot; | female | 16.00 | 0 | 0 | 35851 | 7.7333 | NaN | Q | . 157 158 | 0 | 3 | Corn, Mr. Harry | male | 30.00 | 0 | 0 | SOTON/OQ 392090 | 8.0500 | NaN | S | . 158 159 | 0 | 3 | Smiljanic, Mr. Mile | male | NaN | 0 | 0 | 315037 | 8.6625 | NaN | S | . 159 160 | 0 | 3 | Sage, Master. Thomas Henry | male | NaN | 8 | 2 | CA. 2343 | 69.5500 | NaN | S | . 160 161 | 0 | 3 | Cribb, Mr. John Hatfield | male | 44.00 | 0 | 1 | 371362 | 16.1000 | NaN | S | . 161 162 | 1 | 2 | Watt, Mrs. James (Elizabeth &quot;Bessie&quot; Inglis Milne) | female | 40.00 | 0 | 0 | C.A. 33595 | 15.7500 | NaN | S | . 162 163 | 0 | 3 | Bengtsson, Mr. John Viktor | male | 26.00 | 0 | 0 | 347068 | 7.7750 | NaN | S | . 163 164 | 0 | 3 | Calic, Mr. Jovo | male | 17.00 | 0 | 0 | 315093 | 8.6625 | NaN | S | . 164 165 | 0 | 3 | Panula, Master. Eino Viljami | male | 1.00 | 4 | 1 | 3101295 | 39.6875 | NaN | S | . 165 166 | 1 | 3 | Goldsmith, Master. Frank John William &quot;Frankie&quot; | male | 9.00 | 0 | 2 | 363291 | 20.5250 | NaN | S | . 166 167 | 1 | 1 | Chibnall, Mrs. (Edith Martha Bowerman) | female | NaN | 0 | 1 | 113505 | 55.0000 | E33 | S | . 167 168 | 0 | 3 | Skoog, Mrs. William (Anna Bernhardina Karlsson) | female | 45.00 | 1 | 4 | 347088 | 27.9000 | NaN | S | . 168 169 | 0 | 1 | Baumann, Mr. John D | male | NaN | 0 | 0 | PC 17318 | 25.9250 | NaN | S | . 169 170 | 0 | 3 | Ling, Mr. Lee | male | 28.00 | 0 | 0 | 1601 | 56.4958 | NaN | S | . 170 171 | 0 | 1 | Van der hoef, Mr. Wyckoff | male | 61.00 | 0 | 0 | 111240 | 33.5000 | B19 | S | . 171 172 | 0 | 3 | Rice, Master. Arthur | male | 4.00 | 4 | 1 | 382652 | 29.1250 | NaN | Q | . 172 173 | 1 | 3 | Johnson, Miss. Eleanor Ileen | female | 1.00 | 1 | 1 | 347742 | 11.1333 | NaN | S | . 173 174 | 0 | 3 | Sivola, Mr. Antti Wilhelm | male | 21.00 | 0 | 0 | STON/O 2. 3101280 | 7.9250 | NaN | S | . 174 175 | 0 | 1 | Smith, Mr. James Clinch | male | 56.00 | 0 | 0 | 17764 | 30.6958 | A7 | C | . 175 176 | 0 | 3 | Klasen, Mr. Klas Albin | male | 18.00 | 1 | 1 | 350404 | 7.8542 | NaN | S | . 176 177 | 0 | 3 | Lefebre, Master. Henry Forbes | male | NaN | 3 | 1 | 4133 | 25.4667 | NaN | S | . 177 178 | 0 | 1 | Isham, Miss. Ann Elizabeth | female | 50.00 | 0 | 0 | PC 17595 | 28.7125 | C49 | C | . 178 179 | 0 | 2 | Hale, Mr. Reginald | male | 30.00 | 0 | 0 | 250653 | 13.0000 | NaN | S | . 179 180 | 0 | 3 | Leonard, Mr. Lionel | male | 36.00 | 0 | 0 | LINE | 0.0000 | NaN | S | . 180 181 | 0 | 3 | Sage, Miss. Constance Gladys | female | NaN | 8 | 2 | CA. 2343 | 69.5500 | NaN | S | . 181 182 | 0 | 2 | Pernot, Mr. Rene | male | NaN | 0 | 0 | SC/PARIS 2131 | 15.0500 | NaN | C | . 182 183 | 0 | 3 | Asplund, Master. Clarence Gustaf Hugo | male | 9.00 | 4 | 2 | 347077 | 31.3875 | NaN | S | . 183 184 | 1 | 2 | Becker, Master. Richard F | male | 1.00 | 2 | 1 | 230136 | 39.0000 | F4 | S | . 184 185 | 1 | 3 | Kink-Heilmann, Miss. Luise Gretchen | female | 4.00 | 0 | 2 | 315153 | 22.0250 | NaN | S | . 185 186 | 0 | 1 | Rood, Mr. Hugh Roscoe | male | NaN | 0 | 0 | 113767 | 50.0000 | A32 | S | . 186 187 | 1 | 3 | O&#39;Brien, Mrs. Thomas (Johanna &quot;Hannah&quot; Godfrey) | female | NaN | 1 | 0 | 370365 | 15.5000 | NaN | Q | . 187 188 | 1 | 1 | Romaine, Mr. Charles Hallace (&quot;Mr C Rolmane&quot;) | male | 45.00 | 0 | 0 | 111428 | 26.5500 | NaN | S | . 188 189 | 0 | 3 | Bourke, Mr. John | male | 40.00 | 1 | 1 | 364849 | 15.5000 | NaN | Q | . 189 190 | 0 | 3 | Turcin, Mr. Stjepan | male | 36.00 | 0 | 0 | 349247 | 7.8958 | NaN | S | . 190 191 | 1 | 2 | Pinsky, Mrs. (Rosa) | female | 32.00 | 0 | 0 | 234604 | 13.0000 | NaN | S | . 191 192 | 0 | 2 | Carbines, Mr. William | male | 19.00 | 0 | 0 | 28424 | 13.0000 | NaN | S | . 192 193 | 1 | 3 | Andersen-Jensen, Miss. Carla Christine Nielsine | female | 19.00 | 1 | 0 | 350046 | 7.8542 | NaN | S | . 193 194 | 1 | 2 | Navratil, Master. Michel M | male | 3.00 | 1 | 1 | 230080 | 26.0000 | F2 | S | . 194 195 | 1 | 1 | Brown, Mrs. James Joseph (Margaret Tobin) | female | 44.00 | 0 | 0 | PC 17610 | 27.7208 | B4 | C | . 195 196 | 1 | 1 | Lurette, Miss. Elise | female | 58.00 | 0 | 0 | PC 17569 | 146.5208 | B80 | C | . 196 197 | 0 | 3 | Mernagh, Mr. Robert | male | NaN | 0 | 0 | 368703 | 7.7500 | NaN | Q | . 197 198 | 0 | 3 | Olsen, Mr. Karl Siegwart Andreas | male | 42.00 | 0 | 1 | 4579 | 8.4042 | NaN | S | . 198 199 | 1 | 3 | Madigan, Miss. Margaret &quot;Maggie&quot; | female | NaN | 0 | 0 | 370370 | 7.7500 | NaN | Q | . 199 200 | 0 | 2 | Yrois, Miss. Henriette (&quot;Mrs Harbeck&quot;) | female | 24.00 | 0 | 0 | 248747 | 13.0000 | NaN | S | . 200 201 | 0 | 3 | Vande Walle, Mr. Nestor Cyriel | male | 28.00 | 0 | 0 | 345770 | 9.5000 | NaN | S | . 201 202 | 0 | 3 | Sage, Mr. Frederick | male | NaN | 8 | 2 | CA. 2343 | 69.5500 | NaN | S | . 202 203 | 0 | 3 | Johanson, Mr. Jakob Alfred | male | 34.00 | 0 | 0 | 3101264 | 6.4958 | NaN | S | . 203 204 | 0 | 3 | Youseff, Mr. Gerious | male | 45.50 | 0 | 0 | 2628 | 7.2250 | NaN | C | . 204 205 | 1 | 3 | Cohen, Mr. Gurshon &quot;Gus&quot; | male | 18.00 | 0 | 0 | A/5 3540 | 8.0500 | NaN | S | . 205 206 | 0 | 3 | Strom, Miss. Telma Matilda | female | 2.00 | 0 | 1 | 347054 | 10.4625 | G6 | S | . 206 207 | 0 | 3 | Backstrom, Mr. Karl Alfred | male | 32.00 | 1 | 0 | 3101278 | 15.8500 | NaN | S | . 207 208 | 1 | 3 | Albimona, Mr. Nassef Cassem | male | 26.00 | 0 | 0 | 2699 | 18.7875 | NaN | C | . 208 209 | 1 | 3 | Carr, Miss. Helen &quot;Ellen&quot; | female | 16.00 | 0 | 0 | 367231 | 7.7500 | NaN | Q | . 209 210 | 1 | 1 | Blank, Mr. Henry | male | 40.00 | 0 | 0 | 112277 | 31.0000 | A31 | C | . 210 211 | 0 | 3 | Ali, Mr. Ahmed | male | 24.00 | 0 | 0 | SOTON/O.Q. 3101311 | 7.0500 | NaN | S | . 211 212 | 1 | 2 | Cameron, Miss. Clear Annie | female | 35.00 | 0 | 0 | F.C.C. 13528 | 21.0000 | NaN | S | . 212 213 | 0 | 3 | Perkin, Mr. John Henry | male | 22.00 | 0 | 0 | A/5 21174 | 7.2500 | NaN | S | . 213 214 | 0 | 2 | Givard, Mr. Hans Kristensen | male | 30.00 | 0 | 0 | 250646 | 13.0000 | NaN | S | . 214 215 | 0 | 3 | Kiernan, Mr. Philip | male | NaN | 1 | 0 | 367229 | 7.7500 | NaN | Q | . 215 216 | 1 | 1 | Newell, Miss. Madeleine | female | 31.00 | 1 | 0 | 35273 | 113.2750 | D36 | C | . 216 217 | 1 | 3 | Honkanen, Miss. Eliina | female | 27.00 | 0 | 0 | STON/O2. 3101283 | 7.9250 | NaN | S | . 217 218 | 0 | 2 | Jacobsohn, Mr. Sidney Samuel | male | 42.00 | 1 | 0 | 243847 | 27.0000 | NaN | S | . 218 219 | 1 | 1 | Bazzani, Miss. Albina | female | 32.00 | 0 | 0 | 11813 | 76.2917 | D15 | C | . 219 220 | 0 | 2 | Harris, Mr. Walter | male | 30.00 | 0 | 0 | W/C 14208 | 10.5000 | NaN | S | . 220 221 | 1 | 3 | Sunderland, Mr. Victor Francis | male | 16.00 | 0 | 0 | SOTON/OQ 392089 | 8.0500 | NaN | S | . 221 222 | 0 | 2 | Bracken, Mr. James H | male | 27.00 | 0 | 0 | 220367 | 13.0000 | NaN | S | . 222 223 | 0 | 3 | Green, Mr. George Henry | male | 51.00 | 0 | 0 | 21440 | 8.0500 | NaN | S | . 223 224 | 0 | 3 | Nenkoff, Mr. Christo | male | NaN | 0 | 0 | 349234 | 7.8958 | NaN | S | . 224 225 | 1 | 1 | Hoyt, Mr. Frederick Maxfield | male | 38.00 | 1 | 0 | 19943 | 90.0000 | C93 | S | . 225 226 | 0 | 3 | Berglund, Mr. Karl Ivar Sven | male | 22.00 | 0 | 0 | PP 4348 | 9.3500 | NaN | S | . 226 227 | 1 | 2 | Mellors, Mr. William John | male | 19.00 | 0 | 0 | SW/PP 751 | 10.5000 | NaN | S | . 227 228 | 0 | 3 | Lovell, Mr. John Hall (&quot;Henry&quot;) | male | 20.50 | 0 | 0 | A/5 21173 | 7.2500 | NaN | S | . 228 229 | 0 | 2 | Fahlstrom, Mr. Arne Jonas | male | 18.00 | 0 | 0 | 236171 | 13.0000 | NaN | S | . 229 230 | 0 | 3 | Lefebre, Miss. Mathilde | female | NaN | 3 | 1 | 4133 | 25.4667 | NaN | S | . 230 231 | 1 | 1 | Harris, Mrs. Henry Birkhardt (Irene Wallach) | female | 35.00 | 1 | 0 | 36973 | 83.4750 | C83 | S | . 231 232 | 0 | 3 | Larsson, Mr. Bengt Edvin | male | 29.00 | 0 | 0 | 347067 | 7.7750 | NaN | S | . 232 233 | 0 | 2 | Sjostedt, Mr. Ernst Adolf | male | 59.00 | 0 | 0 | 237442 | 13.5000 | NaN | S | . 233 234 | 1 | 3 | Asplund, Miss. Lillian Gertrud | female | 5.00 | 4 | 2 | 347077 | 31.3875 | NaN | S | . 234 235 | 0 | 2 | Leyson, Mr. Robert William Norman | male | 24.00 | 0 | 0 | C.A. 29566 | 10.5000 | NaN | S | . 235 236 | 0 | 3 | Harknett, Miss. Alice Phoebe | female | NaN | 0 | 0 | W./C. 6609 | 7.5500 | NaN | S | . 236 237 | 0 | 2 | Hold, Mr. Stephen | male | 44.00 | 1 | 0 | 26707 | 26.0000 | NaN | S | . 237 238 | 1 | 2 | Collyer, Miss. Marjorie &quot;Lottie&quot; | female | 8.00 | 0 | 2 | C.A. 31921 | 26.2500 | NaN | S | . 238 239 | 0 | 2 | Pengelly, Mr. Frederick William | male | 19.00 | 0 | 0 | 28665 | 10.5000 | NaN | S | . 239 240 | 0 | 2 | Hunt, Mr. George Henry | male | 33.00 | 0 | 0 | SCO/W 1585 | 12.2750 | NaN | S | . 240 241 | 0 | 3 | Zabour, Miss. Thamine | female | NaN | 1 | 0 | 2665 | 14.4542 | NaN | C | . 241 242 | 1 | 3 | Murphy, Miss. Katherine &quot;Kate&quot; | female | NaN | 1 | 0 | 367230 | 15.5000 | NaN | Q | . 242 243 | 0 | 2 | Coleridge, Mr. Reginald Charles | male | 29.00 | 0 | 0 | W./C. 14263 | 10.5000 | NaN | S | . 243 244 | 0 | 3 | Maenpaa, Mr. Matti Alexanteri | male | 22.00 | 0 | 0 | STON/O 2. 3101275 | 7.1250 | NaN | S | . 244 245 | 0 | 3 | Attalah, Mr. Sleiman | male | 30.00 | 0 | 0 | 2694 | 7.2250 | NaN | C | . 245 246 | 0 | 1 | Minahan, Dr. William Edward | male | 44.00 | 2 | 0 | 19928 | 90.0000 | C78 | Q | . 246 247 | 0 | 3 | Lindahl, Miss. Agda Thorilda Viktoria | female | 25.00 | 0 | 0 | 347071 | 7.7750 | NaN | S | . 247 248 | 1 | 2 | Hamalainen, Mrs. William (Anna) | female | 24.00 | 0 | 2 | 250649 | 14.5000 | NaN | S | . 248 249 | 1 | 1 | Beckwith, Mr. Richard Leonard | male | 37.00 | 1 | 1 | 11751 | 52.5542 | D35 | S | . 249 250 | 0 | 2 | Carter, Rev. Ernest Courtenay | male | 54.00 | 1 | 0 | 244252 | 26.0000 | NaN | S | . 250 251 | 0 | 3 | Reed, Mr. James George | male | NaN | 0 | 0 | 362316 | 7.2500 | NaN | S | . 251 252 | 0 | 3 | Strom, Mrs. Wilhelm (Elna Matilda Persson) | female | 29.00 | 1 | 1 | 347054 | 10.4625 | G6 | S | . 252 253 | 0 | 1 | Stead, Mr. William Thomas | male | 62.00 | 0 | 0 | 113514 | 26.5500 | C87 | S | . 253 254 | 0 | 3 | Lobb, Mr. William Arthur | male | 30.00 | 1 | 0 | A/5. 3336 | 16.1000 | NaN | S | . 254 255 | 0 | 3 | Rosblom, Mrs. Viktor (Helena Wilhelmina) | female | 41.00 | 0 | 2 | 370129 | 20.2125 | NaN | S | . 255 256 | 1 | 3 | Touma, Mrs. Darwis (Hanne Youssef Razi) | female | 29.00 | 0 | 2 | 2650 | 15.2458 | NaN | C | . 256 257 | 1 | 1 | Thorne, Mrs. Gertrude Maybelle | female | NaN | 0 | 0 | PC 17585 | 79.2000 | NaN | C | . 257 258 | 1 | 1 | Cherry, Miss. Gladys | female | 30.00 | 0 | 0 | 110152 | 86.5000 | B77 | S | . 258 259 | 1 | 1 | Ward, Miss. Anna | female | 35.00 | 0 | 0 | PC 17755 | 512.3292 | NaN | C | . 259 260 | 1 | 2 | Parrish, Mrs. (Lutie Davis) | female | 50.00 | 0 | 1 | 230433 | 26.0000 | NaN | S | . 260 261 | 0 | 3 | Smith, Mr. Thomas | male | NaN | 0 | 0 | 384461 | 7.7500 | NaN | Q | . 261 262 | 1 | 3 | Asplund, Master. Edvin Rojj Felix | male | 3.00 | 4 | 2 | 347077 | 31.3875 | NaN | S | . 262 263 | 0 | 1 | Taussig, Mr. Emil | male | 52.00 | 1 | 1 | 110413 | 79.6500 | E67 | S | . 263 264 | 0 | 1 | Harrison, Mr. William | male | 40.00 | 0 | 0 | 112059 | 0.0000 | B94 | S | . 264 265 | 0 | 3 | Henry, Miss. Delia | female | NaN | 0 | 0 | 382649 | 7.7500 | NaN | Q | . 265 266 | 0 | 2 | Reeves, Mr. David | male | 36.00 | 0 | 0 | C.A. 17248 | 10.5000 | NaN | S | . 266 267 | 0 | 3 | Panula, Mr. Ernesti Arvid | male | 16.00 | 4 | 1 | 3101295 | 39.6875 | NaN | S | . 267 268 | 1 | 3 | Persson, Mr. Ernst Ulrik | male | 25.00 | 1 | 0 | 347083 | 7.7750 | NaN | S | . 268 269 | 1 | 1 | Graham, Mrs. William Thompson (Edith Junkins) | female | 58.00 | 0 | 1 | PC 17582 | 153.4625 | C125 | S | . 269 270 | 1 | 1 | Bissette, Miss. Amelia | female | 35.00 | 0 | 0 | PC 17760 | 135.6333 | C99 | S | . 270 271 | 0 | 1 | Cairns, Mr. Alexander | male | NaN | 0 | 0 | 113798 | 31.0000 | NaN | S | . 271 272 | 1 | 3 | Tornquist, Mr. William Henry | male | 25.00 | 0 | 0 | LINE | 0.0000 | NaN | S | . 272 273 | 1 | 2 | Mellinger, Mrs. (Elizabeth Anne Maidment) | female | 41.00 | 0 | 1 | 250644 | 19.5000 | NaN | S | . 273 274 | 0 | 1 | Natsch, Mr. Charles H | male | 37.00 | 0 | 1 | PC 17596 | 29.7000 | C118 | C | . 274 275 | 1 | 3 | Healy, Miss. Hanora &quot;Nora&quot; | female | NaN | 0 | 0 | 370375 | 7.7500 | NaN | Q | . 275 276 | 1 | 1 | Andrews, Miss. Kornelia Theodosia | female | 63.00 | 1 | 0 | 13502 | 77.9583 | D7 | S | . 276 277 | 0 | 3 | Lindblom, Miss. Augusta Charlotta | female | 45.00 | 0 | 0 | 347073 | 7.7500 | NaN | S | . 277 278 | 0 | 2 | Parkes, Mr. Francis &quot;Frank&quot; | male | NaN | 0 | 0 | 239853 | 0.0000 | NaN | S | . 278 279 | 0 | 3 | Rice, Master. Eric | male | 7.00 | 4 | 1 | 382652 | 29.1250 | NaN | Q | . 279 280 | 1 | 3 | Abbott, Mrs. Stanton (Rosa Hunt) | female | 35.00 | 1 | 1 | C.A. 2673 | 20.2500 | NaN | S | . 280 281 | 0 | 3 | Duane, Mr. Frank | male | 65.00 | 0 | 0 | 336439 | 7.7500 | NaN | Q | . 281 282 | 0 | 3 | Olsson, Mr. Nils Johan Goransson | male | 28.00 | 0 | 0 | 347464 | 7.8542 | NaN | S | . 282 283 | 0 | 3 | de Pelsmaeker, Mr. Alfons | male | 16.00 | 0 | 0 | 345778 | 9.5000 | NaN | S | . 283 284 | 1 | 3 | Dorking, Mr. Edward Arthur | male | 19.00 | 0 | 0 | A/5. 10482 | 8.0500 | NaN | S | . 284 285 | 0 | 1 | Smith, Mr. Richard William | male | NaN | 0 | 0 | 113056 | 26.0000 | A19 | S | . 285 286 | 0 | 3 | Stankovic, Mr. Ivan | male | 33.00 | 0 | 0 | 349239 | 8.6625 | NaN | C | . 286 287 | 1 | 3 | de Mulder, Mr. Theodore | male | 30.00 | 0 | 0 | 345774 | 9.5000 | NaN | S | . 287 288 | 0 | 3 | Naidenoff, Mr. Penko | male | 22.00 | 0 | 0 | 349206 | 7.8958 | NaN | S | . 288 289 | 1 | 2 | Hosono, Mr. Masabumi | male | 42.00 | 0 | 0 | 237798 | 13.0000 | NaN | S | . 289 290 | 1 | 3 | Connolly, Miss. Kate | female | 22.00 | 0 | 0 | 370373 | 7.7500 | NaN | Q | . 290 291 | 1 | 1 | Barber, Miss. Ellen &quot;Nellie&quot; | female | 26.00 | 0 | 0 | 19877 | 78.8500 | NaN | S | . 291 292 | 1 | 1 | Bishop, Mrs. Dickinson H (Helen Walton) | female | 19.00 | 1 | 0 | 11967 | 91.0792 | B49 | C | . 292 293 | 0 | 2 | Levy, Mr. Rene Jacques | male | 36.00 | 0 | 0 | SC/Paris 2163 | 12.8750 | D | C | . 293 294 | 0 | 3 | Haas, Miss. Aloisia | female | 24.00 | 0 | 0 | 349236 | 8.8500 | NaN | S | . 294 295 | 0 | 3 | Mineff, Mr. Ivan | male | 24.00 | 0 | 0 | 349233 | 7.8958 | NaN | S | . 295 296 | 0 | 1 | Lewy, Mr. Ervin G | male | NaN | 0 | 0 | PC 17612 | 27.7208 | NaN | C | . 296 297 | 0 | 3 | Hanna, Mr. Mansour | male | 23.50 | 0 | 0 | 2693 | 7.2292 | NaN | C | . 297 298 | 0 | 1 | Allison, Miss. Helen Loraine | female | 2.00 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | . 298 299 | 1 | 1 | Saalfeld, Mr. Adolphe | male | NaN | 0 | 0 | 19988 | 30.5000 | C106 | S | . 299 300 | 1 | 1 | Baxter, Mrs. James (Helene DeLaudeniere Chaput) | female | 50.00 | 0 | 1 | PC 17558 | 247.5208 | B58 B60 | C | . 300 301 | 1 | 3 | Kelly, Miss. Anna Katherine &quot;Annie Kate&quot; | female | NaN | 0 | 0 | 9234 | 7.7500 | NaN | Q | . 301 302 | 1 | 3 | McCoy, Mr. Bernard | male | NaN | 2 | 0 | 367226 | 23.2500 | NaN | Q | . 302 303 | 0 | 3 | Johnson, Mr. William Cahoone Jr | male | 19.00 | 0 | 0 | LINE | 0.0000 | NaN | S | . 303 304 | 1 | 2 | Keane, Miss. Nora A | female | NaN | 0 | 0 | 226593 | 12.3500 | E101 | Q | . 304 305 | 0 | 3 | Williams, Mr. Howard Hugh &quot;Harry&quot; | male | NaN | 0 | 0 | A/5 2466 | 8.0500 | NaN | S | . 305 306 | 1 | 1 | Allison, Master. Hudson Trevor | male | 0.92 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | . 306 307 | 1 | 1 | Fleming, Miss. Margaret | female | NaN | 0 | 0 | 17421 | 110.8833 | NaN | C | . 307 308 | 1 | 1 | Penasco y Castellana, Mrs. Victor de Satode (Maria Josefa Perez de Soto y Vallejo) | female | 17.00 | 1 | 0 | PC 17758 | 108.9000 | C65 | C | . 308 309 | 0 | 2 | Abelson, Mr. Samuel | male | 30.00 | 1 | 0 | P/PP 3381 | 24.0000 | NaN | C | . 309 310 | 1 | 1 | Francatelli, Miss. Laura Mabel | female | 30.00 | 0 | 0 | PC 17485 | 56.9292 | E36 | C | . 310 311 | 1 | 1 | Hays, Miss. Margaret Bechstein | female | 24.00 | 0 | 0 | 11767 | 83.1583 | C54 | C | . 311 312 | 1 | 1 | Ryerson, Miss. Emily Borie | female | 18.00 | 2 | 2 | PC 17608 | 262.3750 | B57 B59 B63 B66 | C | . 312 313 | 0 | 2 | Lahtinen, Mrs. William (Anna Sylfven) | female | 26.00 | 1 | 1 | 250651 | 26.0000 | NaN | S | . 313 314 | 0 | 3 | Hendekovic, Mr. Ignjac | male | 28.00 | 0 | 0 | 349243 | 7.8958 | NaN | S | . 314 315 | 0 | 2 | Hart, Mr. Benjamin | male | 43.00 | 1 | 1 | F.C.C. 13529 | 26.2500 | NaN | S | . 315 316 | 1 | 3 | Nilsson, Miss. Helmina Josefina | female | 26.00 | 0 | 0 | 347470 | 7.8542 | NaN | S | . 316 317 | 1 | 2 | Kantor, Mrs. Sinai (Miriam Sternin) | female | 24.00 | 1 | 0 | 244367 | 26.0000 | NaN | S | . 317 318 | 0 | 2 | Moraweck, Dr. Ernest | male | 54.00 | 0 | 0 | 29011 | 14.0000 | NaN | S | . 318 319 | 1 | 1 | Wick, Miss. Mary Natalie | female | 31.00 | 0 | 2 | 36928 | 164.8667 | C7 | S | . 319 320 | 1 | 1 | Spedden, Mrs. Frederic Oakley (Margaretta Corning Stone) | female | 40.00 | 1 | 1 | 16966 | 134.5000 | E34 | C | . 320 321 | 0 | 3 | Dennis, Mr. Samuel | male | 22.00 | 0 | 0 | A/5 21172 | 7.2500 | NaN | S | . 321 322 | 0 | 3 | Danoff, Mr. Yoto | male | 27.00 | 0 | 0 | 349219 | 7.8958 | NaN | S | . 322 323 | 1 | 2 | Slayter, Miss. Hilda Mary | female | 30.00 | 0 | 0 | 234818 | 12.3500 | NaN | Q | . 323 324 | 1 | 2 | Caldwell, Mrs. Albert Francis (Sylvia Mae Harbaugh) | female | 22.00 | 1 | 1 | 248738 | 29.0000 | NaN | S | . 324 325 | 0 | 3 | Sage, Mr. George John Jr | male | NaN | 8 | 2 | CA. 2343 | 69.5500 | NaN | S | . 325 326 | 1 | 1 | Young, Miss. Marie Grice | female | 36.00 | 0 | 0 | PC 17760 | 135.6333 | C32 | C | . 326 327 | 0 | 3 | Nysveen, Mr. Johan Hansen | male | 61.00 | 0 | 0 | 345364 | 6.2375 | NaN | S | . 327 328 | 1 | 2 | Ball, Mrs. (Ada E Hall) | female | 36.00 | 0 | 0 | 28551 | 13.0000 | D | S | . 328 329 | 1 | 3 | Goldsmith, Mrs. Frank John (Emily Alice Brown) | female | 31.00 | 1 | 1 | 363291 | 20.5250 | NaN | S | . 329 330 | 1 | 1 | Hippach, Miss. Jean Gertrude | female | 16.00 | 0 | 1 | 111361 | 57.9792 | B18 | C | . 330 331 | 1 | 3 | McCoy, Miss. Agnes | female | NaN | 2 | 0 | 367226 | 23.2500 | NaN | Q | . 331 332 | 0 | 1 | Partner, Mr. Austen | male | 45.50 | 0 | 0 | 113043 | 28.5000 | C124 | S | . 332 333 | 0 | 1 | Graham, Mr. George Edward | male | 38.00 | 0 | 1 | PC 17582 | 153.4625 | C91 | S | . 333 334 | 0 | 3 | Vander Planke, Mr. Leo Edmondus | male | 16.00 | 2 | 0 | 345764 | 18.0000 | NaN | S | . 334 335 | 1 | 1 | Frauenthal, Mrs. Henry William (Clara Heinsheimer) | female | NaN | 1 | 0 | PC 17611 | 133.6500 | NaN | S | . 335 336 | 0 | 3 | Denkoff, Mr. Mitto | male | NaN | 0 | 0 | 349225 | 7.8958 | NaN | S | . 336 337 | 0 | 1 | Pears, Mr. Thomas Clinton | male | 29.00 | 1 | 0 | 113776 | 66.6000 | C2 | S | . 337 338 | 1 | 1 | Burns, Miss. Elizabeth Margaret | female | 41.00 | 0 | 0 | 16966 | 134.5000 | E40 | C | . 338 339 | 1 | 3 | Dahl, Mr. Karl Edwart | male | 45.00 | 0 | 0 | 7598 | 8.0500 | NaN | S | . 339 340 | 0 | 1 | Blackwell, Mr. Stephen Weart | male | 45.00 | 0 | 0 | 113784 | 35.5000 | T | S | . 340 341 | 1 | 2 | Navratil, Master. Edmond Roger | male | 2.00 | 1 | 1 | 230080 | 26.0000 | F2 | S | . 341 342 | 1 | 1 | Fortune, Miss. Alice Elizabeth | female | 24.00 | 3 | 2 | 19950 | 263.0000 | C23 C25 C27 | S | . 342 343 | 0 | 2 | Collander, Mr. Erik Gustaf | male | 28.00 | 0 | 0 | 248740 | 13.0000 | NaN | S | . 343 344 | 0 | 2 | Sedgwick, Mr. Charles Frederick Waddington | male | 25.00 | 0 | 0 | 244361 | 13.0000 | NaN | S | . 344 345 | 0 | 2 | Fox, Mr. Stanley Hubert | male | 36.00 | 0 | 0 | 229236 | 13.0000 | NaN | S | . 345 346 | 1 | 2 | Brown, Miss. Amelia &quot;Mildred&quot; | female | 24.00 | 0 | 0 | 248733 | 13.0000 | F33 | S | . 346 347 | 1 | 2 | Smith, Miss. Marion Elsie | female | 40.00 | 0 | 0 | 31418 | 13.0000 | NaN | S | . 347 348 | 1 | 3 | Davison, Mrs. Thomas Henry (Mary E Finck) | female | NaN | 1 | 0 | 386525 | 16.1000 | NaN | S | . 348 349 | 1 | 3 | Coutts, Master. William Loch &quot;William&quot; | male | 3.00 | 1 | 1 | C.A. 37671 | 15.9000 | NaN | S | . 349 350 | 0 | 3 | Dimic, Mr. Jovan | male | 42.00 | 0 | 0 | 315088 | 8.6625 | NaN | S | . 350 351 | 0 | 3 | Odahl, Mr. Nils Martin | male | 23.00 | 0 | 0 | 7267 | 9.2250 | NaN | S | . 351 352 | 0 | 1 | Williams-Lambert, Mr. Fletcher Fellows | male | NaN | 0 | 0 | 113510 | 35.0000 | C128 | S | . 352 353 | 0 | 3 | Elias, Mr. Tannous | male | 15.00 | 1 | 1 | 2695 | 7.2292 | NaN | C | . 353 354 | 0 | 3 | Arnold-Franchi, Mr. Josef | male | 25.00 | 1 | 0 | 349237 | 17.8000 | NaN | S | . 354 355 | 0 | 3 | Yousif, Mr. Wazli | male | NaN | 0 | 0 | 2647 | 7.2250 | NaN | C | . 355 356 | 0 | 3 | Vanden Steen, Mr. Leo Peter | male | 28.00 | 0 | 0 | 345783 | 9.5000 | NaN | S | . 356 357 | 1 | 1 | Bowerman, Miss. Elsie Edith | female | 22.00 | 0 | 1 | 113505 | 55.0000 | E33 | S | . 357 358 | 0 | 2 | Funk, Miss. Annie Clemmer | female | 38.00 | 0 | 0 | 237671 | 13.0000 | NaN | S | . 358 359 | 1 | 3 | McGovern, Miss. Mary | female | NaN | 0 | 0 | 330931 | 7.8792 | NaN | Q | . 359 360 | 1 | 3 | Mockler, Miss. Helen Mary &quot;Ellie&quot; | female | NaN | 0 | 0 | 330980 | 7.8792 | NaN | Q | . 360 361 | 0 | 3 | Skoog, Mr. Wilhelm | male | 40.00 | 1 | 4 | 347088 | 27.9000 | NaN | S | . 361 362 | 0 | 2 | del Carlo, Mr. Sebastiano | male | 29.00 | 1 | 0 | SC/PARIS 2167 | 27.7208 | NaN | C | . 362 363 | 0 | 3 | Barbara, Mrs. (Catherine David) | female | 45.00 | 0 | 1 | 2691 | 14.4542 | NaN | C | . 363 364 | 0 | 3 | Asim, Mr. Adola | male | 35.00 | 0 | 0 | SOTON/O.Q. 3101310 | 7.0500 | NaN | S | . 364 365 | 0 | 3 | O&#39;Brien, Mr. Thomas | male | NaN | 1 | 0 | 370365 | 15.5000 | NaN | Q | . 365 366 | 0 | 3 | Adahl, Mr. Mauritz Nils Martin | male | 30.00 | 0 | 0 | C 7076 | 7.2500 | NaN | S | . 366 367 | 1 | 1 | Warren, Mrs. Frank Manley (Anna Sophia Atkinson) | female | 60.00 | 1 | 0 | 110813 | 75.2500 | D37 | C | . 367 368 | 1 | 3 | Moussa, Mrs. (Mantoura Boulos) | female | NaN | 0 | 0 | 2626 | 7.2292 | NaN | C | . 368 369 | 1 | 3 | Jermyn, Miss. Annie | female | NaN | 0 | 0 | 14313 | 7.7500 | NaN | Q | . 369 370 | 1 | 1 | Aubart, Mme. Leontine Pauline | female | 24.00 | 0 | 0 | PC 17477 | 69.3000 | B35 | C | . 370 371 | 1 | 1 | Harder, Mr. George Achilles | male | 25.00 | 1 | 0 | 11765 | 55.4417 | E50 | C | . 371 372 | 0 | 3 | Wiklund, Mr. Jakob Alfred | male | 18.00 | 1 | 0 | 3101267 | 6.4958 | NaN | S | . 372 373 | 0 | 3 | Beavan, Mr. William Thomas | male | 19.00 | 0 | 0 | 323951 | 8.0500 | NaN | S | . 373 374 | 0 | 1 | Ringhini, Mr. Sante | male | 22.00 | 0 | 0 | PC 17760 | 135.6333 | NaN | C | . 374 375 | 0 | 3 | Palsson, Miss. Stina Viola | female | 3.00 | 3 | 1 | 349909 | 21.0750 | NaN | S | . 375 376 | 1 | 1 | Meyer, Mrs. Edgar Joseph (Leila Saks) | female | NaN | 1 | 0 | PC 17604 | 82.1708 | NaN | C | . 376 377 | 1 | 3 | Landergren, Miss. Aurora Adelia | female | 22.00 | 0 | 0 | C 7077 | 7.2500 | NaN | S | . 377 378 | 0 | 1 | Widener, Mr. Harry Elkins | male | 27.00 | 0 | 2 | 113503 | 211.5000 | C82 | C | . 378 379 | 0 | 3 | Betros, Mr. Tannous | male | 20.00 | 0 | 0 | 2648 | 4.0125 | NaN | C | . 379 380 | 0 | 3 | Gustafsson, Mr. Karl Gideon | male | 19.00 | 0 | 0 | 347069 | 7.7750 | NaN | S | . 380 381 | 1 | 1 | Bidois, Miss. Rosalie | female | 42.00 | 0 | 0 | PC 17757 | 227.5250 | NaN | C | . 381 382 | 1 | 3 | Nakid, Miss. Maria (&quot;Mary&quot;) | female | 1.00 | 0 | 2 | 2653 | 15.7417 | NaN | C | . 382 383 | 0 | 3 | Tikkanen, Mr. Juho | male | 32.00 | 0 | 0 | STON/O 2. 3101293 | 7.9250 | NaN | S | . 383 384 | 1 | 1 | Holverson, Mrs. Alexander Oskar (Mary Aline Towner) | female | 35.00 | 1 | 0 | 113789 | 52.0000 | NaN | S | . 384 385 | 0 | 3 | Plotcharsky, Mr. Vasil | male | NaN | 0 | 0 | 349227 | 7.8958 | NaN | S | . 385 386 | 0 | 2 | Davies, Mr. Charles Henry | male | 18.00 | 0 | 0 | S.O.C. 14879 | 73.5000 | NaN | S | . 386 387 | 0 | 3 | Goodwin, Master. Sidney Leonard | male | 1.00 | 5 | 2 | CA 2144 | 46.9000 | NaN | S | . 387 388 | 1 | 2 | Buss, Miss. Kate | female | 36.00 | 0 | 0 | 27849 | 13.0000 | NaN | S | . 388 389 | 0 | 3 | Sadlier, Mr. Matthew | male | NaN | 0 | 0 | 367655 | 7.7292 | NaN | Q | . 389 390 | 1 | 2 | Lehmann, Miss. Bertha | female | 17.00 | 0 | 0 | SC 1748 | 12.0000 | NaN | C | . 390 391 | 1 | 1 | Carter, Mr. William Ernest | male | 36.00 | 1 | 2 | 113760 | 120.0000 | B96 B98 | S | . 391 392 | 1 | 3 | Jansson, Mr. Carl Olof | male | 21.00 | 0 | 0 | 350034 | 7.7958 | NaN | S | . 392 393 | 0 | 3 | Gustafsson, Mr. Johan Birger | male | 28.00 | 2 | 0 | 3101277 | 7.9250 | NaN | S | . 393 394 | 1 | 1 | Newell, Miss. Marjorie | female | 23.00 | 1 | 0 | 35273 | 113.2750 | D36 | C | . 394 395 | 1 | 3 | Sandstrom, Mrs. Hjalmar (Agnes Charlotta Bengtsson) | female | 24.00 | 0 | 2 | PP 9549 | 16.7000 | G6 | S | . 395 396 | 0 | 3 | Johansson, Mr. Erik | male | 22.00 | 0 | 0 | 350052 | 7.7958 | NaN | S | . 396 397 | 0 | 3 | Olsson, Miss. Elina | female | 31.00 | 0 | 0 | 350407 | 7.8542 | NaN | S | . 397 398 | 0 | 2 | McKane, Mr. Peter David | male | 46.00 | 0 | 0 | 28403 | 26.0000 | NaN | S | . 398 399 | 0 | 2 | Pain, Dr. Alfred | male | 23.00 | 0 | 0 | 244278 | 10.5000 | NaN | S | . 399 400 | 1 | 2 | Trout, Mrs. William H (Jessie L) | female | 28.00 | 0 | 0 | 240929 | 12.6500 | NaN | S | . 400 401 | 1 | 3 | Niskanen, Mr. Juha | male | 39.00 | 0 | 0 | STON/O 2. 3101289 | 7.9250 | NaN | S | . 401 402 | 0 | 3 | Adams, Mr. John | male | 26.00 | 0 | 0 | 341826 | 8.0500 | NaN | S | . 402 403 | 0 | 3 | Jussila, Miss. Mari Aina | female | 21.00 | 1 | 0 | 4137 | 9.8250 | NaN | S | . 403 404 | 0 | 3 | Hakkarainen, Mr. Pekka Pietari | male | 28.00 | 1 | 0 | STON/O2. 3101279 | 15.8500 | NaN | S | . 404 405 | 0 | 3 | Oreskovic, Miss. Marija | female | 20.00 | 0 | 0 | 315096 | 8.6625 | NaN | S | . 405 406 | 0 | 2 | Gale, Mr. Shadrach | male | 34.00 | 1 | 0 | 28664 | 21.0000 | NaN | S | . 406 407 | 0 | 3 | Widegren, Mr. Carl/Charles Peter | male | 51.00 | 0 | 0 | 347064 | 7.7500 | NaN | S | . 407 408 | 1 | 2 | Richards, Master. William Rowe | male | 3.00 | 1 | 1 | 29106 | 18.7500 | NaN | S | . 408 409 | 0 | 3 | Birkeland, Mr. Hans Martin Monsen | male | 21.00 | 0 | 0 | 312992 | 7.7750 | NaN | S | . 409 410 | 0 | 3 | Lefebre, Miss. Ida | female | NaN | 3 | 1 | 4133 | 25.4667 | NaN | S | . 410 411 | 0 | 3 | Sdycoff, Mr. Todor | male | NaN | 0 | 0 | 349222 | 7.8958 | NaN | S | . 411 412 | 0 | 3 | Hart, Mr. Henry | male | NaN | 0 | 0 | 394140 | 6.8583 | NaN | Q | . 412 413 | 1 | 1 | Minahan, Miss. Daisy E | female | 33.00 | 1 | 0 | 19928 | 90.0000 | C78 | Q | . 413 414 | 0 | 2 | Cunningham, Mr. Alfred Fleming | male | NaN | 0 | 0 | 239853 | 0.0000 | NaN | S | . 414 415 | 1 | 3 | Sundman, Mr. Johan Julian | male | 44.00 | 0 | 0 | STON/O 2. 3101269 | 7.9250 | NaN | S | . 415 416 | 0 | 3 | Meek, Mrs. Thomas (Annie Louise Rowley) | female | NaN | 0 | 0 | 343095 | 8.0500 | NaN | S | . 416 417 | 1 | 2 | Drew, Mrs. James Vivian (Lulu Thorne Christian) | female | 34.00 | 1 | 1 | 28220 | 32.5000 | NaN | S | . 417 418 | 1 | 2 | Silven, Miss. Lyyli Karoliina | female | 18.00 | 0 | 2 | 250652 | 13.0000 | NaN | S | . 418 419 | 0 | 2 | Matthews, Mr. William John | male | 30.00 | 0 | 0 | 28228 | 13.0000 | NaN | S | . 419 420 | 0 | 3 | Van Impe, Miss. Catharina | female | 10.00 | 0 | 2 | 345773 | 24.1500 | NaN | S | . 420 421 | 0 | 3 | Gheorgheff, Mr. Stanio | male | NaN | 0 | 0 | 349254 | 7.8958 | NaN | C | . 421 422 | 0 | 3 | Charters, Mr. David | male | 21.00 | 0 | 0 | A/5. 13032 | 7.7333 | NaN | Q | . 422 423 | 0 | 3 | Zimmerman, Mr. Leo | male | 29.00 | 0 | 0 | 315082 | 7.8750 | NaN | S | . 423 424 | 0 | 3 | Danbom, Mrs. Ernst Gilbert (Anna Sigrid Maria Brogren) | female | 28.00 | 1 | 1 | 347080 | 14.4000 | NaN | S | . 424 425 | 0 | 3 | Rosblom, Mr. Viktor Richard | male | 18.00 | 1 | 1 | 370129 | 20.2125 | NaN | S | . 425 426 | 0 | 3 | Wiseman, Mr. Phillippe | male | NaN | 0 | 0 | A/4. 34244 | 7.2500 | NaN | S | . 426 427 | 1 | 2 | Clarke, Mrs. Charles V (Ada Maria Winfield) | female | 28.00 | 1 | 0 | 2003 | 26.0000 | NaN | S | . 427 428 | 1 | 2 | Phillips, Miss. Kate Florence (&quot;Mrs Kate Louise Phillips Marshall&quot;) | female | 19.00 | 0 | 0 | 250655 | 26.0000 | NaN | S | . 428 429 | 0 | 3 | Flynn, Mr. James | male | NaN | 0 | 0 | 364851 | 7.7500 | NaN | Q | . 429 430 | 1 | 3 | Pickard, Mr. Berk (Berk Trembisky) | male | 32.00 | 0 | 0 | SOTON/O.Q. 392078 | 8.0500 | E10 | S | . 430 431 | 1 | 1 | Bjornstrom-Steffansson, Mr. Mauritz Hakan | male | 28.00 | 0 | 0 | 110564 | 26.5500 | C52 | S | . 431 432 | 1 | 3 | Thorneycroft, Mrs. Percival (Florence Kate White) | female | NaN | 1 | 0 | 376564 | 16.1000 | NaN | S | . 432 433 | 1 | 2 | Louch, Mrs. Charles Alexander (Alice Adelaide Slow) | female | 42.00 | 1 | 0 | SC/AH 3085 | 26.0000 | NaN | S | . 433 434 | 0 | 3 | Kallio, Mr. Nikolai Erland | male | 17.00 | 0 | 0 | STON/O 2. 3101274 | 7.1250 | NaN | S | . 434 435 | 0 | 1 | Silvey, Mr. William Baird | male | 50.00 | 1 | 0 | 13507 | 55.9000 | E44 | S | . 435 436 | 1 | 1 | Carter, Miss. Lucile Polk | female | 14.00 | 1 | 2 | 113760 | 120.0000 | B96 B98 | S | . 436 437 | 0 | 3 | Ford, Miss. Doolina Margaret &quot;Daisy&quot; | female | 21.00 | 2 | 2 | W./C. 6608 | 34.3750 | NaN | S | . 437 438 | 1 | 2 | Richards, Mrs. Sidney (Emily Hocking) | female | 24.00 | 2 | 3 | 29106 | 18.7500 | NaN | S | . 438 439 | 0 | 1 | Fortune, Mr. Mark | male | 64.00 | 1 | 4 | 19950 | 263.0000 | C23 C25 C27 | S | . 439 440 | 0 | 2 | Kvillner, Mr. Johan Henrik Johannesson | male | 31.00 | 0 | 0 | C.A. 18723 | 10.5000 | NaN | S | . 440 441 | 1 | 2 | Hart, Mrs. Benjamin (Esther Ada Bloomfield) | female | 45.00 | 1 | 1 | F.C.C. 13529 | 26.2500 | NaN | S | . 441 442 | 0 | 3 | Hampe, Mr. Leon | male | 20.00 | 0 | 0 | 345769 | 9.5000 | NaN | S | . 442 443 | 0 | 3 | Petterson, Mr. Johan Emil | male | 25.00 | 1 | 0 | 347076 | 7.7750 | NaN | S | . 443 444 | 1 | 2 | Reynaldo, Ms. Encarnacion | female | 28.00 | 0 | 0 | 230434 | 13.0000 | NaN | S | . 444 445 | 1 | 3 | Johannesen-Bratthammer, Mr. Bernt | male | NaN | 0 | 0 | 65306 | 8.1125 | NaN | S | . 445 446 | 1 | 1 | Dodge, Master. Washington | male | 4.00 | 0 | 2 | 33638 | 81.8583 | A34 | S | . 446 447 | 1 | 2 | Mellinger, Miss. Madeleine Violet | female | 13.00 | 0 | 1 | 250644 | 19.5000 | NaN | S | . 447 448 | 1 | 1 | Seward, Mr. Frederic Kimber | male | 34.00 | 0 | 0 | 113794 | 26.5500 | NaN | S | . 448 449 | 1 | 3 | Baclini, Miss. Marie Catherine | female | 5.00 | 2 | 1 | 2666 | 19.2583 | NaN | C | . 449 450 | 1 | 1 | Peuchen, Major. Arthur Godfrey | male | 52.00 | 0 | 0 | 113786 | 30.5000 | C104 | S | . 450 451 | 0 | 2 | West, Mr. Edwy Arthur | male | 36.00 | 1 | 2 | C.A. 34651 | 27.7500 | NaN | S | . 451 452 | 0 | 3 | Hagland, Mr. Ingvald Olai Olsen | male | NaN | 1 | 0 | 65303 | 19.9667 | NaN | S | . 452 453 | 0 | 1 | Foreman, Mr. Benjamin Laventall | male | 30.00 | 0 | 0 | 113051 | 27.7500 | C111 | C | . 453 454 | 1 | 1 | Goldenberg, Mr. Samuel L | male | 49.00 | 1 | 0 | 17453 | 89.1042 | C92 | C | . 454 455 | 0 | 3 | Peduzzi, Mr. Joseph | male | NaN | 0 | 0 | A/5 2817 | 8.0500 | NaN | S | . 455 456 | 1 | 3 | Jalsevac, Mr. Ivan | male | 29.00 | 0 | 0 | 349240 | 7.8958 | NaN | C | . 456 457 | 0 | 1 | Millet, Mr. Francis Davis | male | 65.00 | 0 | 0 | 13509 | 26.5500 | E38 | S | . 457 458 | 1 | 1 | Kenyon, Mrs. Frederick R (Marion) | female | NaN | 1 | 0 | 17464 | 51.8625 | D21 | S | . 458 459 | 1 | 2 | Toomey, Miss. Ellen | female | 50.00 | 0 | 0 | F.C.C. 13531 | 10.5000 | NaN | S | . 459 460 | 0 | 3 | O&#39;Connor, Mr. Maurice | male | NaN | 0 | 0 | 371060 | 7.7500 | NaN | Q | . 460 461 | 1 | 1 | Anderson, Mr. Harry | male | 48.00 | 0 | 0 | 19952 | 26.5500 | E12 | S | . 461 462 | 0 | 3 | Morley, Mr. William | male | 34.00 | 0 | 0 | 364506 | 8.0500 | NaN | S | . 462 463 | 0 | 1 | Gee, Mr. Arthur H | male | 47.00 | 0 | 0 | 111320 | 38.5000 | E63 | S | . 463 464 | 0 | 2 | Milling, Mr. Jacob Christian | male | 48.00 | 0 | 0 | 234360 | 13.0000 | NaN | S | . 464 465 | 0 | 3 | Maisner, Mr. Simon | male | NaN | 0 | 0 | A/S 2816 | 8.0500 | NaN | S | . 465 466 | 0 | 3 | Goncalves, Mr. Manuel Estanslas | male | 38.00 | 0 | 0 | SOTON/O.Q. 3101306 | 7.0500 | NaN | S | . 466 467 | 0 | 2 | Campbell, Mr. William | male | NaN | 0 | 0 | 239853 | 0.0000 | NaN | S | . 467 468 | 0 | 1 | Smart, Mr. John Montgomery | male | 56.00 | 0 | 0 | 113792 | 26.5500 | NaN | S | . 468 469 | 0 | 3 | Scanlan, Mr. James | male | NaN | 0 | 0 | 36209 | 7.7250 | NaN | Q | . 469 470 | 1 | 3 | Baclini, Miss. Helene Barbara | female | 0.75 | 2 | 1 | 2666 | 19.2583 | NaN | C | . 470 471 | 0 | 3 | Keefe, Mr. Arthur | male | NaN | 0 | 0 | 323592 | 7.2500 | NaN | S | . 471 472 | 0 | 3 | Cacic, Mr. Luka | male | 38.00 | 0 | 0 | 315089 | 8.6625 | NaN | S | . 472 473 | 1 | 2 | West, Mrs. Edwy Arthur (Ada Mary Worth) | female | 33.00 | 1 | 2 | C.A. 34651 | 27.7500 | NaN | S | . 473 474 | 1 | 2 | Jerwan, Mrs. Amin S (Marie Marthe Thuillard) | female | 23.00 | 0 | 0 | SC/AH Basle 541 | 13.7917 | D | C | . 474 475 | 0 | 3 | Strandberg, Miss. Ida Sofia | female | 22.00 | 0 | 0 | 7553 | 9.8375 | NaN | S | . 475 476 | 0 | 1 | Clifford, Mr. George Quincy | male | NaN | 0 | 0 | 110465 | 52.0000 | A14 | S | . 476 477 | 0 | 2 | Renouf, Mr. Peter Henry | male | 34.00 | 1 | 0 | 31027 | 21.0000 | NaN | S | . 477 478 | 0 | 3 | Braund, Mr. Lewis Richard | male | 29.00 | 1 | 0 | 3460 | 7.0458 | NaN | S | . 478 479 | 0 | 3 | Karlsson, Mr. Nils August | male | 22.00 | 0 | 0 | 350060 | 7.5208 | NaN | S | . 479 480 | 1 | 3 | Hirvonen, Miss. Hildur E | female | 2.00 | 0 | 1 | 3101298 | 12.2875 | NaN | S | . 480 481 | 0 | 3 | Goodwin, Master. Harold Victor | male | 9.00 | 5 | 2 | CA 2144 | 46.9000 | NaN | S | . 481 482 | 0 | 2 | Frost, Mr. Anthony Wood &quot;Archie&quot; | male | NaN | 0 | 0 | 239854 | 0.0000 | NaN | S | . 482 483 | 0 | 3 | Rouse, Mr. Richard Henry | male | 50.00 | 0 | 0 | A/5 3594 | 8.0500 | NaN | S | . 483 484 | 1 | 3 | Turkula, Mrs. (Hedwig) | female | 63.00 | 0 | 0 | 4134 | 9.5875 | NaN | S | . 484 485 | 1 | 1 | Bishop, Mr. Dickinson H | male | 25.00 | 1 | 0 | 11967 | 91.0792 | B49 | C | . 485 486 | 0 | 3 | Lefebre, Miss. Jeannie | female | NaN | 3 | 1 | 4133 | 25.4667 | NaN | S | . 486 487 | 1 | 1 | Hoyt, Mrs. Frederick Maxfield (Jane Anne Forby) | female | 35.00 | 1 | 0 | 19943 | 90.0000 | C93 | S | . 487 488 | 0 | 1 | Kent, Mr. Edward Austin | male | 58.00 | 0 | 0 | 11771 | 29.7000 | B37 | C | . 488 489 | 0 | 3 | Somerton, Mr. Francis William | male | 30.00 | 0 | 0 | A.5. 18509 | 8.0500 | NaN | S | . 489 490 | 1 | 3 | Coutts, Master. Eden Leslie &quot;Neville&quot; | male | 9.00 | 1 | 1 | C.A. 37671 | 15.9000 | NaN | S | . 490 491 | 0 | 3 | Hagland, Mr. Konrad Mathias Reiersen | male | NaN | 1 | 0 | 65304 | 19.9667 | NaN | S | . 491 492 | 0 | 3 | Windelov, Mr. Einar | male | 21.00 | 0 | 0 | SOTON/OQ 3101317 | 7.2500 | NaN | S | . 492 493 | 0 | 1 | Molson, Mr. Harry Markland | male | 55.00 | 0 | 0 | 113787 | 30.5000 | C30 | S | . 493 494 | 0 | 1 | Artagaveytia, Mr. Ramon | male | 71.00 | 0 | 0 | PC 17609 | 49.5042 | NaN | C | . 494 495 | 0 | 3 | Stanley, Mr. Edward Roland | male | 21.00 | 0 | 0 | A/4 45380 | 8.0500 | NaN | S | . 495 496 | 0 | 3 | Yousseff, Mr. Gerious | male | NaN | 0 | 0 | 2627 | 14.4583 | NaN | C | . 496 497 | 1 | 1 | Eustis, Miss. Elizabeth Mussey | female | 54.00 | 1 | 0 | 36947 | 78.2667 | D20 | C | . 497 498 | 0 | 3 | Shellard, Mr. Frederick William | male | NaN | 0 | 0 | C.A. 6212 | 15.1000 | NaN | S | . 498 499 | 0 | 1 | Allison, Mrs. Hudson J C (Bessie Waldo Daniels) | female | 25.00 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | . 499 500 | 0 | 3 | Svensson, Mr. Olof | male | 24.00 | 0 | 0 | 350035 | 7.7958 | NaN | S | . 500 501 | 0 | 3 | Calic, Mr. Petar | male | 17.00 | 0 | 0 | 315086 | 8.6625 | NaN | S | . 501 502 | 0 | 3 | Canavan, Miss. Mary | female | 21.00 | 0 | 0 | 364846 | 7.7500 | NaN | Q | . 502 503 | 0 | 3 | O&#39;Sullivan, Miss. Bridget Mary | female | NaN | 0 | 0 | 330909 | 7.6292 | NaN | Q | . 503 504 | 0 | 3 | Laitinen, Miss. Kristina Sofia | female | 37.00 | 0 | 0 | 4135 | 9.5875 | NaN | S | . 504 505 | 1 | 1 | Maioni, Miss. Roberta | female | 16.00 | 0 | 0 | 110152 | 86.5000 | B79 | S | . 505 506 | 0 | 1 | Penasco y Castellana, Mr. Victor de Satode | male | 18.00 | 1 | 0 | PC 17758 | 108.9000 | C65 | C | . 506 507 | 1 | 2 | Quick, Mrs. Frederick Charles (Jane Richards) | female | 33.00 | 0 | 2 | 26360 | 26.0000 | NaN | S | . 507 508 | 1 | 1 | Bradley, Mr. George (&quot;George Arthur Brayton&quot;) | male | NaN | 0 | 0 | 111427 | 26.5500 | NaN | S | . 508 509 | 0 | 3 | Olsen, Mr. Henry Margido | male | 28.00 | 0 | 0 | C 4001 | 22.5250 | NaN | S | . 509 510 | 1 | 3 | Lang, Mr. Fang | male | 26.00 | 0 | 0 | 1601 | 56.4958 | NaN | S | . 510 511 | 1 | 3 | Daly, Mr. Eugene Patrick | male | 29.00 | 0 | 0 | 382651 | 7.7500 | NaN | Q | . 511 512 | 0 | 3 | Webber, Mr. James | male | NaN | 0 | 0 | SOTON/OQ 3101316 | 8.0500 | NaN | S | . 512 513 | 1 | 1 | McGough, Mr. James Robert | male | 36.00 | 0 | 0 | PC 17473 | 26.2875 | E25 | S | . 513 514 | 1 | 1 | Rothschild, Mrs. Martin (Elizabeth L. Barrett) | female | 54.00 | 1 | 0 | PC 17603 | 59.4000 | NaN | C | . 514 515 | 0 | 3 | Coleff, Mr. Satio | male | 24.00 | 0 | 0 | 349209 | 7.4958 | NaN | S | . 515 516 | 0 | 1 | Walker, Mr. William Anderson | male | 47.00 | 0 | 0 | 36967 | 34.0208 | D46 | S | . 516 517 | 1 | 2 | Lemore, Mrs. (Amelia Milley) | female | 34.00 | 0 | 0 | C.A. 34260 | 10.5000 | F33 | S | . 517 518 | 0 | 3 | Ryan, Mr. Patrick | male | NaN | 0 | 0 | 371110 | 24.1500 | NaN | Q | . 518 519 | 1 | 2 | Angle, Mrs. William A (Florence &quot;Mary&quot; Agnes Hughes) | female | 36.00 | 1 | 0 | 226875 | 26.0000 | NaN | S | . 519 520 | 0 | 3 | Pavlovic, Mr. Stefo | male | 32.00 | 0 | 0 | 349242 | 7.8958 | NaN | S | . 520 521 | 1 | 1 | Perreault, Miss. Anne | female | 30.00 | 0 | 0 | 12749 | 93.5000 | B73 | S | . 521 522 | 0 | 3 | Vovk, Mr. Janko | male | 22.00 | 0 | 0 | 349252 | 7.8958 | NaN | S | . 522 523 | 0 | 3 | Lahoud, Mr. Sarkis | male | NaN | 0 | 0 | 2624 | 7.2250 | NaN | C | . 523 524 | 1 | 1 | Hippach, Mrs. Louis Albert (Ida Sophia Fischer) | female | 44.00 | 0 | 1 | 111361 | 57.9792 | B18 | C | . 524 525 | 0 | 3 | Kassem, Mr. Fared | male | NaN | 0 | 0 | 2700 | 7.2292 | NaN | C | . 525 526 | 0 | 3 | Farrell, Mr. James | male | 40.50 | 0 | 0 | 367232 | 7.7500 | NaN | Q | . 526 527 | 1 | 2 | Ridsdale, Miss. Lucy | female | 50.00 | 0 | 0 | W./C. 14258 | 10.5000 | NaN | S | . 527 528 | 0 | 1 | Farthing, Mr. John | male | NaN | 0 | 0 | PC 17483 | 221.7792 | C95 | S | . 528 529 | 0 | 3 | Salonen, Mr. Johan Werner | male | 39.00 | 0 | 0 | 3101296 | 7.9250 | NaN | S | . 529 530 | 0 | 2 | Hocking, Mr. Richard George | male | 23.00 | 2 | 1 | 29104 | 11.5000 | NaN | S | . 530 531 | 1 | 2 | Quick, Miss. Phyllis May | female | 2.00 | 1 | 1 | 26360 | 26.0000 | NaN | S | . 531 532 | 0 | 3 | Toufik, Mr. Nakli | male | NaN | 0 | 0 | 2641 | 7.2292 | NaN | C | . 532 533 | 0 | 3 | Elias, Mr. Joseph Jr | male | 17.00 | 1 | 1 | 2690 | 7.2292 | NaN | C | . 533 534 | 1 | 3 | Peter, Mrs. Catherine (Catherine Rizk) | female | NaN | 0 | 2 | 2668 | 22.3583 | NaN | C | . 534 535 | 0 | 3 | Cacic, Miss. Marija | female | 30.00 | 0 | 0 | 315084 | 8.6625 | NaN | S | . 535 536 | 1 | 2 | Hart, Miss. Eva Miriam | female | 7.00 | 0 | 2 | F.C.C. 13529 | 26.2500 | NaN | S | . 536 537 | 0 | 1 | Butt, Major. Archibald Willingham | male | 45.00 | 0 | 0 | 113050 | 26.5500 | B38 | S | . 537 538 | 1 | 1 | LeRoy, Miss. Bertha | female | 30.00 | 0 | 0 | PC 17761 | 106.4250 | NaN | C | . 538 539 | 0 | 3 | Risien, Mr. Samuel Beard | male | NaN | 0 | 0 | 364498 | 14.5000 | NaN | S | . 539 540 | 1 | 1 | Frolicher, Miss. Hedwig Margaritha | female | 22.00 | 0 | 2 | 13568 | 49.5000 | B39 | C | . 540 541 | 1 | 1 | Crosby, Miss. Harriet R | female | 36.00 | 0 | 2 | WE/P 5735 | 71.0000 | B22 | S | . 541 542 | 0 | 3 | Andersson, Miss. Ingeborg Constanzia | female | 9.00 | 4 | 2 | 347082 | 31.2750 | NaN | S | . 542 543 | 0 | 3 | Andersson, Miss. Sigrid Elisabeth | female | 11.00 | 4 | 2 | 347082 | 31.2750 | NaN | S | . 543 544 | 1 | 2 | Beane, Mr. Edward | male | 32.00 | 1 | 0 | 2908 | 26.0000 | NaN | S | . 544 545 | 0 | 1 | Douglas, Mr. Walter Donald | male | 50.00 | 1 | 0 | PC 17761 | 106.4250 | C86 | C | . 545 546 | 0 | 1 | Nicholson, Mr. Arthur Ernest | male | 64.00 | 0 | 0 | 693 | 26.0000 | NaN | S | . 546 547 | 1 | 2 | Beane, Mrs. Edward (Ethel Clarke) | female | 19.00 | 1 | 0 | 2908 | 26.0000 | NaN | S | . 547 548 | 1 | 2 | Padro y Manent, Mr. Julian | male | NaN | 0 | 0 | SC/PARIS 2146 | 13.8625 | NaN | C | . 548 549 | 0 | 3 | Goldsmith, Mr. Frank John | male | 33.00 | 1 | 1 | 363291 | 20.5250 | NaN | S | . 549 550 | 1 | 2 | Davies, Master. John Morgan Jr | male | 8.00 | 1 | 1 | C.A. 33112 | 36.7500 | NaN | S | . 550 551 | 1 | 1 | Thayer, Mr. John Borland Jr | male | 17.00 | 0 | 2 | 17421 | 110.8833 | C70 | C | . 551 552 | 0 | 2 | Sharp, Mr. Percival James R | male | 27.00 | 0 | 0 | 244358 | 26.0000 | NaN | S | . 552 553 | 0 | 3 | O&#39;Brien, Mr. Timothy | male | NaN | 0 | 0 | 330979 | 7.8292 | NaN | Q | . 553 554 | 1 | 3 | Leeni, Mr. Fahim (&quot;Philip Zenni&quot;) | male | 22.00 | 0 | 0 | 2620 | 7.2250 | NaN | C | . 554 555 | 1 | 3 | Ohman, Miss. Velin | female | 22.00 | 0 | 0 | 347085 | 7.7750 | NaN | S | . 555 556 | 0 | 1 | Wright, Mr. George | male | 62.00 | 0 | 0 | 113807 | 26.5500 | NaN | S | . 556 557 | 1 | 1 | Duff Gordon, Lady. (Lucille Christiana Sutherland) (&quot;Mrs Morgan&quot;) | female | 48.00 | 1 | 0 | 11755 | 39.6000 | A16 | C | . 557 558 | 0 | 1 | Robbins, Mr. Victor | male | NaN | 0 | 0 | PC 17757 | 227.5250 | NaN | C | . 558 559 | 1 | 1 | Taussig, Mrs. Emil (Tillie Mandelbaum) | female | 39.00 | 1 | 1 | 110413 | 79.6500 | E67 | S | . 559 560 | 1 | 3 | de Messemaeker, Mrs. Guillaume Joseph (Emma) | female | 36.00 | 1 | 0 | 345572 | 17.4000 | NaN | S | . 560 561 | 0 | 3 | Morrow, Mr. Thomas Rowan | male | NaN | 0 | 0 | 372622 | 7.7500 | NaN | Q | . 561 562 | 0 | 3 | Sivic, Mr. Husein | male | 40.00 | 0 | 0 | 349251 | 7.8958 | NaN | S | . 562 563 | 0 | 2 | Norman, Mr. Robert Douglas | male | 28.00 | 0 | 0 | 218629 | 13.5000 | NaN | S | . 563 564 | 0 | 3 | Simmons, Mr. John | male | NaN | 0 | 0 | SOTON/OQ 392082 | 8.0500 | NaN | S | . 564 565 | 0 | 3 | Meanwell, Miss. (Marion Ogden) | female | NaN | 0 | 0 | SOTON/O.Q. 392087 | 8.0500 | NaN | S | . 565 566 | 0 | 3 | Davies, Mr. Alfred J | male | 24.00 | 2 | 0 | A/4 48871 | 24.1500 | NaN | S | . 566 567 | 0 | 3 | Stoytcheff, Mr. Ilia | male | 19.00 | 0 | 0 | 349205 | 7.8958 | NaN | S | . 567 568 | 0 | 3 | Palsson, Mrs. Nils (Alma Cornelia Berglund) | female | 29.00 | 0 | 4 | 349909 | 21.0750 | NaN | S | . 568 569 | 0 | 3 | Doharr, Mr. Tannous | male | NaN | 0 | 0 | 2686 | 7.2292 | NaN | C | . 569 570 | 1 | 3 | Jonsson, Mr. Carl | male | 32.00 | 0 | 0 | 350417 | 7.8542 | NaN | S | . 570 571 | 1 | 2 | Harris, Mr. George | male | 62.00 | 0 | 0 | S.W./PP 752 | 10.5000 | NaN | S | . 571 572 | 1 | 1 | Appleton, Mrs. Edward Dale (Charlotte Lamson) | female | 53.00 | 2 | 0 | 11769 | 51.4792 | C101 | S | . 572 573 | 1 | 1 | Flynn, Mr. John Irwin (&quot;Irving&quot;) | male | 36.00 | 0 | 0 | PC 17474 | 26.3875 | E25 | S | . 573 574 | 1 | 3 | Kelly, Miss. Mary | female | NaN | 0 | 0 | 14312 | 7.7500 | NaN | Q | . 574 575 | 0 | 3 | Rush, Mr. Alfred George John | male | 16.00 | 0 | 0 | A/4. 20589 | 8.0500 | NaN | S | . 575 576 | 0 | 3 | Patchett, Mr. George | male | 19.00 | 0 | 0 | 358585 | 14.5000 | NaN | S | . 576 577 | 1 | 2 | Garside, Miss. Ethel | female | 34.00 | 0 | 0 | 243880 | 13.0000 | NaN | S | . 577 578 | 1 | 1 | Silvey, Mrs. William Baird (Alice Munger) | female | 39.00 | 1 | 0 | 13507 | 55.9000 | E44 | S | . 578 579 | 0 | 3 | Caram, Mrs. Joseph (Maria Elias) | female | NaN | 1 | 0 | 2689 | 14.4583 | NaN | C | . 579 580 | 1 | 3 | Jussila, Mr. Eiriik | male | 32.00 | 0 | 0 | STON/O 2. 3101286 | 7.9250 | NaN | S | . 580 581 | 1 | 2 | Christy, Miss. Julie Rachel | female | 25.00 | 1 | 1 | 237789 | 30.0000 | NaN | S | . 581 582 | 1 | 1 | Thayer, Mrs. John Borland (Marian Longstreth Morris) | female | 39.00 | 1 | 1 | 17421 | 110.8833 | C68 | C | . 582 583 | 0 | 2 | Downton, Mr. William James | male | 54.00 | 0 | 0 | 28403 | 26.0000 | NaN | S | . 583 584 | 0 | 1 | Ross, Mr. John Hugo | male | 36.00 | 0 | 0 | 13049 | 40.1250 | A10 | C | . 584 585 | 0 | 3 | Paulner, Mr. Uscher | male | NaN | 0 | 0 | 3411 | 8.7125 | NaN | C | . 585 586 | 1 | 1 | Taussig, Miss. Ruth | female | 18.00 | 0 | 2 | 110413 | 79.6500 | E68 | S | . 586 587 | 0 | 2 | Jarvis, Mr. John Denzil | male | 47.00 | 0 | 0 | 237565 | 15.0000 | NaN | S | . 587 588 | 1 | 1 | Frolicher-Stehli, Mr. Maxmillian | male | 60.00 | 1 | 1 | 13567 | 79.2000 | B41 | C | . 588 589 | 0 | 3 | Gilinski, Mr. Eliezer | male | 22.00 | 0 | 0 | 14973 | 8.0500 | NaN | S | . 589 590 | 0 | 3 | Murdlin, Mr. Joseph | male | NaN | 0 | 0 | A./5. 3235 | 8.0500 | NaN | S | . 590 591 | 0 | 3 | Rintamaki, Mr. Matti | male | 35.00 | 0 | 0 | STON/O 2. 3101273 | 7.1250 | NaN | S | . 591 592 | 1 | 1 | Stephenson, Mrs. Walter Bertram (Martha Eustis) | female | 52.00 | 1 | 0 | 36947 | 78.2667 | D20 | C | . 592 593 | 0 | 3 | Elsbury, Mr. William James | male | 47.00 | 0 | 0 | A/5 3902 | 7.2500 | NaN | S | . 593 594 | 0 | 3 | Bourke, Miss. Mary | female | NaN | 0 | 2 | 364848 | 7.7500 | NaN | Q | . 594 595 | 0 | 2 | Chapman, Mr. John Henry | male | 37.00 | 1 | 0 | SC/AH 29037 | 26.0000 | NaN | S | . 595 596 | 0 | 3 | Van Impe, Mr. Jean Baptiste | male | 36.00 | 1 | 1 | 345773 | 24.1500 | NaN | S | . 596 597 | 1 | 2 | Leitch, Miss. Jessie Wills | female | NaN | 0 | 0 | 248727 | 33.0000 | NaN | S | . 597 598 | 0 | 3 | Johnson, Mr. Alfred | male | 49.00 | 0 | 0 | LINE | 0.0000 | NaN | S | . 598 599 | 0 | 3 | Boulos, Mr. Hanna | male | NaN | 0 | 0 | 2664 | 7.2250 | NaN | C | . 599 600 | 1 | 1 | Duff Gordon, Sir. Cosmo Edmund (&quot;Mr Morgan&quot;) | male | 49.00 | 1 | 0 | PC 17485 | 56.9292 | A20 | C | . 600 601 | 1 | 2 | Jacobsohn, Mrs. Sidney Samuel (Amy Frances Christy) | female | 24.00 | 2 | 1 | 243847 | 27.0000 | NaN | S | . 601 602 | 0 | 3 | Slabenoff, Mr. Petco | male | NaN | 0 | 0 | 349214 | 7.8958 | NaN | S | . 602 603 | 0 | 1 | Harrington, Mr. Charles H | male | NaN | 0 | 0 | 113796 | 42.4000 | NaN | S | . 603 604 | 0 | 3 | Torber, Mr. Ernst William | male | 44.00 | 0 | 0 | 364511 | 8.0500 | NaN | S | . 604 605 | 1 | 1 | Homer, Mr. Harry (&quot;Mr E Haven&quot;) | male | 35.00 | 0 | 0 | 111426 | 26.5500 | NaN | C | . 605 606 | 0 | 3 | Lindell, Mr. Edvard Bengtsson | male | 36.00 | 1 | 0 | 349910 | 15.5500 | NaN | S | . 606 607 | 0 | 3 | Karaic, Mr. Milan | male | 30.00 | 0 | 0 | 349246 | 7.8958 | NaN | S | . 607 608 | 1 | 1 | Daniel, Mr. Robert Williams | male | 27.00 | 0 | 0 | 113804 | 30.5000 | NaN | S | . 608 609 | 1 | 2 | Laroche, Mrs. Joseph (Juliette Marie Louise Lafargue) | female | 22.00 | 1 | 2 | SC/Paris 2123 | 41.5792 | NaN | C | . 609 610 | 1 | 1 | Shutes, Miss. Elizabeth W | female | 40.00 | 0 | 0 | PC 17582 | 153.4625 | C125 | S | . 610 611 | 0 | 3 | Andersson, Mrs. Anders Johan (Alfrida Konstantia Brogren) | female | 39.00 | 1 | 5 | 347082 | 31.2750 | NaN | S | . 611 612 | 0 | 3 | Jardin, Mr. Jose Neto | male | NaN | 0 | 0 | SOTON/O.Q. 3101305 | 7.0500 | NaN | S | . 612 613 | 1 | 3 | Murphy, Miss. Margaret Jane | female | NaN | 1 | 0 | 367230 | 15.5000 | NaN | Q | . 613 614 | 0 | 3 | Horgan, Mr. John | male | NaN | 0 | 0 | 370377 | 7.7500 | NaN | Q | . 614 615 | 0 | 3 | Brocklebank, Mr. William Alfred | male | 35.00 | 0 | 0 | 364512 | 8.0500 | NaN | S | . 615 616 | 1 | 2 | Herman, Miss. Alice | female | 24.00 | 1 | 2 | 220845 | 65.0000 | NaN | S | . 616 617 | 0 | 3 | Danbom, Mr. Ernst Gilbert | male | 34.00 | 1 | 1 | 347080 | 14.4000 | NaN | S | . 617 618 | 0 | 3 | Lobb, Mrs. William Arthur (Cordelia K Stanlick) | female | 26.00 | 1 | 0 | A/5. 3336 | 16.1000 | NaN | S | . 618 619 | 1 | 2 | Becker, Miss. Marion Louise | female | 4.00 | 2 | 1 | 230136 | 39.0000 | F4 | S | . 619 620 | 0 | 2 | Gavey, Mr. Lawrence | male | 26.00 | 0 | 0 | 31028 | 10.5000 | NaN | S | . 620 621 | 0 | 3 | Yasbeck, Mr. Antoni | male | 27.00 | 1 | 0 | 2659 | 14.4542 | NaN | C | . 621 622 | 1 | 1 | Kimball, Mr. Edwin Nelson Jr | male | 42.00 | 1 | 0 | 11753 | 52.5542 | D19 | S | . 622 623 | 1 | 3 | Nakid, Mr. Sahid | male | 20.00 | 1 | 1 | 2653 | 15.7417 | NaN | C | . 623 624 | 0 | 3 | Hansen, Mr. Henry Damsgaard | male | 21.00 | 0 | 0 | 350029 | 7.8542 | NaN | S | . 624 625 | 0 | 3 | Bowen, Mr. David John &quot;Dai&quot; | male | 21.00 | 0 | 0 | 54636 | 16.1000 | NaN | S | . 625 626 | 0 | 1 | Sutton, Mr. Frederick | male | 61.00 | 0 | 0 | 36963 | 32.3208 | D50 | S | . 626 627 | 0 | 2 | Kirkland, Rev. Charles Leonard | male | 57.00 | 0 | 0 | 219533 | 12.3500 | NaN | Q | . 627 628 | 1 | 1 | Longley, Miss. Gretchen Fiske | female | 21.00 | 0 | 0 | 13502 | 77.9583 | D9 | S | . 628 629 | 0 | 3 | Bostandyeff, Mr. Guentcho | male | 26.00 | 0 | 0 | 349224 | 7.8958 | NaN | S | . 629 630 | 0 | 3 | O&#39;Connell, Mr. Patrick D | male | NaN | 0 | 0 | 334912 | 7.7333 | NaN | Q | . 630 631 | 1 | 1 | Barkworth, Mr. Algernon Henry Wilson | male | 80.00 | 0 | 0 | 27042 | 30.0000 | A23 | S | . 631 632 | 0 | 3 | Lundahl, Mr. Johan Svensson | male | 51.00 | 0 | 0 | 347743 | 7.0542 | NaN | S | . 632 633 | 1 | 1 | Stahelin-Maeglin, Dr. Max | male | 32.00 | 0 | 0 | 13214 | 30.5000 | B50 | C | . 633 634 | 0 | 1 | Parr, Mr. William Henry Marsh | male | NaN | 0 | 0 | 112052 | 0.0000 | NaN | S | . 634 635 | 0 | 3 | Skoog, Miss. Mabel | female | 9.00 | 3 | 2 | 347088 | 27.9000 | NaN | S | . 635 636 | 1 | 2 | Davis, Miss. Mary | female | 28.00 | 0 | 0 | 237668 | 13.0000 | NaN | S | . 636 637 | 0 | 3 | Leinonen, Mr. Antti Gustaf | male | 32.00 | 0 | 0 | STON/O 2. 3101292 | 7.9250 | NaN | S | . 637 638 | 0 | 2 | Collyer, Mr. Harvey | male | 31.00 | 1 | 1 | C.A. 31921 | 26.2500 | NaN | S | . 638 639 | 0 | 3 | Panula, Mrs. Juha (Maria Emilia Ojala) | female | 41.00 | 0 | 5 | 3101295 | 39.6875 | NaN | S | . 639 640 | 0 | 3 | Thorneycroft, Mr. Percival | male | NaN | 1 | 0 | 376564 | 16.1000 | NaN | S | . 640 641 | 0 | 3 | Jensen, Mr. Hans Peder | male | 20.00 | 0 | 0 | 350050 | 7.8542 | NaN | S | . 641 642 | 1 | 1 | Sagesser, Mlle. Emma | female | 24.00 | 0 | 0 | PC 17477 | 69.3000 | B35 | C | . 642 643 | 0 | 3 | Skoog, Miss. Margit Elizabeth | female | 2.00 | 3 | 2 | 347088 | 27.9000 | NaN | S | . 643 644 | 1 | 3 | Foo, Mr. Choong | male | NaN | 0 | 0 | 1601 | 56.4958 | NaN | S | . 644 645 | 1 | 3 | Baclini, Miss. Eugenie | female | 0.75 | 2 | 1 | 2666 | 19.2583 | NaN | C | . 645 646 | 1 | 1 | Harper, Mr. Henry Sleeper | male | 48.00 | 1 | 0 | PC 17572 | 76.7292 | D33 | C | . 646 647 | 0 | 3 | Cor, Mr. Liudevit | male | 19.00 | 0 | 0 | 349231 | 7.8958 | NaN | S | . 647 648 | 1 | 1 | Simonius-Blumer, Col. Oberst Alfons | male | 56.00 | 0 | 0 | 13213 | 35.5000 | A26 | C | . 648 649 | 0 | 3 | Willey, Mr. Edward | male | NaN | 0 | 0 | S.O./P.P. 751 | 7.5500 | NaN | S | . 649 650 | 1 | 3 | Stanley, Miss. Amy Zillah Elsie | female | 23.00 | 0 | 0 | CA. 2314 | 7.5500 | NaN | S | . 650 651 | 0 | 3 | Mitkoff, Mr. Mito | male | NaN | 0 | 0 | 349221 | 7.8958 | NaN | S | . 651 652 | 1 | 2 | Doling, Miss. Elsie | female | 18.00 | 0 | 1 | 231919 | 23.0000 | NaN | S | . 652 653 | 0 | 3 | Kalvik, Mr. Johannes Halvorsen | male | 21.00 | 0 | 0 | 8475 | 8.4333 | NaN | S | . 653 654 | 1 | 3 | O&#39;Leary, Miss. Hanora &quot;Norah&quot; | female | NaN | 0 | 0 | 330919 | 7.8292 | NaN | Q | . 654 655 | 0 | 3 | Hegarty, Miss. Hanora &quot;Nora&quot; | female | 18.00 | 0 | 0 | 365226 | 6.7500 | NaN | Q | . 655 656 | 0 | 2 | Hickman, Mr. Leonard Mark | male | 24.00 | 2 | 0 | S.O.C. 14879 | 73.5000 | NaN | S | . 656 657 | 0 | 3 | Radeff, Mr. Alexander | male | NaN | 0 | 0 | 349223 | 7.8958 | NaN | S | . 657 658 | 0 | 3 | Bourke, Mrs. John (Catherine) | female | 32.00 | 1 | 1 | 364849 | 15.5000 | NaN | Q | . 658 659 | 0 | 2 | Eitemiller, Mr. George Floyd | male | 23.00 | 0 | 0 | 29751 | 13.0000 | NaN | S | . 659 660 | 0 | 1 | Newell, Mr. Arthur Webster | male | 58.00 | 0 | 2 | 35273 | 113.2750 | D48 | C | . 660 661 | 1 | 1 | Frauenthal, Dr. Henry William | male | 50.00 | 2 | 0 | PC 17611 | 133.6500 | NaN | S | . 661 662 | 0 | 3 | Badt, Mr. Mohamed | male | 40.00 | 0 | 0 | 2623 | 7.2250 | NaN | C | . 662 663 | 0 | 1 | Colley, Mr. Edward Pomeroy | male | 47.00 | 0 | 0 | 5727 | 25.5875 | E58 | S | . 663 664 | 0 | 3 | Coleff, Mr. Peju | male | 36.00 | 0 | 0 | 349210 | 7.4958 | NaN | S | . 664 665 | 1 | 3 | Lindqvist, Mr. Eino William | male | 20.00 | 1 | 0 | STON/O 2. 3101285 | 7.9250 | NaN | S | . 665 666 | 0 | 2 | Hickman, Mr. Lewis | male | 32.00 | 2 | 0 | S.O.C. 14879 | 73.5000 | NaN | S | . 666 667 | 0 | 2 | Butler, Mr. Reginald Fenton | male | 25.00 | 0 | 0 | 234686 | 13.0000 | NaN | S | . 667 668 | 0 | 3 | Rommetvedt, Mr. Knud Paust | male | NaN | 0 | 0 | 312993 | 7.7750 | NaN | S | . 668 669 | 0 | 3 | Cook, Mr. Jacob | male | 43.00 | 0 | 0 | A/5 3536 | 8.0500 | NaN | S | . 669 670 | 1 | 1 | Taylor, Mrs. Elmer Zebley (Juliet Cummins Wright) | female | NaN | 1 | 0 | 19996 | 52.0000 | C126 | S | . 670 671 | 1 | 2 | Brown, Mrs. Thomas William Solomon (Elizabeth Catherine Ford) | female | 40.00 | 1 | 1 | 29750 | 39.0000 | NaN | S | . 671 672 | 0 | 1 | Davidson, Mr. Thornton | male | 31.00 | 1 | 0 | F.C. 12750 | 52.0000 | B71 | S | . 672 673 | 0 | 2 | Mitchell, Mr. Henry Michael | male | 70.00 | 0 | 0 | C.A. 24580 | 10.5000 | NaN | S | . 673 674 | 1 | 2 | Wilhelms, Mr. Charles | male | 31.00 | 0 | 0 | 244270 | 13.0000 | NaN | S | . 674 675 | 0 | 2 | Watson, Mr. Ennis Hastings | male | NaN | 0 | 0 | 239856 | 0.0000 | NaN | S | . 675 676 | 0 | 3 | Edvardsson, Mr. Gustaf Hjalmar | male | 18.00 | 0 | 0 | 349912 | 7.7750 | NaN | S | . 676 677 | 0 | 3 | Sawyer, Mr. Frederick Charles | male | 24.50 | 0 | 0 | 342826 | 8.0500 | NaN | S | . 677 678 | 1 | 3 | Turja, Miss. Anna Sofia | female | 18.00 | 0 | 0 | 4138 | 9.8417 | NaN | S | . 678 679 | 0 | 3 | Goodwin, Mrs. Frederick (Augusta Tyler) | female | 43.00 | 1 | 6 | CA 2144 | 46.9000 | NaN | S | . 679 680 | 1 | 1 | Cardeza, Mr. Thomas Drake Martinez | male | 36.00 | 0 | 1 | PC 17755 | 512.3292 | B51 B53 B55 | C | . 680 681 | 0 | 3 | Peters, Miss. Katie | female | NaN | 0 | 0 | 330935 | 8.1375 | NaN | Q | . 681 682 | 1 | 1 | Hassab, Mr. Hammad | male | 27.00 | 0 | 0 | PC 17572 | 76.7292 | D49 | C | . 682 683 | 0 | 3 | Olsvigen, Mr. Thor Anderson | male | 20.00 | 0 | 0 | 6563 | 9.2250 | NaN | S | . 683 684 | 0 | 3 | Goodwin, Mr. Charles Edward | male | 14.00 | 5 | 2 | CA 2144 | 46.9000 | NaN | S | . 684 685 | 0 | 2 | Brown, Mr. Thomas William Solomon | male | 60.00 | 1 | 1 | 29750 | 39.0000 | NaN | S | . 685 686 | 0 | 2 | Laroche, Mr. Joseph Philippe Lemercier | male | 25.00 | 1 | 2 | SC/Paris 2123 | 41.5792 | NaN | C | . 686 687 | 0 | 3 | Panula, Mr. Jaako Arnold | male | 14.00 | 4 | 1 | 3101295 | 39.6875 | NaN | S | . 687 688 | 0 | 3 | Dakic, Mr. Branko | male | 19.00 | 0 | 0 | 349228 | 10.1708 | NaN | S | . 688 689 | 0 | 3 | Fischer, Mr. Eberhard Thelander | male | 18.00 | 0 | 0 | 350036 | 7.7958 | NaN | S | . 689 690 | 1 | 1 | Madill, Miss. Georgette Alexandra | female | 15.00 | 0 | 1 | 24160 | 211.3375 | B5 | S | . 690 691 | 1 | 1 | Dick, Mr. Albert Adrian | male | 31.00 | 1 | 0 | 17474 | 57.0000 | B20 | S | . 691 692 | 1 | 3 | Karun, Miss. Manca | female | 4.00 | 0 | 1 | 349256 | 13.4167 | NaN | C | . 692 693 | 1 | 3 | Lam, Mr. Ali | male | NaN | 0 | 0 | 1601 | 56.4958 | NaN | S | . 693 694 | 0 | 3 | Saad, Mr. Khalil | male | 25.00 | 0 | 0 | 2672 | 7.2250 | NaN | C | . 694 695 | 0 | 1 | Weir, Col. John | male | 60.00 | 0 | 0 | 113800 | 26.5500 | NaN | S | . 695 696 | 0 | 2 | Chapman, Mr. Charles Henry | male | 52.00 | 0 | 0 | 248731 | 13.5000 | NaN | S | . 696 697 | 0 | 3 | Kelly, Mr. James | male | 44.00 | 0 | 0 | 363592 | 8.0500 | NaN | S | . 697 698 | 1 | 3 | Mullens, Miss. Katherine &quot;Katie&quot; | female | NaN | 0 | 0 | 35852 | 7.7333 | NaN | Q | . 698 699 | 0 | 1 | Thayer, Mr. John Borland | male | 49.00 | 1 | 1 | 17421 | 110.8833 | C68 | C | . 699 700 | 0 | 3 | Humblen, Mr. Adolf Mathias Nicolai Olsen | male | 42.00 | 0 | 0 | 348121 | 7.6500 | F G63 | S | . 700 701 | 1 | 1 | Astor, Mrs. John Jacob (Madeleine Talmadge Force) | female | 18.00 | 1 | 0 | PC 17757 | 227.5250 | C62 C64 | C | . 701 702 | 1 | 1 | Silverthorne, Mr. Spencer Victor | male | 35.00 | 0 | 0 | PC 17475 | 26.2875 | E24 | S | . 702 703 | 0 | 3 | Barbara, Miss. Saiide | female | 18.00 | 0 | 1 | 2691 | 14.4542 | NaN | C | . 703 704 | 0 | 3 | Gallagher, Mr. Martin | male | 25.00 | 0 | 0 | 36864 | 7.7417 | NaN | Q | . 704 705 | 0 | 3 | Hansen, Mr. Henrik Juul | male | 26.00 | 1 | 0 | 350025 | 7.8542 | NaN | S | . 705 706 | 0 | 2 | Morley, Mr. Henry Samuel (&quot;Mr Henry Marshall&quot;) | male | 39.00 | 0 | 0 | 250655 | 26.0000 | NaN | S | . 706 707 | 1 | 2 | Kelly, Mrs. Florence &quot;Fannie&quot; | female | 45.00 | 0 | 0 | 223596 | 13.5000 | NaN | S | . 707 708 | 1 | 1 | Calderhead, Mr. Edward Pennington | male | 42.00 | 0 | 0 | PC 17476 | 26.2875 | E24 | S | . 708 709 | 1 | 1 | Cleaver, Miss. Alice | female | 22.00 | 0 | 0 | 113781 | 151.5500 | NaN | S | . 709 710 | 1 | 3 | Moubarek, Master. Halim Gonios (&quot;William George&quot;) | male | NaN | 1 | 1 | 2661 | 15.2458 | NaN | C | . 710 711 | 1 | 1 | Mayne, Mlle. Berthe Antonine (&quot;Mrs de Villiers&quot;) | female | 24.00 | 0 | 0 | PC 17482 | 49.5042 | C90 | C | . 711 712 | 0 | 1 | Klaber, Mr. Herman | male | NaN | 0 | 0 | 113028 | 26.5500 | C124 | S | . 712 713 | 1 | 1 | Taylor, Mr. Elmer Zebley | male | 48.00 | 1 | 0 | 19996 | 52.0000 | C126 | S | . 713 714 | 0 | 3 | Larsson, Mr. August Viktor | male | 29.00 | 0 | 0 | 7545 | 9.4833 | NaN | S | . 714 715 | 0 | 2 | Greenberg, Mr. Samuel | male | 52.00 | 0 | 0 | 250647 | 13.0000 | NaN | S | . 715 716 | 0 | 3 | Soholt, Mr. Peter Andreas Lauritz Andersen | male | 19.00 | 0 | 0 | 348124 | 7.6500 | F G73 | S | . 716 717 | 1 | 1 | Endres, Miss. Caroline Louise | female | 38.00 | 0 | 0 | PC 17757 | 227.5250 | C45 | C | . 717 718 | 1 | 2 | Troutt, Miss. Edwina Celia &quot;Winnie&quot; | female | 27.00 | 0 | 0 | 34218 | 10.5000 | E101 | S | . 718 719 | 0 | 3 | McEvoy, Mr. Michael | male | NaN | 0 | 0 | 36568 | 15.5000 | NaN | Q | . 719 720 | 0 | 3 | Johnson, Mr. Malkolm Joackim | male | 33.00 | 0 | 0 | 347062 | 7.7750 | NaN | S | . 720 721 | 1 | 2 | Harper, Miss. Annie Jessie &quot;Nina&quot; | female | 6.00 | 0 | 1 | 248727 | 33.0000 | NaN | S | . 721 722 | 0 | 3 | Jensen, Mr. Svend Lauritz | male | 17.00 | 1 | 0 | 350048 | 7.0542 | NaN | S | . 722 723 | 0 | 2 | Gillespie, Mr. William Henry | male | 34.00 | 0 | 0 | 12233 | 13.0000 | NaN | S | . 723 724 | 0 | 2 | Hodges, Mr. Henry Price | male | 50.00 | 0 | 0 | 250643 | 13.0000 | NaN | S | . 724 725 | 1 | 1 | Chambers, Mr. Norman Campbell | male | 27.00 | 1 | 0 | 113806 | 53.1000 | E8 | S | . 725 726 | 0 | 3 | Oreskovic, Mr. Luka | male | 20.00 | 0 | 0 | 315094 | 8.6625 | NaN | S | . 726 727 | 1 | 2 | Renouf, Mrs. Peter Henry (Lillian Jefferys) | female | 30.00 | 3 | 0 | 31027 | 21.0000 | NaN | S | . 727 728 | 1 | 3 | Mannion, Miss. Margareth | female | NaN | 0 | 0 | 36866 | 7.7375 | NaN | Q | . 728 729 | 0 | 2 | Bryhl, Mr. Kurt Arnold Gottfrid | male | 25.00 | 1 | 0 | 236853 | 26.0000 | NaN | S | . 729 730 | 0 | 3 | Ilmakangas, Miss. Pieta Sofia | female | 25.00 | 1 | 0 | STON/O2. 3101271 | 7.9250 | NaN | S | . 730 731 | 1 | 1 | Allen, Miss. Elisabeth Walton | female | 29.00 | 0 | 0 | 24160 | 211.3375 | B5 | S | . 731 732 | 0 | 3 | Hassan, Mr. Houssein G N | male | 11.00 | 0 | 0 | 2699 | 18.7875 | NaN | C | . 732 733 | 0 | 2 | Knight, Mr. Robert J | male | NaN | 0 | 0 | 239855 | 0.0000 | NaN | S | . 733 734 | 0 | 2 | Berriman, Mr. William John | male | 23.00 | 0 | 0 | 28425 | 13.0000 | NaN | S | . 734 735 | 0 | 2 | Troupiansky, Mr. Moses Aaron | male | 23.00 | 0 | 0 | 233639 | 13.0000 | NaN | S | . 735 736 | 0 | 3 | Williams, Mr. Leslie | male | 28.50 | 0 | 0 | 54636 | 16.1000 | NaN | S | . 736 737 | 0 | 3 | Ford, Mrs. Edward (Margaret Ann Watson) | female | 48.00 | 1 | 3 | W./C. 6608 | 34.3750 | NaN | S | . 737 738 | 1 | 1 | Lesurer, Mr. Gustave J | male | 35.00 | 0 | 0 | PC 17755 | 512.3292 | B101 | C | . 738 739 | 0 | 3 | Ivanoff, Mr. Kanio | male | NaN | 0 | 0 | 349201 | 7.8958 | NaN | S | . 739 740 | 0 | 3 | Nankoff, Mr. Minko | male | NaN | 0 | 0 | 349218 | 7.8958 | NaN | S | . 740 741 | 1 | 1 | Hawksford, Mr. Walter James | male | NaN | 0 | 0 | 16988 | 30.0000 | D45 | S | . 741 742 | 0 | 1 | Cavendish, Mr. Tyrell William | male | 36.00 | 1 | 0 | 19877 | 78.8500 | C46 | S | . 742 743 | 1 | 1 | Ryerson, Miss. Susan Parker &quot;Suzette&quot; | female | 21.00 | 2 | 2 | PC 17608 | 262.3750 | B57 B59 B63 B66 | C | . 743 744 | 0 | 3 | McNamee, Mr. Neal | male | 24.00 | 1 | 0 | 376566 | 16.1000 | NaN | S | . 744 745 | 1 | 3 | Stranden, Mr. Juho | male | 31.00 | 0 | 0 | STON/O 2. 3101288 | 7.9250 | NaN | S | . 745 746 | 0 | 1 | Crosby, Capt. Edward Gifford | male | 70.00 | 1 | 1 | WE/P 5735 | 71.0000 | B22 | S | . 746 747 | 0 | 3 | Abbott, Mr. Rossmore Edward | male | 16.00 | 1 | 1 | C.A. 2673 | 20.2500 | NaN | S | . 747 748 | 1 | 2 | Sinkkonen, Miss. Anna | female | 30.00 | 0 | 0 | 250648 | 13.0000 | NaN | S | . 748 749 | 0 | 1 | Marvin, Mr. Daniel Warner | male | 19.00 | 1 | 0 | 113773 | 53.1000 | D30 | S | . 749 750 | 0 | 3 | Connaghton, Mr. Michael | male | 31.00 | 0 | 0 | 335097 | 7.7500 | NaN | Q | . 750 751 | 1 | 2 | Wells, Miss. Joan | female | 4.00 | 1 | 1 | 29103 | 23.0000 | NaN | S | . 751 752 | 1 | 3 | Moor, Master. Meier | male | 6.00 | 0 | 1 | 392096 | 12.4750 | E121 | S | . 752 753 | 0 | 3 | Vande Velde, Mr. Johannes Joseph | male | 33.00 | 0 | 0 | 345780 | 9.5000 | NaN | S | . 753 754 | 0 | 3 | Jonkoff, Mr. Lalio | male | 23.00 | 0 | 0 | 349204 | 7.8958 | NaN | S | . 754 755 | 1 | 2 | Herman, Mrs. Samuel (Jane Laver) | female | 48.00 | 1 | 2 | 220845 | 65.0000 | NaN | S | . 755 756 | 1 | 2 | Hamalainen, Master. Viljo | male | 0.67 | 1 | 1 | 250649 | 14.5000 | NaN | S | . 756 757 | 0 | 3 | Carlsson, Mr. August Sigfrid | male | 28.00 | 0 | 0 | 350042 | 7.7958 | NaN | S | . 757 758 | 0 | 2 | Bailey, Mr. Percy Andrew | male | 18.00 | 0 | 0 | 29108 | 11.5000 | NaN | S | . 758 759 | 0 | 3 | Theobald, Mr. Thomas Leonard | male | 34.00 | 0 | 0 | 363294 | 8.0500 | NaN | S | . 759 760 | 1 | 1 | Rothes, the Countess. of (Lucy Noel Martha Dyer-Edwards) | female | 33.00 | 0 | 0 | 110152 | 86.5000 | B77 | S | . 760 761 | 0 | 3 | Garfirth, Mr. John | male | NaN | 0 | 0 | 358585 | 14.5000 | NaN | S | . 761 762 | 0 | 3 | Nirva, Mr. Iisakki Antino Aijo | male | 41.00 | 0 | 0 | SOTON/O2 3101272 | 7.1250 | NaN | S | . 762 763 | 1 | 3 | Barah, Mr. Hanna Assi | male | 20.00 | 0 | 0 | 2663 | 7.2292 | NaN | C | . 763 764 | 1 | 1 | Carter, Mrs. William Ernest (Lucile Polk) | female | 36.00 | 1 | 2 | 113760 | 120.0000 | B96 B98 | S | . 764 765 | 0 | 3 | Eklund, Mr. Hans Linus | male | 16.00 | 0 | 0 | 347074 | 7.7750 | NaN | S | . 765 766 | 1 | 1 | Hogeboom, Mrs. John C (Anna Andrews) | female | 51.00 | 1 | 0 | 13502 | 77.9583 | D11 | S | . 766 767 | 0 | 1 | Brewe, Dr. Arthur Jackson | male | NaN | 0 | 0 | 112379 | 39.6000 | NaN | C | . 767 768 | 0 | 3 | Mangan, Miss. Mary | female | 30.50 | 0 | 0 | 364850 | 7.7500 | NaN | Q | . 768 769 | 0 | 3 | Moran, Mr. Daniel J | male | NaN | 1 | 0 | 371110 | 24.1500 | NaN | Q | . 769 770 | 0 | 3 | Gronnestad, Mr. Daniel Danielsen | male | 32.00 | 0 | 0 | 8471 | 8.3625 | NaN | S | . 770 771 | 0 | 3 | Lievens, Mr. Rene Aime | male | 24.00 | 0 | 0 | 345781 | 9.5000 | NaN | S | . 771 772 | 0 | 3 | Jensen, Mr. Niels Peder | male | 48.00 | 0 | 0 | 350047 | 7.8542 | NaN | S | . 772 773 | 0 | 2 | Mack, Mrs. (Mary) | female | 57.00 | 0 | 0 | S.O./P.P. 3 | 10.5000 | E77 | S | . 773 774 | 0 | 3 | Elias, Mr. Dibo | male | NaN | 0 | 0 | 2674 | 7.2250 | NaN | C | . 774 775 | 1 | 2 | Hocking, Mrs. Elizabeth (Eliza Needs) | female | 54.00 | 1 | 3 | 29105 | 23.0000 | NaN | S | . 775 776 | 0 | 3 | Myhrman, Mr. Pehr Fabian Oliver Malkolm | male | 18.00 | 0 | 0 | 347078 | 7.7500 | NaN | S | . 776 777 | 0 | 3 | Tobin, Mr. Roger | male | NaN | 0 | 0 | 383121 | 7.7500 | F38 | Q | . 777 778 | 1 | 3 | Emanuel, Miss. Virginia Ethel | female | 5.00 | 0 | 0 | 364516 | 12.4750 | NaN | S | . 778 779 | 0 | 3 | Kilgannon, Mr. Thomas J | male | NaN | 0 | 0 | 36865 | 7.7375 | NaN | Q | . 779 780 | 1 | 1 | Robert, Mrs. Edward Scott (Elisabeth Walton McMillan) | female | 43.00 | 0 | 1 | 24160 | 211.3375 | B3 | S | . 780 781 | 1 | 3 | Ayoub, Miss. Banoura | female | 13.00 | 0 | 0 | 2687 | 7.2292 | NaN | C | . 781 782 | 1 | 1 | Dick, Mrs. Albert Adrian (Vera Gillespie) | female | 17.00 | 1 | 0 | 17474 | 57.0000 | B20 | S | . 782 783 | 0 | 1 | Long, Mr. Milton Clyde | male | 29.00 | 0 | 0 | 113501 | 30.0000 | D6 | S | . 783 784 | 0 | 3 | Johnston, Mr. Andrew G | male | NaN | 1 | 2 | W./C. 6607 | 23.4500 | NaN | S | . 784 785 | 0 | 3 | Ali, Mr. William | male | 25.00 | 0 | 0 | SOTON/O.Q. 3101312 | 7.0500 | NaN | S | . 785 786 | 0 | 3 | Harmer, Mr. Abraham (David Lishin) | male | 25.00 | 0 | 0 | 374887 | 7.2500 | NaN | S | . 786 787 | 1 | 3 | Sjoblom, Miss. Anna Sofia | female | 18.00 | 0 | 0 | 3101265 | 7.4958 | NaN | S | . 787 788 | 0 | 3 | Rice, Master. George Hugh | male | 8.00 | 4 | 1 | 382652 | 29.1250 | NaN | Q | . 788 789 | 1 | 3 | Dean, Master. Bertram Vere | male | 1.00 | 1 | 2 | C.A. 2315 | 20.5750 | NaN | S | . 789 790 | 0 | 1 | Guggenheim, Mr. Benjamin | male | 46.00 | 0 | 0 | PC 17593 | 79.2000 | B82 B84 | C | . 790 791 | 0 | 3 | Keane, Mr. Andrew &quot;Andy&quot; | male | NaN | 0 | 0 | 12460 | 7.7500 | NaN | Q | . 791 792 | 0 | 2 | Gaskell, Mr. Alfred | male | 16.00 | 0 | 0 | 239865 | 26.0000 | NaN | S | . 792 793 | 0 | 3 | Sage, Miss. Stella Anna | female | NaN | 8 | 2 | CA. 2343 | 69.5500 | NaN | S | . 793 794 | 0 | 1 | Hoyt, Mr. William Fisher | male | NaN | 0 | 0 | PC 17600 | 30.6958 | NaN | C | . 794 795 | 0 | 3 | Dantcheff, Mr. Ristiu | male | 25.00 | 0 | 0 | 349203 | 7.8958 | NaN | S | . 795 796 | 0 | 2 | Otter, Mr. Richard | male | 39.00 | 0 | 0 | 28213 | 13.0000 | NaN | S | . 796 797 | 1 | 1 | Leader, Dr. Alice (Farnham) | female | 49.00 | 0 | 0 | 17465 | 25.9292 | D17 | S | . 797 798 | 1 | 3 | Osman, Mrs. Mara | female | 31.00 | 0 | 0 | 349244 | 8.6833 | NaN | S | . 798 799 | 0 | 3 | Ibrahim Shawah, Mr. Yousseff | male | 30.00 | 0 | 0 | 2685 | 7.2292 | NaN | C | . 799 800 | 0 | 3 | Van Impe, Mrs. Jean Baptiste (Rosalie Paula Govaert) | female | 30.00 | 1 | 1 | 345773 | 24.1500 | NaN | S | . 800 801 | 0 | 2 | Ponesell, Mr. Martin | male | 34.00 | 0 | 0 | 250647 | 13.0000 | NaN | S | . 801 802 | 1 | 2 | Collyer, Mrs. Harvey (Charlotte Annie Tate) | female | 31.00 | 1 | 1 | C.A. 31921 | 26.2500 | NaN | S | . 802 803 | 1 | 1 | Carter, Master. William Thornton II | male | 11.00 | 1 | 2 | 113760 | 120.0000 | B96 B98 | S | . 803 804 | 1 | 3 | Thomas, Master. Assad Alexander | male | 0.42 | 0 | 1 | 2625 | 8.5167 | NaN | C | . 804 805 | 1 | 3 | Hedman, Mr. Oskar Arvid | male | 27.00 | 0 | 0 | 347089 | 6.9750 | NaN | S | . 805 806 | 0 | 3 | Johansson, Mr. Karl Johan | male | 31.00 | 0 | 0 | 347063 | 7.7750 | NaN | S | . 806 807 | 0 | 1 | Andrews, Mr. Thomas Jr | male | 39.00 | 0 | 0 | 112050 | 0.0000 | A36 | S | . 807 808 | 0 | 3 | Pettersson, Miss. Ellen Natalia | female | 18.00 | 0 | 0 | 347087 | 7.7750 | NaN | S | . 808 809 | 0 | 2 | Meyer, Mr. August | male | 39.00 | 0 | 0 | 248723 | 13.0000 | NaN | S | . 809 810 | 1 | 1 | Chambers, Mrs. Norman Campbell (Bertha Griggs) | female | 33.00 | 1 | 0 | 113806 | 53.1000 | E8 | S | . 810 811 | 0 | 3 | Alexander, Mr. William | male | 26.00 | 0 | 0 | 3474 | 7.8875 | NaN | S | . 811 812 | 0 | 3 | Lester, Mr. James | male | 39.00 | 0 | 0 | A/4 48871 | 24.1500 | NaN | S | . 812 813 | 0 | 2 | Slemen, Mr. Richard James | male | 35.00 | 0 | 0 | 28206 | 10.5000 | NaN | S | . 813 814 | 0 | 3 | Andersson, Miss. Ebba Iris Alfrida | female | 6.00 | 4 | 2 | 347082 | 31.2750 | NaN | S | . 814 815 | 0 | 3 | Tomlin, Mr. Ernest Portage | male | 30.50 | 0 | 0 | 364499 | 8.0500 | NaN | S | . 815 816 | 0 | 1 | Fry, Mr. Richard | male | NaN | 0 | 0 | 112058 | 0.0000 | B102 | S | . 816 817 | 0 | 3 | Heininen, Miss. Wendla Maria | female | 23.00 | 0 | 0 | STON/O2. 3101290 | 7.9250 | NaN | S | . 817 818 | 0 | 2 | Mallet, Mr. Albert | male | 31.00 | 1 | 1 | S.C./PARIS 2079 | 37.0042 | NaN | C | . 818 819 | 0 | 3 | Holm, Mr. John Fredrik Alexander | male | 43.00 | 0 | 0 | C 7075 | 6.4500 | NaN | S | . 819 820 | 0 | 3 | Skoog, Master. Karl Thorsten | male | 10.00 | 3 | 2 | 347088 | 27.9000 | NaN | S | . 820 821 | 1 | 1 | Hays, Mrs. Charles Melville (Clara Jennings Gregg) | female | 52.00 | 1 | 1 | 12749 | 93.5000 | B69 | S | . 821 822 | 1 | 3 | Lulic, Mr. Nikola | male | 27.00 | 0 | 0 | 315098 | 8.6625 | NaN | S | . 822 823 | 0 | 1 | Reuchlin, Jonkheer. John George | male | 38.00 | 0 | 0 | 19972 | 0.0000 | NaN | S | . 823 824 | 1 | 3 | Moor, Mrs. (Beila) | female | 27.00 | 0 | 1 | 392096 | 12.4750 | E121 | S | . 824 825 | 0 | 3 | Panula, Master. Urho Abraham | male | 2.00 | 4 | 1 | 3101295 | 39.6875 | NaN | S | . 825 826 | 0 | 3 | Flynn, Mr. John | male | NaN | 0 | 0 | 368323 | 6.9500 | NaN | Q | . 826 827 | 0 | 3 | Lam, Mr. Len | male | NaN | 0 | 0 | 1601 | 56.4958 | NaN | S | . 827 828 | 1 | 2 | Mallet, Master. Andre | male | 1.00 | 0 | 2 | S.C./PARIS 2079 | 37.0042 | NaN | C | . 828 829 | 1 | 3 | McCormack, Mr. Thomas Joseph | male | NaN | 0 | 0 | 367228 | 7.7500 | NaN | Q | . 829 830 | 1 | 1 | Stone, Mrs. George Nelson (Martha Evelyn) | female | 62.00 | 0 | 0 | 113572 | 80.0000 | B28 | NaN | . 830 831 | 1 | 3 | Yasbeck, Mrs. Antoni (Selini Alexander) | female | 15.00 | 1 | 0 | 2659 | 14.4542 | NaN | C | . 831 832 | 1 | 2 | Richards, Master. George Sibley | male | 0.83 | 1 | 1 | 29106 | 18.7500 | NaN | S | . 832 833 | 0 | 3 | Saad, Mr. Amin | male | NaN | 0 | 0 | 2671 | 7.2292 | NaN | C | . 833 834 | 0 | 3 | Augustsson, Mr. Albert | male | 23.00 | 0 | 0 | 347468 | 7.8542 | NaN | S | . 834 835 | 0 | 3 | Allum, Mr. Owen George | male | 18.00 | 0 | 0 | 2223 | 8.3000 | NaN | S | . 835 836 | 1 | 1 | Compton, Miss. Sara Rebecca | female | 39.00 | 1 | 1 | PC 17756 | 83.1583 | E49 | C | . 836 837 | 0 | 3 | Pasic, Mr. Jakob | male | 21.00 | 0 | 0 | 315097 | 8.6625 | NaN | S | . 837 838 | 0 | 3 | Sirota, Mr. Maurice | male | NaN | 0 | 0 | 392092 | 8.0500 | NaN | S | . 838 839 | 1 | 3 | Chip, Mr. Chang | male | 32.00 | 0 | 0 | 1601 | 56.4958 | NaN | S | . 839 840 | 1 | 1 | Marechal, Mr. Pierre | male | NaN | 0 | 0 | 11774 | 29.7000 | C47 | C | . 840 841 | 0 | 3 | Alhomaki, Mr. Ilmari Rudolf | male | 20.00 | 0 | 0 | SOTON/O2 3101287 | 7.9250 | NaN | S | . 841 842 | 0 | 2 | Mudd, Mr. Thomas Charles | male | 16.00 | 0 | 0 | S.O./P.P. 3 | 10.5000 | NaN | S | . 842 843 | 1 | 1 | Serepeca, Miss. Augusta | female | 30.00 | 0 | 0 | 113798 | 31.0000 | NaN | C | . 843 844 | 0 | 3 | Lemberopolous, Mr. Peter L | male | 34.50 | 0 | 0 | 2683 | 6.4375 | NaN | C | . 844 845 | 0 | 3 | Culumovic, Mr. Jeso | male | 17.00 | 0 | 0 | 315090 | 8.6625 | NaN | S | . 845 846 | 0 | 3 | Abbing, Mr. Anthony | male | 42.00 | 0 | 0 | C.A. 5547 | 7.5500 | NaN | S | . 846 847 | 0 | 3 | Sage, Mr. Douglas Bullen | male | NaN | 8 | 2 | CA. 2343 | 69.5500 | NaN | S | . 847 848 | 0 | 3 | Markoff, Mr. Marin | male | 35.00 | 0 | 0 | 349213 | 7.8958 | NaN | C | . 848 849 | 0 | 2 | Harper, Rev. John | male | 28.00 | 0 | 1 | 248727 | 33.0000 | NaN | S | . 849 850 | 1 | 1 | Goldenberg, Mrs. Samuel L (Edwiga Grabowska) | female | NaN | 1 | 0 | 17453 | 89.1042 | C92 | C | . 850 851 | 0 | 3 | Andersson, Master. Sigvard Harald Elias | male | 4.00 | 4 | 2 | 347082 | 31.2750 | NaN | S | . 851 852 | 0 | 3 | Svensson, Mr. Johan | male | 74.00 | 0 | 0 | 347060 | 7.7750 | NaN | S | . 852 853 | 0 | 3 | Boulos, Miss. Nourelain | female | 9.00 | 1 | 1 | 2678 | 15.2458 | NaN | C | . 853 854 | 1 | 1 | Lines, Miss. Mary Conover | female | 16.00 | 0 | 1 | PC 17592 | 39.4000 | D28 | S | . 854 855 | 0 | 2 | Carter, Mrs. Ernest Courtenay (Lilian Hughes) | female | 44.00 | 1 | 0 | 244252 | 26.0000 | NaN | S | . 855 856 | 1 | 3 | Aks, Mrs. Sam (Leah Rosen) | female | 18.00 | 0 | 1 | 392091 | 9.3500 | NaN | S | . 856 857 | 1 | 1 | Wick, Mrs. George Dennick (Mary Hitchcock) | female | 45.00 | 1 | 1 | 36928 | 164.8667 | NaN | S | . 857 858 | 1 | 1 | Daly, Mr. Peter Denis | male | 51.00 | 0 | 0 | 113055 | 26.5500 | E17 | S | . 858 859 | 1 | 3 | Baclini, Mrs. Solomon (Latifa Qurban) | female | 24.00 | 0 | 3 | 2666 | 19.2583 | NaN | C | . 859 860 | 0 | 3 | Razi, Mr. Raihed | male | NaN | 0 | 0 | 2629 | 7.2292 | NaN | C | . 860 861 | 0 | 3 | Hansen, Mr. Claus Peter | male | 41.00 | 2 | 0 | 350026 | 14.1083 | NaN | S | . 861 862 | 0 | 2 | Giles, Mr. Frederick Edward | male | 21.00 | 1 | 0 | 28134 | 11.5000 | NaN | S | . 862 863 | 1 | 1 | Swift, Mrs. Frederick Joel (Margaret Welles Barron) | female | 48.00 | 0 | 0 | 17466 | 25.9292 | D17 | S | . 863 864 | 0 | 3 | Sage, Miss. Dorothy Edith &quot;Dolly&quot; | female | NaN | 8 | 2 | CA. 2343 | 69.5500 | NaN | S | . 864 865 | 0 | 2 | Gill, Mr. John William | male | 24.00 | 0 | 0 | 233866 | 13.0000 | NaN | S | . 865 866 | 1 | 2 | Bystrom, Mrs. (Karolina) | female | 42.00 | 0 | 0 | 236852 | 13.0000 | NaN | S | . 866 867 | 1 | 2 | Duran y More, Miss. Asuncion | female | 27.00 | 1 | 0 | SC/PARIS 2149 | 13.8583 | NaN | C | . 867 868 | 0 | 1 | Roebling, Mr. Washington Augustus II | male | 31.00 | 0 | 0 | PC 17590 | 50.4958 | A24 | S | . 868 869 | 0 | 3 | van Melkebeke, Mr. Philemon | male | NaN | 0 | 0 | 345777 | 9.5000 | NaN | S | . 869 870 | 1 | 3 | Johnson, Master. Harold Theodor | male | 4.00 | 1 | 1 | 347742 | 11.1333 | NaN | S | . 870 871 | 0 | 3 | Balkic, Mr. Cerin | male | 26.00 | 0 | 0 | 349248 | 7.8958 | NaN | S | . 871 872 | 1 | 1 | Beckwith, Mrs. Richard Leonard (Sallie Monypeny) | female | 47.00 | 1 | 1 | 11751 | 52.5542 | D35 | S | . 872 873 | 0 | 1 | Carlsson, Mr. Frans Olof | male | 33.00 | 0 | 0 | 695 | 5.0000 | B51 B53 B55 | S | . 873 874 | 0 | 3 | Vander Cruyssen, Mr. Victor | male | 47.00 | 0 | 0 | 345765 | 9.0000 | NaN | S | . 874 875 | 1 | 2 | Abelson, Mrs. Samuel (Hannah Wizosky) | female | 28.00 | 1 | 0 | P/PP 3381 | 24.0000 | NaN | C | . 875 876 | 1 | 3 | Najib, Miss. Adele Kiamie &quot;Jane&quot; | female | 15.00 | 0 | 0 | 2667 | 7.2250 | NaN | C | . 876 877 | 0 | 3 | Gustafsson, Mr. Alfred Ossian | male | 20.00 | 0 | 0 | 7534 | 9.8458 | NaN | S | . 877 878 | 0 | 3 | Petroff, Mr. Nedelio | male | 19.00 | 0 | 0 | 349212 | 7.8958 | NaN | S | . 878 879 | 0 | 3 | Laleff, Mr. Kristo | male | NaN | 0 | 0 | 349217 | 7.8958 | NaN | S | . 879 880 | 1 | 1 | Potter, Mrs. Thomas Jr (Lily Alexenia Wilson) | female | 56.00 | 0 | 1 | 11767 | 83.1583 | C50 | C | . 880 881 | 1 | 2 | Shelley, Mrs. William (Imanita Parrish Hall) | female | 25.00 | 0 | 1 | 230433 | 26.0000 | NaN | S | . 881 882 | 0 | 3 | Markun, Mr. Johann | male | 33.00 | 0 | 0 | 349257 | 7.8958 | NaN | S | . 882 883 | 0 | 3 | Dahlberg, Miss. Gerda Ulrika | female | 22.00 | 0 | 0 | 7552 | 10.5167 | NaN | S | . 883 884 | 0 | 2 | Banfield, Mr. Frederick James | male | 28.00 | 0 | 0 | C.A./SOTON 34068 | 10.5000 | NaN | S | . 884 885 | 0 | 3 | Sutehall, Mr. Henry Jr | male | 25.00 | 0 | 0 | SOTON/OQ 392076 | 7.0500 | NaN | S | . 885 886 | 0 | 3 | Rice, Mrs. William (Margaret Norton) | female | 39.00 | 0 | 5 | 382652 | 29.1250 | NaN | Q | . 886 887 | 0 | 2 | Montvila, Rev. Juozas | male | 27.00 | 0 | 0 | 211536 | 13.0000 | NaN | S | . 887 888 | 1 | 1 | Graham, Miss. Margaret Edith | female | 19.00 | 0 | 0 | 112053 | 30.0000 | B42 | S | . 888 889 | 0 | 3 | Johnston, Miss. Catherine Helen &quot;Carrie&quot; | female | NaN | 1 | 2 | W./C. 6607 | 23.4500 | NaN | S | . 889 890 | 1 | 1 | Behr, Mr. Karl Howell | male | 26.00 | 0 | 0 | 111369 | 30.0000 | C148 | C | . 890 891 | 0 | 3 | Dooley, Mr. Patrick | male | 32.00 | 0 | 0 | 370376 | 7.7500 | NaN | Q | . shape . titanic_df.shape . (891, 12) . DataFrame &#49373;&#49457; . dict1 = {&#39;Name&#39;: [&#39;chulmin&#39;, &#39;eunkyung&#39;, &#39;jinwoon&#39;, &#39;soobean&#39;], &#39;Year&#39;: [2011, 2022, 2015, 2012], &#39;Gender&#39;: [&#39;Male&#39;, &#39;Female&#39;, &#39;Male&#39;, &#39;Male&#39;] } # dictionary &gt; DataFrame data_df =pd.DataFrame(dict1) print(data_df) print(&#39;#&#39;*30) # add column name data_df = pd.DataFrame(dict1, columns=[&#39;Name&#39;, &#39;Year&#39;, &#39;Gender&#39;, &#39;Age&#39;]) print(data_df) print(&#39;#&#39;*30) # re-name index data_df = pd.DataFrame(dict1, index=[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;]) print(data_df) print(&#39;#&#39;*30) . Name Year Gender 0 chulmin 2011 Male 1 eunkyung 2022 Female 2 jinwoon 2015 Male 3 soobean 2012 Male ############################## Name Year Gender Age 0 chulmin 2011 Male NaN 1 eunkyung 2022 Female NaN 2 jinwoon 2015 Male NaN 3 soobean 2012 Male NaN ############################## Name Year Gender one chulmin 2011 Male two eunkyung 2022 Female three jinwoon 2015 Male four soobean 2012 Male ############################## . DataFrame&#51032; &#52972;&#47100;&#47749;&#44284; &#51064;&#45937;&#49828; . print(&#39;columns: &#39;, titanic_df.columns) print(&#39;index: &#39;, titanic_df.index) print(&#39;index_values:&#39;, titanic_df.index.values) . columns: Index([&#39;PassengerId&#39;, &#39;Survived&#39;, &#39;Pclass&#39;, &#39;Name&#39;, &#39;Sex&#39;, &#39;Age&#39;, &#39;SibSp&#39;, &#39;Parch&#39;, &#39;Ticket&#39;, &#39;Fare&#39;, &#39;Cabin&#39;, &#39;Embarked&#39;], dtype=&#39;object&#39;) index: RangeIndex(start=0, stop=891, step=1) index_valuesinfo() . titanic_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 12 columns): # Column Non-Null Count Dtype -- -- 0 PassengerId 891 non-null int64 1 Survived 891 non-null int64 2 Pclass 891 non-null int64 3 Name 891 non-null object 4 Sex 891 non-null object 5 Age 714 non-null float64 6 SibSp 891 non-null int64 7 Parch 891 non-null int64 8 Ticket 891 non-null object 9 Fare 891 non-null float64 10 Cabin 204 non-null object 11 Embarked 889 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 83.7+ KB . describe() . titanic_df.describe() . PassengerId Survived Pclass Age SibSp Parch Fare . count 891.000000 | 891.000000 | 891.000000 | 714.000000 | 891.000000 | 891.000000 | 891.000000 | . mean 446.000000 | 0.383838 | 2.308642 | 29.699118 | 0.523008 | 0.381594 | 32.204208 | . std 257.353842 | 0.486592 | 0.836071 | 14.526497 | 1.102743 | 0.806057 | 49.693429 | . min 1.000000 | 0.000000 | 1.000000 | 0.420000 | 0.000000 | 0.000000 | 0.000000 | . 25% 223.500000 | 0.000000 | 2.000000 | 20.125000 | 0.000000 | 0.000000 | 7.910400 | . 50% 446.000000 | 0.000000 | 3.000000 | 28.000000 | 0.000000 | 0.000000 | 14.454200 | . 75% 668.500000 | 1.000000 | 3.000000 | 38.000000 | 1.000000 | 0.000000 | 31.000000 | . max 891.000000 | 1.000000 | 3.000000 | 80.000000 | 8.000000 | 6.000000 | 512.329200 | . value_counts() . titanic_df[&#39;Pclass&#39;].value_counts() . 3 491 1 216 2 184 Name: Pclass, dtype: int64 . titanic_df[&#39;Pclass&#39;].head() . 0 3 1 1 2 3 3 1 4 3 Name: Pclass, dtype: int64 . type(titanic_df[&#39;Pclass&#39;]) . pandas.core.series.Series . print(&#39;titanic_df 데이터 건수&#39;, titanic_df.shape[0]) print(&#39; n&#39;) print(titanic_df[&#39;Embarked&#39;].value_counts()) print(&#39; n&#39;) print(titanic_df[&#39;Embarked&#39;].value_counts(dropna=False)) . titanic_df 데이터 건수 891 S 644 C 168 Q 77 Name: Embarked, dtype: int64 S 644 C 168 Q 77 NaN 2 Name: Embarked, dtype: int64 . print(titanic_df[[&#39;Pclass&#39;, &#39;Embarked&#39;]].value_counts(dropna=False)) . Pclass Embarked 3 S 353 2 S 164 1 S 127 C 85 3 Q 72 C 66 2 C 17 Q 3 1 Q 2 NaN 2 dtype: int64 . DataFrame&#44284; &#47532;&#49828;&#53944;, &#46357;&#49492;&#45320;&#47532;, &#45336;&#54028;&#51060; ndarray &#49345;&#54840; &#48320;&#54872; . 넘파이 ndarray, 리스트, 딕셔너리를 DataFrame으로 변환하기 | . list &gt; df . df_list1 = pd.DataFrame(list1, columns=col_names1) | . | array &gt; df . df_array1 = pd.DataFrame(array1, columns=col_names1) | . | dict &gt; df df_dict = pd.DataFrame(dict) | . | . import numpy as np col_names1 = [&#39;col1&#39;] list1 = [1, 2, 3] array1 = np.array(list1) print(&#39;array1 shape:&#39;, array1.shape) df_list1 = pd.DataFrame(list1, columns=col_names1) print(&#39;list &gt; dataframe: n&#39;, df_list1) df_array1 = pd.DataFrame(array1, columns=col_names1) print(&#39;array &gt; dataframe: n&#39;, df_array1) . array1 shape: (3,) list &gt; dataframe: col1 0 1 1 2 2 3 array &gt; dataframe: col1 0 1 1 2 2 3 . col_names2= [&#39;col1&#39;, &#39;col2&#39;, &#39;col3&#39;] list2 = [[1, 2, 3], [11, 12, 13]] array2 = np.array(list2) print(array2.shape) df_list2 = pd.DataFrame(list2, columns=col_names2) print(&#39; n&#39;, df_list2) df_array2 = pd.DataFrame(array2, columns=col_names2) print(&#39; n&#39;, df_array2) . (2, 3) col1 col2 col3 0 1 2 3 1 11 12 13 col1 col2 col3 0 1 2 3 1 11 12 13 . dict = {&#39;col1&#39;: [1, 11], &#39;col2&#39;: [2, 22], &#39;col3&#39;: [3, 33]} df_dict = pd.DataFrame(dict) print(dict) print(df_dict) . {&#39;col1&#39;: [1, 11], &#39;col2&#39;: [2, 22], &#39;col3&#39;: [3, 33]} col1 col2 col3 0 1 2 3 1 11 22 33 . DataFrame을 넘파이 ndarray, list, dictionary로 변환하기 | . df &gt; list list3 = df_dict.values.tolist() | . | df &gt; array array3 = df_dict.values | . | df &gt; dict dict3 = df_dict.to_dict(&#39;list&#39;) | . | . array3 = df_dict.values print(type(array3), array3.shape) print(array3) . &lt;class &#39;numpy.ndarray&#39;&gt; (2, 3) [[ 1 2 3] [11 22 33]] . list3 = df_dict.values.tolist() print(type(list3), list3) . &lt;class &#39;list&#39;&gt; [[1, 2, 3], [11, 22, 33]] . dict3 = df_dict.to_dict(&#39;list&#39;) print(type(dict3), dict3) . &lt;class &#39;dict&#39;&gt; {&#39;col1&#39;: [1, 11], &#39;col2&#39;: [2, 22], &#39;col3&#39;: [3, 33]} . DataFrame&#51032; &#52972;&#47100; &#45936;&#51060;&#53552; &#49464;&#53944; &#49373;&#49457;&#44284; &#49688;&#51221; . titanic_df[&#39;Age_0&#39;]=0 titanic_df.head(3) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked Age_0 . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | 0 | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Thayer) | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | 0 | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | 0 | . titanic_df[&#39;Age_by_10&#39;] = titanic_df[&#39;Age&#39;]*10 titanic_df[&#39;Family_No&#39;] = titanic_df[&#39;SibSp&#39;] + titanic_df[&#39;Parch&#39;] + 1 titanic_df.head(3) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked Age_0 Age_by_10 Family_No . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | 0 | 220.0 | 2 | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Thayer) | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | 0 | 380.0 | 2 | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | 0 | 260.0 | 1 | . titanic_df[&#39;Age_by_10&#39;] = titanic_df[&#39;Age_by_10&#39;] + 100 titanic_df.head(3) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked Age_0 Age_by_10 Family_No . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | 0 | 320.0 | 2 | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Thayer) | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | 0 | 480.0 | 2 | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | 0 | 360.0 | 1 | . DataFrmae &#45936;&#51060;&#53552; &#49325;&#51228; . -axis에 따른 삭제 . titanic_drop_df = titanic_df.drop(&#39;Age_0&#39;, axis=1) titanic_drop_df.head(3) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked Age_by_10 Family_No . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | 320.0 | 2 | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Thayer) | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | 480.0 | 2 | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | 360.0 | 1 | . 여러 컬럼 삭제는 drop의 인자로 삭제 컬럼을 리스트로 입력 . inplace=True 일 경우 호출한 DataFrame에 drop 결과가 반영, 이때 반환값은 None . drop_reuslt = titanic_df.drop([&#39;Age_0&#39;, &#39;Age_by_10&#39;, &#39;Family_No&#39;], axis=1, inplace=True) print(drop_reuslt) titanic_df.head(3) . None . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Thayer) | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . aixs=0 일 경우 drop()은 row 방향으로 데이터 삭제 . pd.set_option(&#39;display.width&#39;, 1000) pd.set_option(&#39;display.max_colwidth&#39;, 15) print(&#39;### before axis 0 drop ###&#39;) print(titanic_df.head(3)) titanic_df.drop([0, 1, 2], axis=0, inplace=True) print(&#39;### after axis 0 drop ###&#39;) print(titanic_df.head(3)) . ### before axis 0 drop ### PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr.... male 22.0 1 0 A/5 21171 7.2500 NaN S 1 2 1 1 Cumings, Mr... female 38.0 1 0 PC 17599 71.2833 C85 C 2 3 1 3 Heikkinen, ... female 26.0 0 0 STON/O2. 31... 7.9250 NaN S ### after axis 0 drop ### PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 3 4 1 1 Futrelle, M... female 35.0 1 0 113803 53.1000 C123 S 4 5 0 3 Allen, Mr. ... male 35.0 0 0 373450 8.0500 NaN S 5 6 0 3 Moran, Mr. ... male NaN 0 0 330877 8.4583 NaN Q . titanic_df = titanic_df.drop(&#39;Fare&#39;, axis=1, inplace=False) titanic_df.head(3) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Cabin Embarked . 3 4 | 1 | 1 | Futrelle, M... | female | 35.0 | 1 | 0 | 113803 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. ... | male | 35.0 | 0 | 0 | 373450 | NaN | S | . 5 6 | 0 | 3 | Moran, Mr. ... | male | NaN | 0 | 0 | 330877 | NaN | Q | . Index &#44060;&#52404; . titanic_df = pd.read_csv(&quot;train.csv&quot;) indexes = titanic_df.index print(indexes) print(indexes.values) . RangeIndex(start=0, stop=891, step=1) [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890] . print(type(indexes.values)) print(indexes.values.shape) print(indexes[:5].values) print(indexes.values[:5]) print(indexes[6]) . &lt;class &#39;numpy.ndarray&#39;&gt; (891,) [0 1 2 3 4] [0 1 2 3 4] 6 . indexes[0]=5 . TypeError Traceback (most recent call last) ~ AppData Local Temp/ipykernel_20224/1490900438.py in &lt;module&gt; -&gt; 1 indexes[0]=5 ~ Anaconda3 lib site-packages pandas core indexes base.py in __setitem__(self, key, value) 4583 @final 4584 def __setitem__(self, key, value): -&gt; 4585 raise TypeError(&#34;Index does not support mutable operations&#34;) 4586 4587 def __getitem__(self, key): TypeError: Index does not support mutable operations . series_fair = titanic_df[&#39;Fare&#39;] series_fair.head(3) . 0 7.2500 1 71.2833 2 7.9250 Name: Fare, dtype: float64 . series_fair = titanic_df[&#39;Fare&#39;] print(series_fair.max()) print(series_fair.min()) print(series_fair.sum()) print((series_fair +3).head(3)) . 512.3292 0.0 28693.9493 0 10.2500 1 74.2833 2 10.9250 Name: Fare, dtype: float64 . titanic_df.head(3) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr.... | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mr... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, ... | female | 26.0 | 0 | 0 | STON/O2. 31... | 7.9250 | NaN | S | . titanic_df[&#39;Pclass&#39;].value_counts() . 3 491 1 216 2 184 Name: Pclass, dtype: int64 . print(&quot;### before reset_index###&quot;) value_counts=titanic_df[&#39;Pclass&#39;].value_counts() print(value_counts) print(type(value_counts), value_counts.shape) . ### before reset_index### 3 491 1 216 2 184 Name: Pclass, dtype: int64 &lt;class &#39;pandas.core.series.Series&#39;&gt; (3,) . new_value_counts_01 = value_counts.reset_index(inplace=False) print(&#39;###After reset_index###&#39;) print(new_value_counts_01) print(type(new_value_counts_01), new_value_counts_01.shape) . ###After reset_index### index Pclass 0 3 491 1 1 216 2 2 184 &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; (3, 2) . new_value_counts_02 = value_counts.reset_index(drop=True, inplace=False) print(&#39;###After reset_index with drop&#39;) print(new_value_counts_02) print(type(new_value_counts_02), new_value_counts_02.shape) . ###After reset_index with drop 0 491 1 216 2 184 Name: Pclass, dtype: int64 &lt;class &#39;pandas.core.series.Series&#39;&gt; (3,) . titanic_df[&#39;Pclass&#39;].value_counts().reset_index() . index Pclass . 0 3 | 491 | . 1 1 | 216 | . 2 2 | 184 | . new_value_counts_01 = titanic_df[&#39;Pclass&#39;].value_counts().reset_index() new_value_counts_01.rename(columns={&#39;index&#39;: &#39;Pclass&#39;, &#39;Pclass&#39;: &#39;Pclass_count&#39;}) . Pclass Pclass_count . 0 3 | 491 | . 1 1 | 216 | . 2 2 | 184 | . DataFrame &#51064;&#45937;&#49905; &#48143; &#54596;&#53552;&#47553; . DataFrame의 []연산자 | . series = titanic_df[&#39;Name&#39;] print(series.head(3)) print(type(series), series.shape) . 0 Braund, Mr.... 1 Cumings, Mr... 2 Heikkinen, ... Name: Name, dtype: object &lt;class &#39;pandas.core.series.Series&#39;&gt; (891,) . filtered_df = titanic_df[[&#39;Name&#39;, &#39;Age&#39;]] display(filtered_df.head(3)) print(type(filtered_df), filtered_df.shape) . Name Age . 0 Braund, Mr.... | 22.0 | . 1 Cumings, Mr... | 38.0 | . 2 Heikkinen, ... | 26.0 | . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; (891, 2) . one_col_df = titanic_df[[&#39;Name&#39;]] display(one_col_df.head(3)) print(type(one_col_df), one_col_df.shape) . Name . 0 Braund, Mr.... | . 1 Cumings, Mr... | . 2 Heikkinen, ... | . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; (891, 1) . titanic_df[0:2] . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr.... | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mr... | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . titanic_df[0] . KeyError Traceback (most recent call last) ~ Anaconda3 lib site-packages pandas core indexes base.py in get_loc(self, key, method, tolerance) 3360 try: -&gt; 3361 return self._engine.get_loc(casted_key) 3362 except KeyError as err: ~ Anaconda3 lib site-packages pandas _libs index.pyx in pandas._libs.index.IndexEngine.get_loc() ~ Anaconda3 lib site-packages pandas _libs index.pyx in pandas._libs.index.IndexEngine.get_loc() pandas _libs hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item() pandas _libs hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item() KeyError: 0 The above exception was the direct cause of the following exception: KeyError Traceback (most recent call last) ~ AppData Local Temp/ipykernel_20224/1322933825.py in &lt;module&gt; -&gt; 1 titanic_df[0] ~ Anaconda3 lib site-packages pandas core frame.py in __getitem__(self, key) 3456 if self.columns.nlevels &gt; 1: 3457 return self._getitem_multilevel(key) -&gt; 3458 indexer = self.columns.get_loc(key) 3459 if is_integer(indexer): 3460 indexer = [indexer] ~ Anaconda3 lib site-packages pandas core indexes base.py in get_loc(self, key, method, tolerance) 3361 return self._engine.get_loc(casted_key) 3362 except KeyError as err: -&gt; 3363 raise KeyError(key) from err 3364 3365 if is_scalar(key) and isna(key) and not self.hasnans: KeyError: 0 . titanic_df[titanic_df[&#39;Pclass&#39;]==3].head(3) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr.... | male | 22.0 | 1 | 0 | A/5 21171 | 7.250 | NaN | S | . 2 3 | 1 | 3 | Heikkinen, ... | female | 26.0 | 0 | 0 | STON/O2. 31... | 7.925 | NaN | S | . 4 5 | 0 | 3 | Allen, Mr. ... | male | 35.0 | 0 | 0 | 373450 | 8.050 | NaN | S | . DataFrame iloc[] 연산자 | . data = {&#39;Name&#39;: [&#39;Chulmin&#39;, &#39;Eunkyung&#39;, &#39;Jinwoo&#39;, &#39;Soobeom&#39;], &#39;Year&#39;: [2011, 2016, 2015, 2015], &#39;Gender&#39;: [&#39;Male&#39;, &#39;Female&#39;, &#39;Male&#39;, &#39;Male&#39;] } data_df = pd.DataFrame(data, index=[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;]) display(data_df) . Name Year Gender . one Chulmin | 2011 | Male | . two Eunkyung | 2016 | Female | . three Jinwoo | 2015 | Male | . four Soobeom | 2015 | Male | . data_df.iloc[0,0] . &#39;Chulmin&#39; . data_df.iloc[0, &#39;Name&#39;] . ValueError Traceback (most recent call last) ~ Anaconda3 lib site-packages pandas core indexing.py in _has_valid_tuple(self, key) 753 try: --&gt; 754 self._validate_key(k, i) 755 except ValueError as err: ~ Anaconda3 lib site-packages pandas core indexing.py in _validate_key(self, key, axis) 1425 else: -&gt; 1426 raise ValueError(f&#34;Can only index by location with a [{self._valid_types}]&#34;) 1427 ValueError: Can only index by location with a [integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] The above exception was the direct cause of the following exception: ValueError Traceback (most recent call last) ~ AppData Local Temp/ipykernel_20224/2612929314.py in &lt;module&gt; -&gt; 1 data_df.iloc[0, &#39;Name&#39;] ~ Anaconda3 lib site-packages pandas core indexing.py in __getitem__(self, key) 923 with suppress(KeyError, IndexError): 924 return self.obj._get_value(*key, takeable=self._takeable) --&gt; 925 return self._getitem_tuple(key) 926 else: 927 # we by definition only have the 0th axis ~ Anaconda3 lib site-packages pandas core indexing.py in _getitem_tuple(self, tup) 1504 def _getitem_tuple(self, tup: tuple): 1505 -&gt; 1506 self._has_valid_tuple(tup) 1507 with suppress(IndexingError): 1508 return self._getitem_lowerdim(tup) ~ Anaconda3 lib site-packages pandas core indexing.py in _has_valid_tuple(self, key) 754 self._validate_key(k, i) 755 except ValueError as err: --&gt; 756 raise ValueError( 757 &#34;Location based indexing can only have &#34; 758 f&#34;[{self._valid_types}] types&#34; ValueError: Location based indexing can only have [integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types . data_df.iloc[&#39;one&#39;, 0] . ValueError Traceback (most recent call last) ~ Anaconda3 lib site-packages pandas core indexing.py in _has_valid_tuple(self, key) 753 try: --&gt; 754 self._validate_key(k, i) 755 except ValueError as err: ~ Anaconda3 lib site-packages pandas core indexing.py in _validate_key(self, key, axis) 1425 else: -&gt; 1426 raise ValueError(f&#34;Can only index by location with a [{self._valid_types}]&#34;) 1427 ValueError: Can only index by location with a [integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] The above exception was the direct cause of the following exception: ValueError Traceback (most recent call last) ~ AppData Local Temp/ipykernel_20224/1557841323.py in &lt;module&gt; -&gt; 1 data_df.iloc[&#39;one&#39;, 0] ~ Anaconda3 lib site-packages pandas core indexing.py in __getitem__(self, key) 923 with suppress(KeyError, IndexError): 924 return self.obj._get_value(*key, takeable=self._takeable) --&gt; 925 return self._getitem_tuple(key) 926 else: 927 # we by definition only have the 0th axis ~ Anaconda3 lib site-packages pandas core indexing.py in _getitem_tuple(self, tup) 1504 def _getitem_tuple(self, tup: tuple): 1505 -&gt; 1506 self._has_valid_tuple(tup) 1507 with suppress(IndexingError): 1508 return self._getitem_lowerdim(tup) ~ Anaconda3 lib site-packages pandas core indexing.py in _has_valid_tuple(self, key) 754 self._validate_key(k, i) 755 except ValueError as err: --&gt; 756 raise ValueError( 757 &#34;Location based indexing can only have &#34; 758 f&#34;[{self._valid_types}] types&#34; ValueError: Location based indexing can only have [integer, integer slice (START point is INCLUDED, END point is EXCLUDED), listlike of integers, boolean array] types . data_df.iloc[:,:] . Name Year Gender . one Chulmin | 2011 | Male | . two Eunkyung | 2016 | Female | . three Jinwoo | 2015 | Male | . four Soobeom | 2015 | Male | . print(data_df.iloc[1,0]) print(&quot; n&quot;, data_df.iloc[2,1]) print(&quot; n&quot;, data_df.iloc[0:2, [0,1]]) print(&quot; n&quot;, data_df.iloc[0:2, 0:3]) . Eunkyung 2015 Name Year one Chulmin 2011 two Eunkyung 2016 Name Year Gender one Chulmin 2011 Male two Eunkyung 2016 Female . print(&quot;맨 마지막 컬럼 데이터 n &quot;, data_df.iloc[:, -1]) print(&quot; n 맨 마지막 컬럼을 제외한 모든 데이터 n &quot;, data_df.iloc[:, :-1]) . 맨 마지막 컬럼 데이터 one Male two Female three Male four Male Name: Gender, dtype: object 맨 마지막 컬럼을 제외한 모든 데이터 Name Year one Chulmin 2011 two Eunkyung 2016 three Jinwoo 2015 four Soobeom 2015 . print(data_df.iloc[data_df.Year&gt;=2014]) . ValueError Traceback (most recent call last) ~ AppData Local Temp/ipykernel_20224/3383184843.py in &lt;module&gt; 1 # iloc는 불린 인덱싱 지원 안함 -&gt; 2 print(data_df.iloc[data_df.Year&gt;=2014]) ~ Anaconda3 lib site-packages pandas core indexing.py in __getitem__(self, key) 929 930 maybe_callable = com.apply_if_callable(key, self.obj) --&gt; 931 return self._getitem_axis(maybe_callable, axis=axis) 932 933 def _is_scalar_access(self, key: tuple): ~ Anaconda3 lib site-packages pandas core indexing.py in _getitem_axis(self, key, axis) 1550 1551 if com.is_bool_indexer(key): -&gt; 1552 self._validate_key(key, axis) 1553 return self._getbool_axis(key, axis=axis) 1554 ~ Anaconda3 lib site-packages pandas core indexing.py in _validate_key(self, key, axis) 1398 &#34;is not available&#34; 1399 ) -&gt; 1400 raise ValueError( 1401 &#34;iLocation based boolean indexing cannot use &#34; 1402 &#34;an indexable as a mask&#34; ValueError: iLocation based boolean indexing cannot use an indexable as a mask . DataFrame loc[] 연산자 | . data_df.loc[&#39;one&#39;, &#39;Name&#39;] . &#39;Chulmin&#39; . data_df.loc[0, &#39;Name&#39;] . KeyError Traceback (most recent call last) ~ Anaconda3 lib site-packages pandas core indexes base.py in get_loc(self, key, method, tolerance) 3360 try: -&gt; 3361 return self._engine.get_loc(casted_key) 3362 except KeyError as err: ~ Anaconda3 lib site-packages pandas _libs index.pyx in pandas._libs.index.IndexEngine.get_loc() ~ Anaconda3 lib site-packages pandas _libs index.pyx in pandas._libs.index.IndexEngine.get_loc() pandas _libs hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item() pandas _libs hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item() KeyError: 0 The above exception was the direct cause of the following exception: KeyError Traceback (most recent call last) ~ AppData Local Temp/ipykernel_20224/3995560563.py in &lt;module&gt; -&gt; 1 data_df.loc[0, &#39;Name&#39;] ~ Anaconda3 lib site-packages pandas core indexing.py in __getitem__(self, key) 923 with suppress(KeyError, IndexError): 924 return self.obj._get_value(*key, takeable=self._takeable) --&gt; 925 return self._getitem_tuple(key) 926 else: 927 # we by definition only have the 0th axis ~ Anaconda3 lib site-packages pandas core indexing.py in _getitem_tuple(self, tup) 1098 def _getitem_tuple(self, tup: tuple): 1099 with suppress(IndexingError): -&gt; 1100 return self._getitem_lowerdim(tup) 1101 1102 # no multi-index, so validate all of the indexers ~ Anaconda3 lib site-packages pandas core indexing.py in _getitem_lowerdim(self, tup) 836 # We don&#39;t need to check for tuples here because those are 837 # caught by the _is_nested_tuple_indexer check above. --&gt; 838 section = self._getitem_axis(key, axis=i) 839 840 # We should never have a scalar section here, because ~ Anaconda3 lib site-packages pandas core indexing.py in _getitem_axis(self, key, axis) 1162 # fall thru to straight lookup 1163 self._validate_key(key, axis) -&gt; 1164 return self._get_label(key, axis=axis) 1165 1166 def _get_slice_axis(self, slice_obj: slice, axis: int): ~ Anaconda3 lib site-packages pandas core indexing.py in _get_label(self, label, axis) 1111 def _get_label(self, label, axis: int): 1112 # GH#5667 this will fail if the label is not present in the axis. -&gt; 1113 return self.obj.xs(label, axis=axis) 1114 1115 def _handle_lowerdim_multi_index_axis0(self, tup: tuple): ~ Anaconda3 lib site-packages pandas core generic.py in xs(self, key, axis, level, drop_level) 3774 raise TypeError(f&#34;Expected label or tuple of labels, got {key}&#34;) from e 3775 else: -&gt; 3776 loc = index.get_loc(key) 3777 3778 if isinstance(loc, np.ndarray): ~ Anaconda3 lib site-packages pandas core indexes base.py in get_loc(self, key, method, tolerance) 3361 return self._engine.get_loc(casted_key) 3362 except KeyError as err: -&gt; 3363 raise KeyError(key) from err 3364 3365 if is_scalar(key) and isna(key) and not self.hasnans: KeyError: 0 . print(data_df.iloc[0:1, 0]) # 명칭기반 loc slicing print(data_df.loc[&#39;one&#39;:&#39;two&#39;, &#39;Name&#39;]) . one Chulmin Name: Name, dtype: object one Chulmin two Eunkyung Name: Name, dtype: object . print(data_df.loc[&#39;three&#39;, &#39;Name&#39;]) . Jinwoo . data_df.loc[&#39;one&#39;:&#39;two&#39;, [&#39;Name&#39;, &#39;Year&#39;]] . Name Year . one Chulmin | 2011 | . two Eunkyung | 2016 | . data_df.loc[&#39;one&#39;:&#39;three&#39;, &#39;Name&#39;:&#39;Gender&#39;] . Name Year Gender . one Chulmin | 2011 | Male | . two Eunkyung | 2016 | Female | . three Jinwoo | 2015 | Male | . data_df.loc[:] . Name Year Gender . one Chulmin | 2011 | Male | . two Eunkyung | 2016 | Female | . three Jinwoo | 2015 | Male | . four Soobeom | 2015 | Male | . data_df.loc[data_df[&#39;Year&#39;]&gt;=2014] . Name Year Gender . two Eunkyung | 2016 | Female | . three Jinwoo | 2015 | Male | . four Soobeom | 2015 | Male | . 불린 인덱싱 | . pd.set_option(&#39;display.max_colwidth&#39;, 200) titanic_df = pd.read_csv(&#39;train.csv&#39;) titanic_boolean = titanic_df[titanic_df[&#39;Age&#39;] &gt; 60] print(type(titanic_boolean)) display(titanic_df.head(3)) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Thayer) | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . titanic_df[titanic_df[&#39;Age&#39;] &gt; 60][[&#39;Name&#39;, &#39;Age&#39;]].head(3) . Name Age . 33 Wheadon, Mr. Edward H | 66.0 | . 54 Ostby, Mr. Engelhart Cornelius | 65.0 | . 96 Goldschmidt, Mr. George B | 71.0 | . titanic_df.loc[titanic_df[&#39;Age&#39;] &gt; 60, [&#39;Name&#39;, &#39;Age&#39;]].head(3) . Name Age . 33 Wheadon, Mr. Edward H | 66.0 | . 54 Ostby, Mr. Engelhart Cornelius | 65.0 | . 96 Goldschmidt, Mr. George B | 71.0 | . titanic_df[( titanic_df[&#39;Age&#39;] &gt; 60 )&amp;( titanic_df[&#39;Pclass&#39;]==1 )&amp;( titanic_df[&#39;Sex&#39;]==&#39;female&#39;)] . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 275 276 | 1 | 1 | Andrews, Miss. Kornelia Theodosia | female | 63.0 | 1 | 0 | 13502 | 77.9583 | D7 | S | . 829 830 | 1 | 1 | Stone, Mrs. George Nelson (Martha Evelyn) | female | 62.0 | 0 | 0 | 113572 | 80.0000 | B28 | NaN | . cond1 = titanic_df[&#39;Age&#39;] &gt; 60 cond2 = titanic_df[&#39;Pclass&#39;]==1 cond3 = titanic_df[&#39;Sex&#39;]==&#39;female&#39; titanic_df[ cond1 &amp; cond2 &amp; cond3 ] . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 275 276 | 1 | 1 | Andrews, Miss. Kornelia Theodosia | female | 63.0 | 1 | 0 | 13502 | 77.9583 | D7 | S | . 829 830 | 1 | 1 | Stone, Mrs. George Nelson (Martha Evelyn) | female | 62.0 | 0 | 0 | 113572 | 80.0000 | B28 | NaN | . &#51221;&#47148;, Aggregation&#54632;&#49688;, GroupBy &#51201;&#50857; . DataFrame, Series의 정렬 - sort_values() | . titanic_sorted =titanic_df.sort_values(by=[&#39;Name&#39;]) titanic_sorted.head(3) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 845 846 | 0 | 3 | Abbing, Mr. Anthony | male | 42.0 | 0 | 0 | C.A. 5547 | 7.55 | NaN | S | . 746 747 | 0 | 3 | Abbott, Mr. Rossmore Edward | male | 16.0 | 1 | 1 | C.A. 2673 | 20.25 | NaN | S | . 279 280 | 1 | 3 | Abbott, Mrs. Stanton (Rosa Hunt) | female | 35.0 | 1 | 1 | C.A. 2673 | 20.25 | NaN | S | . titanic_sort = titanic_df.sort_values(by = [&#39;Pclass&#39;, &#39;Name&#39;], ascending=False) titanic_sort.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 868 869 | 0 | 3 | van Melkebeke, Mr. Philemon | male | NaN | 0 | 0 | 345777 | 9.5 | NaN | S | . 153 154 | 0 | 3 | van Billiard, Mr. Austin Blyler | male | 40.5 | 0 | 2 | A/5. 851 | 14.5 | NaN | S | . 282 283 | 0 | 3 | de Pelsmaeker, Mr. Alfons | male | 16.0 | 0 | 0 | 345778 | 9.5 | NaN | S | . 286 287 | 1 | 3 | de Mulder, Mr. Theodore | male | 30.0 | 0 | 0 | 345774 | 9.5 | NaN | S | . 559 560 | 1 | 3 | de Messemaeker, Mrs. Guillaume Joseph (Emma) | female | 36.0 | 1 | 0 | 345572 | 17.4 | NaN | S | . titanic_df.count() . PassengerId 891 Survived 891 Pclass 891 Name 891 Sex 891 Age 714 SibSp 891 Parch 891 Ticket 891 Fare 891 Cabin 204 Embarked 889 dtype: int64 . titanic_df.shape . (891, 12) . 특정 컬럼들로 aggregation 수행 | . titanic_df[[&#39;Age&#39;, &#39;Fare&#39;]].mean() . Age 29.699118 Fare 32.204208 dtype: float64 . titanic_df[[&#39;Age&#39;, &#39;Fare&#39;]].sum() . Age 21205.1700 Fare 28693.9493 dtype: float64 . titanic_df[[&#39;Age&#39;, &#39;Fare&#39;]].count() . Age 714 Fare 891 dtype: int64 . groupby() 이용하기 groupby() 내 인자로 by를 groupby 하려는 컬럼 입력 여러개의 컬럼으로 groupby 하려면 [] 내에 컬럼명 입력 DataFrame에 groupby()를 호출하면 DataFrameGroupBy 객체 반환 | . titanic_groupby = titanic_df.groupby(by=&#39;Pclass&#39;) print(type(titanic_groupby)) . &lt;class &#39;pandas.core.groupby.generic.DataFrameGroupBy&#39;&gt; . titanic_groupby[[&#39;Age&#39;, &#39;Fare&#39;]] . &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x00000275DC048430&gt; . titanic_groupby[[&#39;Age&#39;, &#39;Fare&#39;]].count() . Age Fare . Pclass . 1 186 | 216 | . 2 173 | 184 | . 3 355 | 491 | . titanic_groupby = titanic_df.groupby(&#39;Pclass&#39;).count() titanic_groupby . PassengerId Survived Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . Pclass . 1 216 | 216 | 216 | 216 | 186 | 216 | 216 | 216 | 216 | 176 | 214 | . 2 184 | 184 | 184 | 184 | 173 | 184 | 184 | 184 | 184 | 16 | 184 | . 3 491 | 491 | 491 | 491 | 355 | 491 | 491 | 491 | 491 | 12 | 491 | . titanic_groupby = titanic_df.groupby(&#39;Pclass&#39;)[[&#39;PassengerId&#39;, &#39;Survived&#39;]].count() titanic_groupby . PassengerId Survived . Pclass . 1 216 | 216 | . 2 184 | 184 | . 3 491 | 491 | . 서로 다른 aggregation을 적용하려면 서로 다른 aggregation 메소드를 호출해야 함. DataFrameGropuBy의 agg() 활용. aggregation 메소드가 많아지면 코드 작성이 번거로워짐. . titanic_df.groupby(&#39;Pclass&#39;)[&#39;Age&#39;].max(), titanic_df.groupby(&#39;Pclass&#39;)[&#39;Age&#39;].min() . (Pclass 1 80.0 2 70.0 3 74.0 Name: Age, dtype: float64, Pclass 1 0.92 2 0.67 3 0.42 Name: Age, dtype: float64) . titanic_df.groupby(&#39;Pclass&#39;)[&#39;Age&#39;].agg([max, min]) . max min . Pclass . 1 80.0 | 0.92 | . 2 70.0 | 0.67 | . 3 74.0 | 0.42 | . 서로 다른 컬럼에 서로 다른 aggregation 메소드를 적용할 경우 agg() 내 컬럼과 적용할 메소드를 Dict 형태로 입력 . agg_format = {&#39;Age&#39;: &#39;max&#39;, &#39;SibSp&#39;: &#39;sum&#39;, &#39;Fare&#39;: &#39;mean&#39;} titanic_df.groupby(&#39;Pclass&#39;).agg(agg_format) . Age SibSp Fare . Pclass . 1 80.0 | 90 | 84.154687 | . 2 70.0 | 74 | 20.662183 | . 3 74.0 | 302 | 13.675550 | . agg 내의 인자로 들어가는 Dict 객체에 동일한 Key 값을 가지는 두개의 value가 있을 경우 &gt; 마지막 value로 update됨 즉, 동일 컬럼에서 서로 다른 aggregation을 가지면서 추가지적인 컬럼 aggregation이 있을 경우 원하는 결과로 출력되지 않음 . agg_format = {&#39;Age&#39;:&#39;max&#39;, &#39;Age&#39;: &#39;mean&#39;, &#39;Fare&#39;:&#39;mean&#39;} titanic_df.groupby(&#39;Pclass&#39;).agg(agg_format) . Age Fare . Pclass . 1 38.233441 | 84.154687 | . 2 29.877630 | 20.662183 | . 3 25.140620 | 13.675550 | . titanic_df.groupby([&#39;Pclass&#39;]).agg(age_max=(&#39;Age&#39;, &#39;max&#39;), age_mean=(&#39;Age&#39;, &#39;mean&#39;), fare_mean=(&#39;Fare&#39;, &#39;mean&#39;)) . age_max age_mean fare_mean . Pclass . 1 80.0 | 38.233441 | 84.154687 | . 2 70.0 | 29.877630 | 20.662183 | . 3 74.0 | 25.140620 | 13.675550 | . titanic_df.groupby(&#39;Pclass&#39;).agg( age_max=(&#39;Age&#39;, &#39;max&#39;), age_mean=(&#39;Age&#39;, &#39;mean&#39;), fare_mean=(&#39;Fare&#39;, &#39;mean&#39;) ) . age_max age_mean fare_mean . Pclass . 1 80.0 | 38.233441 | 84.154687 | . 2 70.0 | 29.877630 | 20.662183 | . 3 74.0 | 25.140620 | 13.675550 | . titanic_df.groupby(&#39;Pclass&#39;).agg( age_max=pd.NamedAgg(column=&#39;Age&#39;, aggfunc=&#39;max&#39;), age_mean=pd.NamedAgg(column=&#39;Age&#39;, aggfunc=&#39;mean&#39;), fare_mean=pd.NamedAgg(column=&#39;Fare&#39;, aggfunc=&#39;mean&#39;) ) . age_max age_mean fare_mean . Pclass . 1 80.0 | 38.233441 | 84.154687 | . 2 70.0 | 29.877630 | 20.662183 | . 3 74.0 | 25.140620 | 13.675550 | . &#44208;&#49552; &#45936;&#51060;&#53552; &#52376;&#47532;&#54616;&#44592; . isna()로 결손 데이터 여부 확인 | . titanic_df.isna().head(3) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 False | False | False | False | False | False | False | False | False | False | True | False | . 1 False | False | False | False | False | False | False | False | False | False | False | False | . 2 False | False | False | False | False | False | False | False | False | False | True | False | . titanic_df.isna().sum() . PassengerId 0 Survived 0 Pclass 0 Name 0 Sex 0 Age 177 SibSp 0 Parch 0 Ticket 0 Fare 0 Cabin 687 Embarked 2 dtype: int64 . fillna()로 Missing 데이터 대체하기 | . titanic_df[&#39;Cabin&#39;] = titanic_df[&#39;Cabin&#39;].fillna(&#39;COOO&#39;) titanic_df.head(3) . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | COOO | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Thayer) | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | COOO | S | . titanic_df[&#39;Age&#39;] = titanic_df[&#39;Age&#39;].fillna(titanic_df[&#39;Age&#39;].mean()) titanic_df[&#39;Embarked&#39;] = titanic_df[&#39;Embarked&#39;].fillna(&#39;S&#39;) titanic_df.isna().sum() . PassengerId 0 Survived 0 Pclass 0 Name 0 Sex 0 Age 0 SibSp 0 Parch 0 Ticket 0 Fare 0 Cabin 0 Embarked 0 dtype: int64 . nunique&#47196; &#52972;&#47100;&#45236; &#47751;&#44148;&#51032; &#44256;&#50976;&#44050;&#51060; &#51080;&#45716;&#51648; &#54028;&#50501; . print(titanic_df[&#39;Name&#39;].value_counts()) . Braund, Mr. Owen Harris 1 Boulos, Mr. Hanna 1 Frolicher-Stehli, Mr. Maxmillian 1 Gilinski, Mr. Eliezer 1 Murdlin, Mr. Joseph 1 Rintamaki, Mr. Matti 1 Stephenson, Mrs. Walter Bertram (Martha Eustis) 1 Elsbury, Mr. William James 1 Bourke, Miss. Mary 1 Chapman, Mr. John Henry 1 Van Impe, Mr. Jean Baptiste 1 Leitch, Miss. Jessie Wills 1 Johnson, Mr. Alfred 1 Duff Gordon, Sir. Cosmo Edmund (&#34;Mr Morgan&#34;) 1 Taussig, Miss. Ruth 1 Jacobsohn, Mrs. Sidney Samuel (Amy Frances Christy) 1 Slabenoff, Mr. Petco 1 Harrington, Mr. Charles H 1 Torber, Mr. Ernst William 1 Homer, Mr. Harry (&#34;Mr E Haven&#34;) 1 Lindell, Mr. Edvard Bengtsson 1 Karaic, Mr. Milan 1 Daniel, Mr. Robert Williams 1 Laroche, Mrs. Joseph (Juliette Marie Louise Lafargue) 1 Shutes, Miss. Elizabeth W 1 Andersson, Mrs. Anders Johan (Alfrida Konstantia Brogren) 1 Jarvis, Mr. John Denzil 1 Paulner, Mr. Uscher 1 Murphy, Miss. Margaret Jane 1 Harris, Mr. George 1 de Messemaeker, Mrs. Guillaume Joseph (Emma) 1 Morrow, Mr. Thomas Rowan 1 Sivic, Mr. Husein 1 Norman, Mr. Robert Douglas 1 Simmons, Mr. John 1 Meanwell, Miss. (Marion Ogden) 1 Davies, Mr. Alfred J 1 Stoytcheff, Mr. Ilia 1 Palsson, Mrs. Nils (Alma Cornelia Berglund) 1 Doharr, Mr. Tannous 1 Jonsson, Mr. Carl 1 Appleton, Mrs. Edward Dale (Charlotte Lamson) 1 Ross, Mr. John Hugo 1 Flynn, Mr. John Irwin (&#34;Irving&#34;) 1 Kelly, Miss. Mary 1 Rush, Mr. Alfred George John 1 Patchett, Mr. George 1 Garside, Miss. Ethel 1 Silvey, Mrs. William Baird (Alice Munger) 1 Caram, Mrs. Joseph (Maria Elias) 1 Jussila, Mr. Eiriik 1 Christy, Miss. Julie Rachel 1 Thayer, Mrs. John Borland (Marian Longstreth Morris) 1 Downton, Mr. William James 1 Jardin, Mr. Jose Neto 1 Horgan, Mr. John 1 Cook, Mr. Jacob 1 Hegarty, Miss. Hanora &#34;Nora&#34; 1 Foo, Mr. Choong 1 Baclini, Miss. Eugenie 1 Harper, Mr. Henry Sleeper 1 Cor, Mr. Liudevit 1 Simonius-Blumer, Col. Oberst Alfons 1 Willey, Mr. Edward 1 Stanley, Miss. Amy Zillah Elsie 1 Mitkoff, Mr. Mito 1 Doling, Miss. Elsie 1 Kalvik, Mr. Johannes Halvorsen 1 O&#39;Leary, Miss. Hanora &#34;Norah&#34; 1 Hickman, Mr. Leonard Mark 1 Sagesser, Mlle. Emma 1 Radeff, Mr. Alexander 1 Bourke, Mrs. John (Catherine) 1 Eitemiller, Mr. George Floyd 1 Newell, Mr. Arthur Webster 1 Frauenthal, Dr. Henry William 1 Badt, Mr. Mohamed 1 Colley, Mr. Edward Pomeroy 1 Coleff, Mr. Peju 1 Lindqvist, Mr. Eino William 1 Hickman, Mr. Lewis 1 Butler, Mr. Reginald Fenton 1 Skoog, Miss. Margit Elizabeth 1 Jensen, Mr. Hans Peder 1 Brocklebank, Mr. William Alfred 1 Kirkland, Rev. Charles Leonard 1 Herman, Miss. Alice 1 Danbom, Mr. Ernst Gilbert 1 Lobb, Mrs. William Arthur (Cordelia K Stanlick) 1 Becker, Miss. Marion Louise 1 Gavey, Mr. Lawrence 1 Yasbeck, Mr. Antoni 1 Kimball, Mr. Edwin Nelson Jr 1 Nakid, Mr. Sahid 1 Hansen, Mr. Henry Damsgaard 1 Bowen, Mr. David John &#34;Dai&#34; 1 Sutton, Mr. Frederick 1 Longley, Miss. Gretchen Fiske 1 Thorneycroft, Mr. Percival 1 Bostandyeff, Mr. Guentcho 1 O&#39;Connell, Mr. Patrick D 1 Barkworth, Mr. Algernon Henry Wilson 1 Lundahl, Mr. Johan Svensson 1 Stahelin-Maeglin, Dr. Max 1 Parr, Mr. William Henry Marsh 1 Skoog, Miss. Mabel 1 Davis, Miss. Mary 1 Leinonen, Mr. Antti Gustaf 1 Collyer, Mr. Harvey 1 Panula, Mrs. Juha (Maria Emilia Ojala) 1 Taussig, Mrs. Emil (Tillie Mandelbaum) 1 Robbins, Mr. Victor 1 Duff Gordon, Lady. (Lucille Christiana Sutherland) (&#34;Mrs Morgan&#34;) 1 Kent, Mr. Edward Austin 1 Renouf, Mr. Peter Henry 1 Braund, Mr. Lewis Richard 1 Karlsson, Mr. Nils August 1 Hirvonen, Miss. Hildur E 1 Goodwin, Master. Harold Victor 1 Frost, Mr. Anthony Wood &#34;Archie&#34; 1 Rouse, Mr. Richard Henry 1 Turkula, Mrs. (Hedwig) 1 Bishop, Mr. Dickinson H 1 Lefebre, Miss. Jeannie 1 Hoyt, Mrs. Frederick Maxfield (Jane Anne Forby) 1 Somerton, Mr. Francis William 1 Strandberg, Miss. Ida Sofia 1 Coutts, Master. Eden Leslie &#34;Neville&#34; 1 Hagland, Mr. Konrad Mathias Reiersen 1 Windelov, Mr. Einar 1 Molson, Mr. Harry Markland 1 Artagaveytia, Mr. Ramon 1 Stanley, Mr. Edward Roland 1 Yousseff, Mr. Gerious 1 Eustis, Miss. Elizabeth Mussey 1 Shellard, Mr. Frederick William 1 Allison, Mrs. Hudson J C (Bessie Waldo Daniels) 1 Svensson, Mr. Olof 1 Clifford, Mr. George Quincy 1 Jerwan, Mrs. Amin S (Marie Marthe Thuillard) 1 Wright, Mr. George 1 O&#39;Connor, Mr. Maurice 1 Baclini, Miss. Marie Catherine 1 Peuchen, Major. Arthur Godfrey 1 West, Mr. Edwy Arthur 1 Hagland, Mr. Ingvald Olai Olsen 1 Foreman, Mr. Benjamin Laventall 1 Goldenberg, Mr. Samuel L 1 Peduzzi, Mr. Joseph 1 Jalsevac, Mr. Ivan 1 Millet, Mr. Francis Davis 1 Kenyon, Mrs. Frederick R (Marion) 1 Toomey, Miss. Ellen 1 Anderson, Mr. Harry 1 West, Mrs. Edwy Arthur (Ada Mary Worth) 1 Morley, Mr. William 1 Gee, Mr. Arthur H 1 Milling, Mr. Jacob Christian 1 Maisner, Mr. Simon 1 Goncalves, Mr. Manuel Estanslas 1 Campbell, Mr. William 1 Smart, Mr. John Montgomery 1 Scanlan, Mr. James 1 Baclini, Miss. Helene Barbara 1 Keefe, Mr. Arthur 1 Cacic, Mr. Luka 1 Calic, Mr. Petar 1 Canavan, Miss. Mary 1 O&#39;Sullivan, Miss. Bridget Mary 1 Andersson, Miss. Sigrid Elisabeth 1 Toufik, Mr. Nakli 1 Elias, Mr. Joseph Jr 1 Peter, Mrs. Catherine (Catherine Rizk) 1 Cacic, Miss. Marija 1 Hart, Miss. Eva Miriam 1 Butt, Major. Archibald Willingham 1 LeRoy, Miss. Bertha 1 Risien, Mr. Samuel Beard 1 Frolicher, Miss. Hedwig Margaritha 1 Crosby, Miss. Harriet R 1 Andersson, Miss. Ingeborg Constanzia 1 Beane, Mr. Edward 1 Laitinen, Miss. Kristina Sofia 1 Douglas, Mr. Walter Donald 1 Nicholson, Mr. Arthur Ernest 1 Beane, Mrs. Edward (Ethel Clarke) 1 Padro y Manent, Mr. Julian 1 Goldsmith, Mr. Frank John 1 Davies, Master. John Morgan Jr 1 Thayer, Mr. John Borland Jr 1 Sharp, Mr. Percival James R 1 O&#39;Brien, Mr. Timothy 1 Leeni, Mr. Fahim (&#34;Philip Zenni&#34;) 1 Ohman, Miss. Velin 1 Quick, Miss. Phyllis May 1 Hocking, Mr. Richard George 1 Salonen, Mr. Johan Werner 1 Farthing, Mr. John 1 Maioni, Miss. Roberta 1 Penasco y Castellana, Mr. Victor de Satode 1 Quick, Mrs. Frederick Charles (Jane Richards) 1 Bradley, Mr. George (&#34;George Arthur Brayton&#34;) 1 Olsen, Mr. Henry Margido 1 Lang, Mr. Fang 1 Daly, Mr. Eugene Patrick 1 Webber, Mr. James 1 McGough, Mr. James Robert 1 Rothschild, Mrs. Martin (Elizabeth L. Barrett) 1 Coleff, Mr. Satio 1 Walker, Mr. William Anderson 1 Lemore, Mrs. (Amelia Milley) 1 Ryan, Mr. Patrick 1 Angle, Mrs. William A (Florence &#34;Mary&#34; Agnes Hughes) 1 Pavlovic, Mr. Stefo 1 Perreault, Miss. Anne 1 Vovk, Mr. Janko 1 Lahoud, Mr. Sarkis 1 Hippach, Mrs. Louis Albert (Ida Sophia Fischer) 1 Kassem, Mr. Fared 1 Farrell, Mr. James 1 Ridsdale, Miss. Lucy 1 Rommetvedt, Mr. Knud Paust 1 Taylor, Mrs. Elmer Zebley (Juliet Cummins Wright) 1 Mellinger, Miss. Madeleine Violet 1 Lulic, Mr. Nikola 1 Alexander, Mr. William 1 Lester, Mr. James 1 Slemen, Mr. Richard James 1 Andersson, Miss. Ebba Iris Alfrida 1 Tomlin, Mr. Ernest Portage 1 Fry, Mr. Richard 1 Heininen, Miss. Wendla Maria 1 Mallet, Mr. Albert 1 Holm, Mr. John Fredrik Alexander 1 Skoog, Master. Karl Thorsten 1 Hays, Mrs. Charles Melville (Clara Jennings Gregg) 1 Reuchlin, Jonkheer. John George 1 Meyer, Mr. August 1 Moor, Mrs. (Beila) 1 Panula, Master. Urho Abraham 1 Flynn, Mr. John 1 Lam, Mr. Len 1 Mallet, Master. Andre 1 McCormack, Mr. Thomas Joseph 1 Stone, Mrs. George Nelson (Martha Evelyn) 1 Yasbeck, Mrs. Antoni (Selini Alexander) 1 Richards, Master. George Sibley 1 Saad, Mr. Amin 1 Augustsson, Mr. Albert 1 Chambers, Mrs. Norman Campbell (Bertha Griggs) 1 Pettersson, Miss. Ellen Natalia 1 Compton, Miss. Sara Rebecca 1 Hoyt, Mr. William Fisher 1 Long, Mr. Milton Clyde 1 Johnston, Mr. Andrew G 1 Ali, Mr. William 1 Harmer, Mr. Abraham (David Lishin) 1 Sjoblom, Miss. Anna Sofia 1 Rice, Master. George Hugh 1 Dean, Master. Bertram Vere 1 Guggenheim, Mr. Benjamin 1 Keane, Mr. Andrew &#34;Andy&#34; 1 Gaskell, Mr. Alfred 1 Sage, Miss. Stella Anna 1 Dantcheff, Mr. Ristiu 1 Andrews, Mr. Thomas Jr 1 Otter, Mr. Richard 1 Leader, Dr. Alice (Farnham) 1 Osman, Mrs. Mara 1 Ibrahim Shawah, Mr. Yousseff 1 Van Impe, Mrs. Jean Baptiste (Rosalie Paula Govaert) 1 Ponesell, Mr. Martin 1 Collyer, Mrs. Harvey (Charlotte Annie Tate) 1 Carter, Master. William Thornton II 1 Thomas, Master. Assad Alexander 1 Hedman, Mr. Oskar Arvid 1 Johansson, Mr. Karl Johan 1 Allum, Mr. Owen George 1 Pasic, Mr. Jakob 1 Brown, Mrs. Thomas William Solomon (Elizabeth Catherine Ford) 1 Petroff, Mr. Nedelio 1 Duran y More, Miss. Asuncion 1 Roebling, Mr. Washington Augustus II 1 van Melkebeke, Mr. Philemon 1 Johnson, Master. Harold Theodor 1 Balkic, Mr. Cerin 1 Beckwith, Mrs. Richard Leonard (Sallie Monypeny) 1 Carlsson, Mr. Frans Olof 1 Vander Cruyssen, Mr. Victor 1 Abelson, Mrs. Samuel (Hannah Wizosky) 1 Najib, Miss. Adele Kiamie &#34;Jane&#34; 1 Gustafsson, Mr. Alfred Ossian 1 Laleff, Mr. Kristo 1 Gill, Mr. John William 1 Potter, Mrs. Thomas Jr (Lily Alexenia Wilson) 1 Shelley, Mrs. William (Imanita Parrish Hall) 1 Markun, Mr. Johann 1 Dahlberg, Miss. Gerda Ulrika 1 Banfield, Mr. Frederick James 1 Sutehall, Mr. Henry Jr 1 Rice, Mrs. William (Margaret Norton) 1 Montvila, Rev. Juozas 1 Graham, Miss. Margaret Edith 1 Johnston, Miss. Catherine Helen &#34;Carrie&#34; 1 Behr, Mr. Karl Howell 1 Bystrom, Mrs. (Karolina) 1 Sage, Miss. Dorothy Edith &#34;Dolly&#34; 1 Sirota, Mr. Maurice 1 Goldenberg, Mrs. Samuel L (Edwiga Grabowska) 1 Chip, Mr. Chang 1 Marechal, Mr. Pierre 1 Alhomaki, Mr. Ilmari Rudolf 1 Mudd, Mr. Thomas Charles 1 Serepeca, Miss. Augusta 1 Lemberopolous, Mr. Peter L 1 Culumovic, Mr. Jeso 1 Abbing, Mr. Anthony 1 Sage, Mr. Douglas Bullen 1 Markoff, Mr. Marin 1 Harper, Rev. John 1 Andersson, Master. Sigvard Harald Elias 1 Swift, Mrs. Frederick Joel (Margaret Welles Barron) 1 Svensson, Mr. Johan 1 Boulos, Miss. Nourelain 1 Lines, Miss. Mary Conover 1 Carter, Mrs. Ernest Courtenay (Lilian Hughes) 1 Aks, Mrs. Sam (Leah Rosen) 1 Wick, Mrs. George Dennick (Mary Hitchcock) 1 Daly, Mr. Peter Denis 1 Baclini, Mrs. Solomon (Latifa Qurban) 1 Razi, Mr. Raihed 1 Hansen, Mr. Claus Peter 1 Giles, Mr. Frederick Edward 1 Dick, Mrs. Albert Adrian (Vera Gillespie) 1 Ayoub, Miss. Banoura 1 Robert, Mrs. Edward Scott (Elisabeth Walton McMillan) 1 Mayne, Mlle. Berthe Antonine (&#34;Mrs de Villiers&#34;) 1 Humblen, Mr. Adolf Mathias Nicolai Olsen 1 Astor, Mrs. John Jacob (Madeleine Talmadge Force) 1 Silverthorne, Mr. Spencer Victor 1 Barbara, Miss. Saiide 1 Gallagher, Mr. Martin 1 Hansen, Mr. Henrik Juul 1 Morley, Mr. Henry Samuel (&#34;Mr Henry Marshall&#34;) 1 Kelly, Mrs. Florence &#34;Fannie&#34; 1 Calderhead, Mr. Edward Pennington 1 Cleaver, Miss. Alice 1 Moubarek, Master. Halim Gonios (&#34;William George&#34;) 1 Klaber, Mr. Herman 1 Mullens, Miss. Katherine &#34;Katie&#34; 1 Taylor, Mr. Elmer Zebley 1 Larsson, Mr. August Viktor 1 Greenberg, Mr. Samuel 1 Soholt, Mr. Peter Andreas Lauritz Andersen 1 Endres, Miss. Caroline Louise 1 Troutt, Miss. Edwina Celia &#34;Winnie&#34; 1 McEvoy, Mr. Michael 1 Johnson, Mr. Malkolm Joackim 1 Harper, Miss. Annie Jessie &#34;Nina&#34; 1 Jensen, Mr. Svend Lauritz 1 Gillespie, Mr. William Henry 1 Thayer, Mr. John Borland 1 Kelly, Mr. James 1 Kilgannon, Mr. Thomas J 1 Olsvigen, Mr. Thor Anderson 1 Davidson, Mr. Thornton 1 Mitchell, Mr. Henry Michael 1 Wilhelms, Mr. Charles 1 Watson, Mr. Ennis Hastings 1 Edvardsson, Mr. Gustaf Hjalmar 1 Sawyer, Mr. Frederick Charles 1 Turja, Miss. Anna Sofia 1 Goodwin, Mrs. Frederick (Augusta Tyler) 1 Cardeza, Mr. Thomas Drake Martinez 1 Peters, Miss. Katie 1 Hassab, Mr. Hammad 1 Goodwin, Mr. Charles Edward 1 Chapman, Mr. Charles Henry 1 Brown, Mr. Thomas William Solomon 1 Laroche, Mr. Joseph Philippe Lemercier 1 Panula, Mr. Jaako Arnold 1 Dakic, Mr. Branko 1 Fischer, Mr. Eberhard Thelander 1 Madill, Miss. Georgette Alexandra 1 Dick, Mr. Albert Adrian 1 Karun, Miss. Manca 1 Lam, Mr. Ali 1 Saad, Mr. Khalil 1 Weir, Col. John 1 Hodges, Mr. Henry Price 1 Chambers, Mr. Norman Campbell 1 Oreskovic, Mr. Luka 1 Hogeboom, Mrs. John C (Anna Andrews) 1 Herman, Mrs. Samuel (Jane Laver) 1 Hamalainen, Master. Viljo 1 Carlsson, Mr. August Sigfrid 1 Bailey, Mr. Percy Andrew 1 Theobald, Mr. Thomas Leonard 1 Rothes, the Countess. of (Lucy Noel Martha Dyer-Edwards) 1 Garfirth, Mr. John 1 Nirva, Mr. Iisakki Antino Aijo 1 Barah, Mr. Hanna Assi 1 Carter, Mrs. William Ernest (Lucile Polk) 1 Eklund, Mr. Hans Linus 1 Brewe, Dr. Arthur Jackson 1 Renouf, Mrs. Peter Henry (Lillian Jefferys) 1 Mangan, Miss. Mary 1 Moran, Mr. Daniel J 1 Gronnestad, Mr. Daniel Danielsen 1 Lievens, Mr. Rene Aime 1 Jensen, Mr. Niels Peder 1 Mack, Mrs. (Mary) 1 Elias, Mr. Dibo 1 Hocking, Mrs. Elizabeth (Eliza Needs) 1 Myhrman, Mr. Pehr Fabian Oliver Malkolm 1 Tobin, Mr. Roger 1 Emanuel, Miss. Virginia Ethel 1 Jonkoff, Mr. Lalio 1 Vande Velde, Mr. Johannes Joseph 1 Moor, Master. Meier 1 Wells, Miss. Joan 1 Mannion, Miss. Margareth 1 Bryhl, Mr. Kurt Arnold Gottfrid 1 Ilmakangas, Miss. Pieta Sofia 1 Allen, Miss. Elisabeth Walton 1 Hassan, Mr. Houssein G N 1 Knight, Mr. Robert J 1 Berriman, Mr. William John 1 Troupiansky, Mr. Moses Aaron 1 Williams, Mr. Leslie 1 Ford, Mrs. Edward (Margaret Ann Watson) 1 Lesurer, Mr. Gustave J 1 Ivanoff, Mr. Kanio 1 Nankoff, Mr. Minko 1 Hawksford, Mr. Walter James 1 Cavendish, Mr. Tyrell William 1 Ryerson, Miss. Susan Parker &#34;Suzette&#34; 1 McNamee, Mr. Neal 1 Stranden, Mr. Juho 1 Crosby, Capt. Edward Gifford 1 Abbott, Mr. Rossmore Edward 1 Sinkkonen, Miss. Anna 1 Marvin, Mr. Daniel Warner 1 Connaghton, Mr. Michael 1 Seward, Mr. Frederic Kimber 1 Dodge, Master. Washington 1 Cumings, Mrs. John Bradley (Florence Briggs Thayer) 1 Meo, Mr. Alfonzo 1 Nysten, Miss. Anna Sofia 1 Hakkarainen, Mrs. Pekka Pietari (Elin Matilda Dolck) 1 Burke, Mr. Jeremiah 1 Andrew, Mr. Edgardo Samuel 1 Nicholls, Mr. Joseph Charles 1 Andersson, Mr. August Edvard (&#34;Wennerstrom&#34;) 1 Ford, Miss. Robina Maggie &#34;Ruby&#34; 1 Navratil, Mr. Michel (&#34;Louis M Hoffman&#34;) 1 Byles, Rev. Thomas Roussel Davids 1 Bateman, Rev. Robert James 1 Pears, Mrs. Thomas (Edith Wearne) 1 van Billiard, Mr. Austin Blyler 1 Giglio, Mr. Victor 1 Olsen, Mr. Ole Martin 1 Williams, Mr. Charles Duane 1 Gilnagh, Miss. Katherine &#34;Katie&#34; 1 Corn, Mr. Harry 1 Smiljanic, Mr. Mile 1 Sage, Master. Thomas Henry 1 Cribb, Mr. John Hatfield 1 Watt, Mrs. James (Elizabeth &#34;Bessie&#34; Inglis Milne) 1 Bengtsson, Mr. John Viktor 1 Calic, Mr. Jovo 1 Panula, Master. Eino Viljami 1 Boulos, Mrs. Joseph (Sultana) 1 Osen, Mr. Olaf Elon 1 Chibnall, Mrs. (Edith Martha Bowerman) 1 White, Mr. Percival Wayland 1 Jussila, Miss. Katriina 1 Attalah, Miss. Malake 1 Pekoniemi, Mr. Edvard 1 Connors, Mr. Patrick 1 Turpin, Mr. William John Robert 1 Baxter, Mr. Quigg Edmond 1 Andersson, Miss. Ellis Anna Maria 1 Hickman, Mr. Stanley George 1 Moore, Mr. Leonard Charles 1 Nasser, Mr. Nicholas 1 Webber, Miss. Susan 1 Nicola-Yarred, Master. Elias 1 Futrelle, Mr. Jacques Heath 1 McMahon, Mr. Martin 1 Madsen, Mr. Fridtjof Arne 1 Peter, Miss. Anna 1 Ekstrom, Mr. Johan 1 Drazenoic, Mr. Jozef 1 Coelho, Mr. Domingos Fernandeo 1 Robins, Mrs. Alexander A (Grace Charity Laury) 1 Weisz, Mrs. Leopold (Mathilde Francoise Pede) 1 Sobey, Mr. Samuel James Hayden 1 Richard, Mr. Emile 1 Newsom, Miss. Helen Monypeny 1 Goldsmith, Master. Frank John William &#34;Frankie&#34; 1 Skoog, Mrs. William (Anna Bernhardina Karlsson) 1 Green, Mr. George Henry 1 Carr, Miss. Helen &#34;Ellen&#34; 1 Olsen, Mr. Karl Siegwart Andreas 1 Madigan, Miss. Margaret &#34;Maggie&#34; 1 Yrois, Miss. Henriette (&#34;Mrs Harbeck&#34;) 1 Vande Walle, Mr. Nestor Cyriel 1 Sage, Mr. Frederick 1 Johanson, Mr. Jakob Alfred 1 Youseff, Mr. Gerious 1 Cohen, Mr. Gurshon &#34;Gus&#34; 1 Strom, Miss. Telma Matilda 1 Backstrom, Mr. Karl Alfred 1 Albimona, Mr. Nassef Cassem 1 Blank, Mr. Henry 1 Lurette, Miss. Elise 1 Ali, Mr. Ahmed 1 Cameron, Miss. Clear Annie 1 Perkin, Mr. John Henry 1 Givard, Mr. Hans Kristensen 1 Kiernan, Mr. Philip 1 Newell, Miss. Madeleine 1 Honkanen, Miss. Eliina 1 Jacobsohn, Mr. Sidney Samuel 1 Bazzani, Miss. Albina 1 Harris, Mr. Walter 1 Sunderland, Mr. Victor Francis 1 Mernagh, Mr. Robert 1 Brown, Mrs. James Joseph (Margaret Tobin) 1 Baumann, Mr. John D 1 Sage, Miss. Constance Gladys 1 Ling, Mr. Lee 1 Van der hoef, Mr. Wyckoff 1 Rice, Master. Arthur 1 Johnson, Miss. Eleanor Ileen 1 Sivola, Mr. Antti Wilhelm 1 Smith, Mr. James Clinch 1 Klasen, Mr. Klas Albin 1 Lefebre, Master. Henry Forbes 1 Isham, Miss. Ann Elizabeth 1 Hale, Mr. Reginald 1 Leonard, Mr. Lionel 1 Pernot, Mr. Rene 1 Navratil, Master. Michel M 1 Asplund, Master. Clarence Gustaf Hugo 1 Becker, Master. Richard F 1 Kink-Heilmann, Miss. Luise Gretchen 1 Rood, Mr. Hugh Roscoe 1 O&#39;Brien, Mrs. Thomas (Johanna &#34;Hannah&#34; Godfrey) 1 Romaine, Mr. Charles Hallace (&#34;Mr C Rolmane&#34;) 1 Bourke, Mr. John 1 Turcin, Mr. Stjepan 1 Pinsky, Mrs. (Rosa) 1 Carbines, Mr. William 1 Andersen-Jensen, Miss. Carla Christine Nielsine 1 Barton, Mr. David John 1 Zabour, Miss. Hileni 1 Porter, Mr. Walter Chamberlain 1 Turpin, Mrs. William John Robert (Dorothy Ann Wonnacott) 1 Uruchurtu, Don. Manuel E 1 Spencer, Mrs. William Augustus (Marie Eugenie) 1 Glynn, Miss. Mary Agatha 1 Wheadon, Mr. Edward H 1 Meyer, Mr. Edgar Joseph 1 Holverson, Mr. Alexander Oskar 1 Mamee, Mr. Hanna 1 Cann, Mr. Ernest Charles 1 Vander Planke, Miss. Augusta Maria 1 Nicola-Yarred, Miss. Jamila 1 Ahlin, Mrs. Johan (Johanna Persdotter Larsson) 1 Kraeff, Mr. Theodor 1 O&#39;Dwyer, Miss. Ellen &#34;Nellie&#34; 1 Laroche, Miss. Simonne Marie Anne Andree 1 Devaney, Miss. Margaret Delia 1 Rogers, Mr. William John 1 Lennon, Mr. Denis 1 O&#39;Driscoll, Miss. Bridget 1 Samaan, Mr. Youssef 1 Arnold-Franchi, Mrs. Josef (Josefine Franchi) 1 Panula, Master. Juha Niilo 1 Nosworthy, Mr. Richard Cater 1 Harper, Mrs. Henry Sleeper (Myna Haxtun) 1 Faunthorpe, Mrs. Lizzie (Elizabeth Anne Wilkinson) 1 Todoroff, Mr. Lalio 1 Fortune, Mr. Charles Alexander 1 Moran, Miss. Bertha 1 Andersson, Mr. Anders Johan 1 Heikkinen, Miss. Laina 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) 1 Allen, Mr. William Henry 1 Moran, Mr. James 1 McCarthy, Mr. Timothy J 1 Palsson, Master. Gosta Leonard 1 Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) 1 Nasser, Mrs. Nicholas (Adele Achem) 1 Sandstrom, Miss. Marguerite Rut 1 Bonnell, Miss. Elizabeth 1 Saundercock, Mr. William Henry 1 Vestrom, Miss. Hulda Amanda Adolfina 1 Emir, Mr. Farred Chehab 1 Hewlett, Mrs. (Mary D Kingcome) 1 Rice, Master. Eugene 1 Williams, Mr. Charles Eugene 1 Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele) 1 Masselmani, Mrs. Fatima 1 Fynney, Mr. Joseph J 1 Beesley, Mr. Lawrence 1 McGowan, Miss. Anna &#34;Annie&#34; 1 Sloper, Mr. William Thompson 1 Palsson, Miss. Torborg Danira 1 Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson) 1 Ostby, Mr. Engelhart Cornelius 1 Woolner, Mr. Hugh 1 Rugg, Miss. Emily 1 Goldschmidt, Mr. George B 1 Backstrom, Mrs. Karl Alfred (Maria Mathilda Gustafsson) 1 Ford, Mr. William Neal 1 Slocovski, Mr. Selman Francis 1 Fortune, Miss. Mabel Helen 1 Celotti, Mr. Francesco 1 Christmann, Mr. Emil 1 Andreasson, Mr. Paul Edvin 1 Chaffee, Mr. Herbert Fuller 1 Dean, Mr. Bertram Frank 1 Coxon, Mr. Daniel 1 Shorney, Mr. Charles Joseph 1 Greenfield, Mr. William Bertram 1 Novel, Mr. Mansouer 1 Doling, Mrs. John T (Ada Julia Bone) 1 Kantor, Mr. Sinai 1 Petranec, Miss. Matilda 1 Petroff, Mr. Pastcho (&#34;Pentcho&#34;) 1 White, Mr. Richard Frasar 1 Johansson, Mr. Gustaf Joel 1 Gustafsson, Mr. Anders Vilhelm 1 Mionoff, Mr. Stoytcho 1 Salkjelsvik, Miss. Anna Kristine 1 Moss, Mr. Albert Johan 1 Rekic, Mr. Tido 1 Ilett, Miss. Bertha 1 Carrau, Mr. Francisco M 1 McDermott, Miss. Brigdet Delia 1 Sheerlinck, Mr. Jan Baptist 1 West, Miss. Constance Mirium 1 Goodwin, Master. William Frederick 1 Sirayanian, Mr. Orsen 1 Icard, Miss. Amelie 1 Harris, Mr. Henry Birkhardt 1 Skoog, Master. Harald 1 Stewart, Mr. Albert A 1 Moubarek, Master. Gerios 1 Nye, Mrs. (Elizabeth Ramell) 1 Crease, Mr. Ernest James 1 Andersson, Miss. Erna Alexandra 1 Kink, Mr. Vincenz 1 Jenkin, Mr. Stephen Curnow 1 Goodwin, Miss. Lillian Amy 1 Hood, Mr. Ambrose Jr 1 Chronopoulos, Mr. Apostolos 1 Bing, Mr. Lee 1 Moen, Mr. Sigurd Hansen 1 Staneff, Mr. Ivan 1 Moutal, Mr. Rahamin Haim 1 Caldwell, Master. Alden Gates 1 Dowdell, Miss. Elizabeth 1 Waelens, Mr. Achille 1 Bracken, Mr. James H 1 Nenkoff, Mr. Christo 1 Johannesen-Bratthammer, Mr. Bernt 1 Meyer, Mrs. Edgar Joseph (Leila Saks) 1 O&#39;Brien, Mr. Thomas 1 Adahl, Mr. Mauritz Nils Martin 1 Warren, Mrs. Frank Manley (Anna Sophia Atkinson) 1 Moussa, Mrs. (Mantoura Boulos) 1 Jermyn, Miss. Annie 1 Aubart, Mme. Leontine Pauline 1 Harder, Mr. George Achilles 1 Wiklund, Mr. Jakob Alfred 1 Beavan, Mr. William Thomas 1 Ringhini, Mr. Sante 1 Palsson, Miss. Stina Viola 1 Landergren, Miss. Aurora Adelia 1 Barbara, Mrs. (Catherine David) 1 Widener, Mr. Harry Elkins 1 Betros, Mr. Tannous 1 Gustafsson, Mr. Karl Gideon 1 Bidois, Miss. Rosalie 1 Nakid, Miss. Maria (&#34;Mary&#34;) 1 Tikkanen, Mr. Juho 1 Holverson, Mrs. Alexander Oskar (Mary Aline Towner) 1 Plotcharsky, Mr. Vasil 1 Davies, Mr. Charles Henry 1 Goodwin, Master. Sidney Leonard 1 Buss, Miss. Kate 1 Asim, Mr. Adola 1 del Carlo, Mr. Sebastiano 1 Lehmann, Miss. Bertha 1 Davison, Mrs. Thomas Henry (Mary E Finck) 1 Pears, Mr. Thomas Clinton 1 Burns, Miss. Elizabeth Margaret 1 Dahl, Mr. Karl Edwart 1 Blackwell, Mr. Stephen Weart 1 Navratil, Master. Edmond Roger 1 Fortune, Miss. Alice Elizabeth 1 Collander, Mr. Erik Gustaf 1 Sedgwick, Mr. Charles Frederick Waddington 1 Fox, Mr. Stanley Hubert 1 Brown, Miss. Amelia &#34;Mildred&#34; 1 Smith, Miss. Marion Elsie 1 Coutts, Master. William Loch &#34;William&#34; 1 Skoog, Mr. Wilhelm 1 Dimic, Mr. Jovan 1 Odahl, Mr. Nils Martin 1 Williams-Lambert, Mr. Fletcher Fellows 1 Elias, Mr. Tannous 1 Arnold-Franchi, Mr. Josef 1 Yousif, Mr. Wazli 1 Vanden Steen, Mr. Leo Peter 1 Bowerman, Miss. Elsie Edith 1 Funk, Miss. Annie Clemmer 1 McGovern, Miss. Mary 1 Mockler, Miss. Helen Mary &#34;Ellie&#34; 1 Sadlier, Mr. Matthew 1 Carter, Mr. William Ernest 1 Hoyt, Mr. Frederick Maxfield 1 Thorneycroft, Mrs. Percival (Florence Kate White) 1 Gheorgheff, Mr. Stanio 1 Charters, Mr. David 1 Zimmerman, Mr. Leo 1 Danbom, Mrs. Ernst Gilbert (Anna Sigrid Maria Brogren) 1 Rosblom, Mr. Viktor Richard 1 Wiseman, Mr. Phillippe 1 Clarke, Mrs. Charles V (Ada Maria Winfield) 1 Phillips, Miss. Kate Florence (&#34;Mrs Kate Louise Phillips Marshall&#34;) 1 Flynn, Mr. James 1 Pickard, Mr. Berk (Berk Trembisky) 1 Bjornstrom-Steffansson, Mr. Mauritz Hakan 1 Louch, Mrs. Charles Alexander (Alice Adelaide Slow) 1 Matthews, Mr. William John 1 Kallio, Mr. Nikolai Erland 1 Silvey, Mr. William Baird 1 Carter, Miss. Lucile Polk 1 Ford, Miss. Doolina Margaret &#34;Daisy&#34; 1 Richards, Mrs. Sidney (Emily Hocking) 1 Fortune, Mr. Mark 1 Kvillner, Mr. Johan Henrik Johannesson 1 Hart, Mrs. Benjamin (Esther Ada Bloomfield) 1 Hampe, Mr. Leon 1 Petterson, Mr. Johan Emil 1 Reynaldo, Ms. Encarnacion 1 Van Impe, Miss. Catharina 1 Silven, Miss. Lyyli Karoliina 1 Jansson, Mr. Carl Olof 1 Hakkarainen, Mr. Pekka Pietari 1 Gustafsson, Mr. Johan Birger 1 Newell, Miss. Marjorie 1 Sandstrom, Mrs. Hjalmar (Agnes Charlotta Bengtsson) 1 Johansson, Mr. Erik 1 Olsson, Miss. Elina 1 McKane, Mr. Peter David 1 Pain, Dr. Alfred 1 Trout, Mrs. William H (Jessie L) 1 Niskanen, Mr. Juha 1 Adams, Mr. John 1 Jussila, Miss. Mari Aina 1 Oreskovic, Miss. Marija 1 Drew, Mrs. James Vivian (Lulu Thorne Christian) 1 Gale, Mr. Shadrach 1 Widegren, Mr. Carl/Charles Peter 1 Richards, Master. William Rowe 1 Birkeland, Mr. Hans Martin Monsen 1 Lefebre, Miss. Ida 1 Sdycoff, Mr. Todor 1 Hart, Mr. Henry 1 Minahan, Miss. Daisy E 1 Cunningham, Mr. Alfred Fleming 1 Sundman, Mr. Johan Julian 1 Meek, Mrs. Thomas (Annie Louise Rowley) 1 Denkoff, Mr. Mitto 1 Frauenthal, Mrs. Henry William (Clara Heinsheimer) 1 Vander Planke, Mr. Leo Edmondus 1 Henry, Miss. Delia 1 Lobb, Mr. William Arthur 1 Rosblom, Mrs. Viktor (Helena Wilhelmina) 1 Touma, Mrs. Darwis (Hanne Youssef Razi) 1 Thorne, Mrs. Gertrude Maybelle 1 Cherry, Miss. Gladys 1 Ward, Miss. Anna 1 Parrish, Mrs. (Lutie Davis) 1 Smith, Mr. Thomas 1 Asplund, Master. Edvin Rojj Felix 1 Taussig, Mr. Emil 1 Harrison, Mr. William 1 Reeves, Mr. David 1 Strom, Mrs. Wilhelm (Elna Matilda Persson) 1 Panula, Mr. Ernesti Arvid 1 Persson, Mr. Ernst Ulrik 1 Graham, Mrs. William Thompson (Edith Junkins) 1 Bissette, Miss. Amelia 1 Cairns, Mr. Alexander 1 Tornquist, Mr. William Henry 1 Mellinger, Mrs. (Elizabeth Anne Maidment) 1 Natsch, Mr. Charles H 1 Healy, Miss. Hanora &#34;Nora&#34; 1 Andrews, Miss. Kornelia Theodosia 1 Lindblom, Miss. Augusta Charlotta 1 Stead, Mr. William Thomas 1 Reed, Mr. James George 1 Graham, Mr. George Edward 1 Hold, Mr. Stephen 1 Berglund, Mr. Karl Ivar Sven 1 Mellors, Mr. William John 1 Lovell, Mr. John Hall (&#34;Henry&#34;) 1 Fahlstrom, Mr. Arne Jonas 1 Lefebre, Miss. Mathilde 1 Harris, Mrs. Henry Birkhardt (Irene Wallach) 1 Larsson, Mr. Bengt Edvin 1 Sjostedt, Mr. Ernst Adolf 1 Asplund, Miss. Lillian Gertrud 1 Leyson, Mr. Robert William Norman 1 Harknett, Miss. Alice Phoebe 1 Collyer, Miss. Marjorie &#34;Lottie&#34; 1 Carter, Rev. Ernest Courtenay 1 Pengelly, Mr. Frederick William 1 Hunt, Mr. George Henry 1 Zabour, Miss. Thamine 1 Murphy, Miss. Katherine &#34;Kate&#34; 1 Coleridge, Mr. Reginald Charles 1 Maenpaa, Mr. Matti Alexanteri 1 Attalah, Mr. Sleiman 1 Minahan, Dr. William Edward 1 Lindahl, Miss. Agda Thorilda Viktoria 1 Hamalainen, Mrs. William (Anna) 1 Beckwith, Mr. Richard Leonard 1 Parkes, Mr. Francis &#34;Frank&#34; 1 Rice, Master. Eric 1 Abbott, Mrs. Stanton (Rosa Hunt) 1 Spedden, Mrs. Frederic Oakley (Margaretta Corning Stone) 1 Abelson, Mr. Samuel 1 Francatelli, Miss. Laura Mabel 1 Hays, Miss. Margaret Bechstein 1 Ryerson, Miss. Emily Borie 1 Lahtinen, Mrs. William (Anna Sylfven) 1 Hendekovic, Mr. Ignjac 1 Hart, Mr. Benjamin 1 Nilsson, Miss. Helmina Josefina 1 Kantor, Mrs. Sinai (Miriam Sternin) 1 Moraweck, Dr. Ernest 1 Wick, Miss. Mary Natalie 1 Dennis, Mr. Samuel 1 Duane, Mr. Frank 1 Danoff, Mr. Yoto 1 Slayter, Miss. Hilda Mary 1 Caldwell, Mrs. Albert Francis (Sylvia Mae Harbaugh) 1 Sage, Mr. George John Jr 1 Young, Miss. Marie Grice 1 Nysveen, Mr. Johan Hansen 1 Ball, Mrs. (Ada E Hall) 1 Goldsmith, Mrs. Frank John (Emily Alice Brown) 1 Hippach, Miss. Jean Gertrude 1 McCoy, Miss. Agnes 1 Partner, Mr. Austen 1 Penasco y Castellana, Mrs. Victor de Satode (Maria Josefa Perez de Soto y Vallejo) 1 Fleming, Miss. Margaret 1 Allison, Master. Hudson Trevor 1 Williams, Mr. Howard Hugh &#34;Harry&#34; 1 Olsson, Mr. Nils Johan Goransson 1 de Pelsmaeker, Mr. Alfons 1 Dorking, Mr. Edward Arthur 1 Smith, Mr. Richard William 1 Stankovic, Mr. Ivan 1 de Mulder, Mr. Theodore 1 Naidenoff, Mr. Penko 1 Hosono, Mr. Masabumi 1 Connolly, Miss. Kate 1 Barber, Miss. Ellen &#34;Nellie&#34; 1 Bishop, Mrs. Dickinson H (Helen Walton) 1 Levy, Mr. Rene Jacques 1 Haas, Miss. Aloisia 1 Mineff, Mr. Ivan 1 Lewy, Mr. Ervin G 1 Hanna, Mr. Mansour 1 Allison, Miss. Helen Loraine 1 Saalfeld, Mr. Adolphe 1 Baxter, Mrs. James (Helene DeLaudeniere Chaput) 1 Kelly, Miss. Anna Katherine &#34;Annie Kate&#34; 1 McCoy, Mr. Bernard 1 Johnson, Mr. William Cahoone Jr 1 Keane, Miss. Nora A 1 Dooley, Mr. Patrick 1 Name: Name, dtype: int64 . print(titanic_df[&#39;Pclass&#39;].nunique()) print(titanic_df[&#39;Survived&#39;].nunique()) print(titanic_df[&#39;Name&#39;].nunique()) . 3 2 891 . replace&#47196; &#50896;&#48376; &#44050;&#51012; &#53945;&#51221;&#44050;&#51004;&#47196; &#45824;&#52404; . replace_test_df = pd.read_csv(&#39;train.csv&#39;) . replace_test_df.head() . PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked . 0 1 | 0 | 3 | Braund, Mr. Owen Harris | male | 22.0 | 1 | 0 | A/5 21171 | 7.2500 | NaN | S | . 1 2 | 1 | 1 | Cumings, Mrs. John Bradley (Florence Briggs Thayer) | female | 38.0 | 1 | 0 | PC 17599 | 71.2833 | C85 | C | . 2 3 | 1 | 3 | Heikkinen, Miss. Laina | female | 26.0 | 0 | 0 | STON/O2. 3101282 | 7.9250 | NaN | S | . 3 4 | 1 | 1 | Futrelle, Mrs. Jacques Heath (Lily May Peel) | female | 35.0 | 1 | 0 | 113803 | 53.1000 | C123 | S | . 4 5 | 0 | 3 | Allen, Mr. William Henry | male | 35.0 | 0 | 0 | 373450 | 8.0500 | NaN | S | . replace_test_df[&#39;Sex&#39;].replace(&#39;male&#39;, &#39;Man&#39;) . 0 Man 1 female 2 female 3 female 4 Man 5 Man 6 Man 7 Man 8 female 9 female 10 female 11 female 12 Man 13 Man 14 female 15 female 16 Man 17 Man 18 female 19 female 20 Man 21 Man 22 female 23 Man 24 female 25 female 26 Man 27 Man 28 female 29 Man 30 Man 31 female 32 female 33 Man 34 Man 35 Man 36 Man 37 Man 38 female 39 female 40 female 41 female 42 Man 43 female 44 female 45 Man 46 Man 47 female 48 Man 49 female 50 Man 51 Man 52 female 53 female 54 Man 55 Man 56 female 57 Man 58 female 59 Man 60 Man 61 female 62 Man 63 Man 64 Man 65 Man 66 female 67 Man 68 female 69 Man 70 Man 71 female 72 Man 73 Man 74 Man 75 Man 76 Man 77 Man 78 Man 79 female 80 Man 81 Man 82 female 83 Man 84 female 85 female 86 Man 87 Man 88 female 89 Man 90 Man 91 Man 92 Man 93 Man 94 Man 95 Man 96 Man 97 Man 98 female 99 Man 100 female 101 Man 102 Man 103 Man 104 Man 105 Man 106 female 107 Man 108 Man 109 female 110 Man 111 female 112 Man 113 female 114 female 115 Man 116 Man 117 Man 118 Man 119 female 120 Man 121 Man 122 Man 123 female 124 Man 125 Man 126 Man 127 Man 128 female 129 Man 130 Man 131 Man 132 female 133 female 134 Man 135 Man 136 female 137 Man 138 Man 139 Man 140 female 141 female 142 female 143 Man 144 Man 145 Man 146 Man 147 female 148 Man 149 Man 150 Man 151 female 152 Man 153 Man 154 Man 155 Man 156 female 157 Man 158 Man 159 Man 160 Man 161 female 162 Man 163 Man 164 Man 165 Man 166 female 167 female 168 Man 169 Man 170 Man 171 Man 172 female 173 Man 174 Man 175 Man 176 Man 177 female 178 Man 179 Man 180 female 181 Man 182 Man 183 Man 184 female 185 Man 186 female 187 Man 188 Man 189 Man 190 female 191 Man 192 female 193 Man 194 female 195 female 196 Man 197 Man 198 female 199 female 200 Man 201 Man 202 Man 203 Man 204 Man 205 female 206 Man 207 Man 208 female 209 Man 210 Man 211 female 212 Man 213 Man 214 Man 215 female 216 female 217 Man 218 female 219 Man 220 Man 221 Man 222 Man 223 Man 224 Man 225 Man 226 Man 227 Man 228 Man 229 female 230 female 231 Man 232 Man 233 female 234 Man 235 female 236 Man 237 female 238 Man 239 Man 240 female 241 female 242 Man 243 Man 244 Man 245 Man 246 female 247 female 248 Man 249 Man 250 Man 251 female 252 Man 253 Man 254 female 255 female 256 female 257 female 258 female 259 female 260 Man 261 Man 262 Man 263 Man 264 female 265 Man 266 Man 267 Man 268 female 269 female 270 Man 271 Man 272 female 273 Man 274 female 275 female 276 female 277 Man 278 Man 279 female 280 Man 281 Man 282 Man 283 Man 284 Man 285 Man 286 Man 287 Man 288 Man 289 female 290 female 291 female 292 Man 293 female 294 Man 295 Man 296 Man 297 female 298 Man 299 female 300 female 301 Man 302 Man 303 female 304 Man 305 Man 306 female 307 female 308 Man 309 female 310 female 311 female 312 female 313 Man 314 Man 315 female 316 female 317 Man 318 female 319 female 320 Man 321 Man 322 female 323 female 324 Man 325 female 326 Man 327 female 328 female 329 female 330 female 331 Man 332 Man 333 Man 334 female 335 Man 336 Man 337 female 338 Man 339 Man 340 Man 341 female 342 Man 343 Man 344 Man 345 female 346 female 347 female 348 Man 349 Man 350 Man 351 Man 352 Man 353 Man 354 Man 355 Man 356 female 357 female 358 female 359 female 360 Man 361 Man 362 female 363 Man 364 Man 365 Man 366 female 367 female 368 female 369 female 370 Man 371 Man 372 Man 373 Man 374 female 375 female 376 female 377 Man 378 Man 379 Man 380 female 381 female 382 Man 383 female 384 Man 385 Man 386 Man 387 female 388 Man 389 female 390 Man 391 Man 392 Man 393 female 394 female 395 Man 396 female 397 Man 398 Man 399 female 400 Man 401 Man 402 female 403 Man 404 female 405 Man 406 Man 407 Man 408 Man 409 female 410 Man 411 Man 412 female 413 Man 414 Man 415 female 416 female 417 female 418 Man 419 female 420 Man 421 Man 422 Man 423 female 424 Man 425 Man 426 female 427 female 428 Man 429 Man 430 Man 431 female 432 female 433 Man 434 Man 435 female 436 female 437 female 438 Man 439 Man 440 female 441 Man 442 Man 443 female 444 Man 445 Man 446 female 447 Man 448 female 449 Man 450 Man 451 Man 452 Man 453 Man 454 Man 455 Man 456 Man 457 female 458 female 459 Man 460 Man 461 Man 462 Man 463 Man 464 Man 465 Man 466 Man 467 Man 468 Man 469 female 470 Man 471 Man 472 female 473 female 474 female 475 Man 476 Man 477 Man 478 Man 479 female 480 Man 481 Man 482 Man 483 female 484 Man 485 female 486 female 487 Man 488 Man 489 Man 490 Man 491 Man 492 Man 493 Man 494 Man 495 Man 496 female 497 Man 498 female 499 Man 500 Man 501 female 502 female 503 female 504 female 505 Man 506 female 507 Man 508 Man 509 Man 510 Man 511 Man 512 Man 513 female 514 Man 515 Man 516 female 517 Man 518 female 519 Man 520 female 521 Man 522 Man 523 female 524 Man 525 Man 526 female 527 Man 528 Man 529 Man 530 female 531 Man 532 Man 533 female 534 female 535 female 536 Man 537 female 538 Man 539 female 540 female 541 female 542 female 543 Man 544 Man 545 Man 546 female 547 Man 548 Man 549 Man 550 Man 551 Man 552 Man 553 Man 554 female 555 Man 556 female 557 Man 558 female 559 female 560 Man 561 Man 562 Man 563 Man 564 female 565 Man 566 Man 567 female 568 Man 569 Man 570 Man 571 female 572 Man 573 female 574 Man 575 Man 576 female 577 female 578 female 579 Man 580 female 581 female 582 Man 583 Man 584 Man 585 female 586 Man 587 Man 588 Man 589 Man 590 Man 591 female 592 Man 593 female 594 Man 595 Man 596 female 597 Man 598 Man 599 Man 600 female 601 Man 602 Man 603 Man 604 Man 605 Man 606 Man 607 Man 608 female 609 female 610 female 611 Man 612 female 613 Man 614 Man 615 female 616 Man 617 female 618 female 619 Man 620 Man 621 Man 622 Man 623 Man 624 Man 625 Man 626 Man 627 female 628 Man 629 Man 630 Man 631 Man 632 Man 633 Man 634 female 635 female 636 Man 637 Man 638 female 639 Man 640 Man 641 female 642 female 643 Man 644 female 645 Man 646 Man 647 Man 648 Man 649 female 650 Man 651 female 652 Man 653 female 654 female 655 Man 656 Man 657 female 658 Man 659 Man 660 Man 661 Man 662 Man 663 Man 664 Man 665 Man 666 Man 667 Man 668 Man 669 female 670 female 671 Man 672 Man 673 Man 674 Man 675 Man 676 Man 677 female 678 female 679 Man 680 female 681 Man 682 Man 683 Man 684 Man 685 Man 686 Man 687 Man 688 Man 689 female 690 Man 691 female 692 Man 693 Man 694 Man 695 Man 696 Man 697 female 698 Man 699 Man 700 female 701 Man 702 female 703 Man 704 Man 705 Man 706 female 707 Man 708 female 709 Man 710 female 711 Man 712 Man 713 Man 714 Man 715 Man 716 female 717 female 718 Man 719 Man 720 female 721 Man 722 Man 723 Man 724 Man 725 Man 726 female 727 female 728 Man 729 female 730 female 731 Man 732 Man 733 Man 734 Man 735 Man 736 female 737 Man 738 Man 739 Man 740 Man 741 Man 742 female 743 Man 744 Man 745 Man 746 Man 747 female 748 Man 749 Man 750 female 751 Man 752 Man 753 Man 754 female 755 Man 756 Man 757 Man 758 Man 759 female 760 Man 761 Man 762 Man 763 female 764 Man 765 female 766 Man 767 female 768 Man 769 Man 770 Man 771 Man 772 female 773 Man 774 female 775 Man 776 Man 777 female 778 Man 779 female 780 female 781 female 782 Man 783 Man 784 Man 785 Man 786 female 787 Man 788 Man 789 Man 790 Man 791 Man 792 female 793 Man 794 Man 795 Man 796 female 797 female 798 Man 799 female 800 Man 801 female 802 Man 803 Man 804 Man 805 Man 806 Man 807 female 808 Man 809 female 810 Man 811 Man 812 Man 813 female 814 Man 815 Man 816 female 817 Man 818 Man 819 Man 820 female 821 Man 822 Man 823 female 824 Man 825 Man 826 Man 827 Man 828 Man 829 female 830 female 831 Man 832 Man 833 Man 834 Man 835 female 836 Man 837 Man 838 Man 839 Man 840 Man 841 Man 842 female 843 Man 844 Man 845 Man 846 Man 847 Man 848 Man 849 female 850 Man 851 Man 852 female 853 female 854 female 855 female 856 female 857 Man 858 female 859 Man 860 Man 861 Man 862 female 863 female 864 Man 865 female 866 female 867 Man 868 Man 869 Man 870 Man 871 female 872 Man 873 Man 874 female 875 female 876 Man 877 Man 878 Man 879 female 880 female 881 Man 882 female 883 Man 884 Man 885 female 886 Man 887 female 888 female 889 Man 890 Man Name: Sex, dtype: object . replace_test_df[&#39;Sex&#39;] = replace_test_df[&#39;Sex&#39;].replace({&#39;male&#39;:&#39;Man&#39;, &#39;female&#39;:&#39;Woman&#39;}) . replace_test_df[&#39;Cabin&#39;] = replace_test_df[&#39;Cabin&#39;].replace(np.nan, &#39;C001&#39;) . replace_test_df[&#39;Cabin&#39;].value_counts(dropna=Falseame: Cabin, dtype: int64 . apply lambda &#49885;&#51004;&#47196; &#45936;&#51060;&#53552; &#44032;&#44277; . def get_square(a): return a**2 print(&#39;3의 제곱은&#39;, get_square(3)) . 3의 제곱은 9 . lambda_square = lambda x : x**2 print(&#39;3의 제곱은&#39;, get_square(3)) . 3의 제곱은 9 . a=[1,2,3] squares = map(lambda x : x**2, a) list(squares) . [1, 4, 9] . titanic_df[&#39;Name_len&#39;] = titanic_df[&#39;Name&#39;].apply(lambda x : len(x)) titanic_df[[&#39;Name&#39;, &#39;Name_len&#39;]].head() . Name Name_len . 0 Braund, Mr. Owen Harris | 23 | . 1 Cumings, Mrs. John Bradley (Florence Briggs Thayer) | 51 | . 2 Heikkinen, Miss. Laina | 22 | . 3 Futrelle, Mrs. Jacques Heath (Lily May Peel) | 44 | . 4 Allen, Mr. William Henry | 24 | . titanic_df[&#39;Child_Adult&#39;] = titanic_df[&#39;Age&#39;].apply(lambda x : &#39;Child&#39; if x &lt;= 15 else &#39;Adult&#39;) titanic_df[[&#39;Age&#39;, &#39;Child_Adult&#39;]] . Age Child_Adult . 0 22.000000 | Adult | . 1 38.000000 | Adult | . 2 26.000000 | Adult | . 3 35.000000 | Adult | . 4 35.000000 | Adult | . 5 29.699118 | Adult | . 6 54.000000 | Adult | . 7 2.000000 | Child | . 8 27.000000 | Adult | . 9 14.000000 | Child | . 10 4.000000 | Child | . 11 58.000000 | Adult | . 12 20.000000 | Adult | . 13 39.000000 | Adult | . 14 14.000000 | Child | . 15 55.000000 | Adult | . 16 2.000000 | Child | . 17 29.699118 | Adult | . 18 31.000000 | Adult | . 19 29.699118 | Adult | . 20 35.000000 | Adult | . 21 34.000000 | Adult | . 22 15.000000 | Child | . 23 28.000000 | Adult | . 24 8.000000 | Child | . 25 38.000000 | Adult | . 26 29.699118 | Adult | . 27 19.000000 | Adult | . 28 29.699118 | Adult | . 29 29.699118 | Adult | . 30 40.000000 | Adult | . 31 29.699118 | Adult | . 32 29.699118 | Adult | . 33 66.000000 | Adult | . 34 28.000000 | Adult | . 35 42.000000 | Adult | . 36 29.699118 | Adult | . 37 21.000000 | Adult | . 38 18.000000 | Adult | . 39 14.000000 | Child | . 40 40.000000 | Adult | . 41 27.000000 | Adult | . 42 29.699118 | Adult | . 43 3.000000 | Child | . 44 19.000000 | Adult | . 45 29.699118 | Adult | . 46 29.699118 | Adult | . 47 29.699118 | Adult | . 48 29.699118 | Adult | . 49 18.000000 | Adult | . 50 7.000000 | Child | . 51 21.000000 | Adult | . 52 49.000000 | Adult | . 53 29.000000 | Adult | . 54 65.000000 | Adult | . 55 29.699118 | Adult | . 56 21.000000 | Adult | . 57 28.500000 | Adult | . 58 5.000000 | Child | . 59 11.000000 | Child | . 60 22.000000 | Adult | . 61 38.000000 | Adult | . 62 45.000000 | Adult | . 63 4.000000 | Child | . 64 29.699118 | Adult | . 65 29.699118 | Adult | . 66 29.000000 | Adult | . 67 19.000000 | Adult | . 68 17.000000 | Adult | . 69 26.000000 | Adult | . 70 32.000000 | Adult | . 71 16.000000 | Adult | . 72 21.000000 | Adult | . 73 26.000000 | Adult | . 74 32.000000 | Adult | . 75 25.000000 | Adult | . 76 29.699118 | Adult | . 77 29.699118 | Adult | . 78 0.830000 | Child | . 79 30.000000 | Adult | . 80 22.000000 | Adult | . 81 29.000000 | Adult | . 82 29.699118 | Adult | . 83 28.000000 | Adult | . 84 17.000000 | Adult | . 85 33.000000 | Adult | . 86 16.000000 | Adult | . 87 29.699118 | Adult | . 88 23.000000 | Adult | . 89 24.000000 | Adult | . 90 29.000000 | Adult | . 91 20.000000 | Adult | . 92 46.000000 | Adult | . 93 26.000000 | Adult | . 94 59.000000 | Adult | . 95 29.699118 | Adult | . 96 71.000000 | Adult | . 97 23.000000 | Adult | . 98 34.000000 | Adult | . 99 34.000000 | Adult | . 100 28.000000 | Adult | . 101 29.699118 | Adult | . 102 21.000000 | Adult | . 103 33.000000 | Adult | . 104 37.000000 | Adult | . 105 28.000000 | Adult | . 106 21.000000 | Adult | . 107 29.699118 | Adult | . 108 38.000000 | Adult | . 109 29.699118 | Adult | . 110 47.000000 | Adult | . 111 14.500000 | Child | . 112 22.000000 | Adult | . 113 20.000000 | Adult | . 114 17.000000 | Adult | . 115 21.000000 | Adult | . 116 70.500000 | Adult | . 117 29.000000 | Adult | . 118 24.000000 | Adult | . 119 2.000000 | Child | . 120 21.000000 | Adult | . 121 29.699118 | Adult | . 122 32.500000 | Adult | . 123 32.500000 | Adult | . 124 54.000000 | Adult | . 125 12.000000 | Child | . 126 29.699118 | Adult | . 127 24.000000 | Adult | . 128 29.699118 | Adult | . 129 45.000000 | Adult | . 130 33.000000 | Adult | . 131 20.000000 | Adult | . 132 47.000000 | Adult | . 133 29.000000 | Adult | . 134 25.000000 | Adult | . 135 23.000000 | Adult | . 136 19.000000 | Adult | . 137 37.000000 | Adult | . 138 16.000000 | Adult | . 139 24.000000 | Adult | . 140 29.699118 | Adult | . 141 22.000000 | Adult | . 142 24.000000 | Adult | . 143 19.000000 | Adult | . 144 18.000000 | Adult | . 145 19.000000 | Adult | . 146 27.000000 | Adult | . 147 9.000000 | Child | . 148 36.500000 | Adult | . 149 42.000000 | Adult | . 150 51.000000 | Adult | . 151 22.000000 | Adult | . 152 55.500000 | Adult | . 153 40.500000 | Adult | . 154 29.699118 | Adult | . 155 51.000000 | Adult | . 156 16.000000 | Adult | . 157 30.000000 | Adult | . 158 29.699118 | Adult | . 159 29.699118 | Adult | . 160 44.000000 | Adult | . 161 40.000000 | Adult | . 162 26.000000 | Adult | . 163 17.000000 | Adult | . 164 1.000000 | Child | . 165 9.000000 | Child | . 166 29.699118 | Adult | . 167 45.000000 | Adult | . 168 29.699118 | Adult | . 169 28.000000 | Adult | . 170 61.000000 | Adult | . 171 4.000000 | Child | . 172 1.000000 | Child | . 173 21.000000 | Adult | . 174 56.000000 | Adult | . 175 18.000000 | Adult | . 176 29.699118 | Adult | . 177 50.000000 | Adult | . 178 30.000000 | Adult | . 179 36.000000 | Adult | . 180 29.699118 | Adult | . 181 29.699118 | Adult | . 182 9.000000 | Child | . 183 1.000000 | Child | . 184 4.000000 | Child | . 185 29.699118 | Adult | . 186 29.699118 | Adult | . 187 45.000000 | Adult | . 188 40.000000 | Adult | . 189 36.000000 | Adult | . 190 32.000000 | Adult | . 191 19.000000 | Adult | . 192 19.000000 | Adult | . 193 3.000000 | Child | . 194 44.000000 | Adult | . 195 58.000000 | Adult | . 196 29.699118 | Adult | . 197 42.000000 | Adult | . 198 29.699118 | Adult | . 199 24.000000 | Adult | . 200 28.000000 | Adult | . 201 29.699118 | Adult | . 202 34.000000 | Adult | . 203 45.500000 | Adult | . 204 18.000000 | Adult | . 205 2.000000 | Child | . 206 32.000000 | Adult | . 207 26.000000 | Adult | . 208 16.000000 | Adult | . 209 40.000000 | Adult | . 210 24.000000 | Adult | . 211 35.000000 | Adult | . 212 22.000000 | Adult | . 213 30.000000 | Adult | . 214 29.699118 | Adult | . 215 31.000000 | Adult | . 216 27.000000 | Adult | . 217 42.000000 | Adult | . 218 32.000000 | Adult | . 219 30.000000 | Adult | . 220 16.000000 | Adult | . 221 27.000000 | Adult | . 222 51.000000 | Adult | . 223 29.699118 | Adult | . 224 38.000000 | Adult | . 225 22.000000 | Adult | . 226 19.000000 | Adult | . 227 20.500000 | Adult | . 228 18.000000 | Adult | . 229 29.699118 | Adult | . 230 35.000000 | Adult | . 231 29.000000 | Adult | . 232 59.000000 | Adult | . 233 5.000000 | Child | . 234 24.000000 | Adult | . 235 29.699118 | Adult | . 236 44.000000 | Adult | . 237 8.000000 | Child | . 238 19.000000 | Adult | . 239 33.000000 | Adult | . 240 29.699118 | Adult | . 241 29.699118 | Adult | . 242 29.000000 | Adult | . 243 22.000000 | Adult | . 244 30.000000 | Adult | . 245 44.000000 | Adult | . 246 25.000000 | Adult | . 247 24.000000 | Adult | . 248 37.000000 | Adult | . 249 54.000000 | Adult | . 250 29.699118 | Adult | . 251 29.000000 | Adult | . 252 62.000000 | Adult | . 253 30.000000 | Adult | . 254 41.000000 | Adult | . 255 29.000000 | Adult | . 256 29.699118 | Adult | . 257 30.000000 | Adult | . 258 35.000000 | Adult | . 259 50.000000 | Adult | . 260 29.699118 | Adult | . 261 3.000000 | Child | . 262 52.000000 | Adult | . 263 40.000000 | Adult | . 264 29.699118 | Adult | . 265 36.000000 | Adult | . 266 16.000000 | Adult | . 267 25.000000 | Adult | . 268 58.000000 | Adult | . 269 35.000000 | Adult | . 270 29.699118 | Adult | . 271 25.000000 | Adult | . 272 41.000000 | Adult | . 273 37.000000 | Adult | . 274 29.699118 | Adult | . 275 63.000000 | Adult | . 276 45.000000 | Adult | . 277 29.699118 | Adult | . 278 7.000000 | Child | . 279 35.000000 | Adult | . 280 65.000000 | Adult | . 281 28.000000 | Adult | . 282 16.000000 | Adult | . 283 19.000000 | Adult | . 284 29.699118 | Adult | . 285 33.000000 | Adult | . 286 30.000000 | Adult | . 287 22.000000 | Adult | . 288 42.000000 | Adult | . 289 22.000000 | Adult | . 290 26.000000 | Adult | . 291 19.000000 | Adult | . 292 36.000000 | Adult | . 293 24.000000 | Adult | . 294 24.000000 | Adult | . 295 29.699118 | Adult | . 296 23.500000 | Adult | . 297 2.000000 | Child | . 298 29.699118 | Adult | . 299 50.000000 | Adult | . 300 29.699118 | Adult | . 301 29.699118 | Adult | . 302 19.000000 | Adult | . 303 29.699118 | Adult | . 304 29.699118 | Adult | . 305 0.920000 | Child | . 306 29.699118 | Adult | . 307 17.000000 | Adult | . 308 30.000000 | Adult | . 309 30.000000 | Adult | . 310 24.000000 | Adult | . 311 18.000000 | Adult | . 312 26.000000 | Adult | . 313 28.000000 | Adult | . 314 43.000000 | Adult | . 315 26.000000 | Adult | . 316 24.000000 | Adult | . 317 54.000000 | Adult | . 318 31.000000 | Adult | . 319 40.000000 | Adult | . 320 22.000000 | Adult | . 321 27.000000 | Adult | . 322 30.000000 | Adult | . 323 22.000000 | Adult | . 324 29.699118 | Adult | . 325 36.000000 | Adult | . 326 61.000000 | Adult | . 327 36.000000 | Adult | . 328 31.000000 | Adult | . 329 16.000000 | Adult | . 330 29.699118 | Adult | . 331 45.500000 | Adult | . 332 38.000000 | Adult | . 333 16.000000 | Adult | . 334 29.699118 | Adult | . 335 29.699118 | Adult | . 336 29.000000 | Adult | . 337 41.000000 | Adult | . 338 45.000000 | Adult | . 339 45.000000 | Adult | . 340 2.000000 | Child | . 341 24.000000 | Adult | . 342 28.000000 | Adult | . 343 25.000000 | Adult | . 344 36.000000 | Adult | . 345 24.000000 | Adult | . 346 40.000000 | Adult | . 347 29.699118 | Adult | . 348 3.000000 | Child | . 349 42.000000 | Adult | . 350 23.000000 | Adult | . 351 29.699118 | Adult | . 352 15.000000 | Child | . 353 25.000000 | Adult | . 354 29.699118 | Adult | . 355 28.000000 | Adult | . 356 22.000000 | Adult | . 357 38.000000 | Adult | . 358 29.699118 | Adult | . 359 29.699118 | Adult | . 360 40.000000 | Adult | . 361 29.000000 | Adult | . 362 45.000000 | Adult | . 363 35.000000 | Adult | . 364 29.699118 | Adult | . 365 30.000000 | Adult | . 366 60.000000 | Adult | . 367 29.699118 | Adult | . 368 29.699118 | Adult | . 369 24.000000 | Adult | . 370 25.000000 | Adult | . 371 18.000000 | Adult | . 372 19.000000 | Adult | . 373 22.000000 | Adult | . 374 3.000000 | Child | . 375 29.699118 | Adult | . 376 22.000000 | Adult | . 377 27.000000 | Adult | . 378 20.000000 | Adult | . 379 19.000000 | Adult | . 380 42.000000 | Adult | . 381 1.000000 | Child | . 382 32.000000 | Adult | . 383 35.000000 | Adult | . 384 29.699118 | Adult | . 385 18.000000 | Adult | . 386 1.000000 | Child | . 387 36.000000 | Adult | . 388 29.699118 | Adult | . 389 17.000000 | Adult | . 390 36.000000 | Adult | . 391 21.000000 | Adult | . 392 28.000000 | Adult | . 393 23.000000 | Adult | . 394 24.000000 | Adult | . 395 22.000000 | Adult | . 396 31.000000 | Adult | . 397 46.000000 | Adult | . 398 23.000000 | Adult | . 399 28.000000 | Adult | . 400 39.000000 | Adult | . 401 26.000000 | Adult | . 402 21.000000 | Adult | . 403 28.000000 | Adult | . 404 20.000000 | Adult | . 405 34.000000 | Adult | . 406 51.000000 | Adult | . 407 3.000000 | Child | . 408 21.000000 | Adult | . 409 29.699118 | Adult | . 410 29.699118 | Adult | . 411 29.699118 | Adult | . 412 33.000000 | Adult | . 413 29.699118 | Adult | . 414 44.000000 | Adult | . 415 29.699118 | Adult | . 416 34.000000 | Adult | . 417 18.000000 | Adult | . 418 30.000000 | Adult | . 419 10.000000 | Child | . 420 29.699118 | Adult | . 421 21.000000 | Adult | . 422 29.000000 | Adult | . 423 28.000000 | Adult | . 424 18.000000 | Adult | . 425 29.699118 | Adult | . 426 28.000000 | Adult | . 427 19.000000 | Adult | . 428 29.699118 | Adult | . 429 32.000000 | Adult | . 430 28.000000 | Adult | . 431 29.699118 | Adult | . 432 42.000000 | Adult | . 433 17.000000 | Adult | . 434 50.000000 | Adult | . 435 14.000000 | Child | . 436 21.000000 | Adult | . 437 24.000000 | Adult | . 438 64.000000 | Adult | . 439 31.000000 | Adult | . 440 45.000000 | Adult | . 441 20.000000 | Adult | . 442 25.000000 | Adult | . 443 28.000000 | Adult | . 444 29.699118 | Adult | . 445 4.000000 | Child | . 446 13.000000 | Child | . 447 34.000000 | Adult | . 448 5.000000 | Child | . 449 52.000000 | Adult | . 450 36.000000 | Adult | . 451 29.699118 | Adult | . 452 30.000000 | Adult | . 453 49.000000 | Adult | . 454 29.699118 | Adult | . 455 29.000000 | Adult | . 456 65.000000 | Adult | . 457 29.699118 | Adult | . 458 50.000000 | Adult | . 459 29.699118 | Adult | . 460 48.000000 | Adult | . 461 34.000000 | Adult | . 462 47.000000 | Adult | . 463 48.000000 | Adult | . 464 29.699118 | Adult | . 465 38.000000 | Adult | . 466 29.699118 | Adult | . 467 56.000000 | Adult | . 468 29.699118 | Adult | . 469 0.750000 | Child | . 470 29.699118 | Adult | . 471 38.000000 | Adult | . 472 33.000000 | Adult | . 473 23.000000 | Adult | . 474 22.000000 | Adult | . 475 29.699118 | Adult | . 476 34.000000 | Adult | . 477 29.000000 | Adult | . 478 22.000000 | Adult | . 479 2.000000 | Child | . 480 9.000000 | Child | . 481 29.699118 | Adult | . 482 50.000000 | Adult | . 483 63.000000 | Adult | . 484 25.000000 | Adult | . 485 29.699118 | Adult | . 486 35.000000 | Adult | . 487 58.000000 | Adult | . 488 30.000000 | Adult | . 489 9.000000 | Child | . 490 29.699118 | Adult | . 491 21.000000 | Adult | . 492 55.000000 | Adult | . 493 71.000000 | Adult | . 494 21.000000 | Adult | . 495 29.699118 | Adult | . 496 54.000000 | Adult | . 497 29.699118 | Adult | . 498 25.000000 | Adult | . 499 24.000000 | Adult | . 500 17.000000 | Adult | . 501 21.000000 | Adult | . 502 29.699118 | Adult | . 503 37.000000 | Adult | . 504 16.000000 | Adult | . 505 18.000000 | Adult | . 506 33.000000 | Adult | . 507 29.699118 | Adult | . 508 28.000000 | Adult | . 509 26.000000 | Adult | . 510 29.000000 | Adult | . 511 29.699118 | Adult | . 512 36.000000 | Adult | . 513 54.000000 | Adult | . 514 24.000000 | Adult | . 515 47.000000 | Adult | . 516 34.000000 | Adult | . 517 29.699118 | Adult | . 518 36.000000 | Adult | . 519 32.000000 | Adult | . 520 30.000000 | Adult | . 521 22.000000 | Adult | . 522 29.699118 | Adult | . 523 44.000000 | Adult | . 524 29.699118 | Adult | . 525 40.500000 | Adult | . 526 50.000000 | Adult | . 527 29.699118 | Adult | . 528 39.000000 | Adult | . 529 23.000000 | Adult | . 530 2.000000 | Child | . 531 29.699118 | Adult | . 532 17.000000 | Adult | . 533 29.699118 | Adult | . 534 30.000000 | Adult | . 535 7.000000 | Child | . 536 45.000000 | Adult | . 537 30.000000 | Adult | . 538 29.699118 | Adult | . 539 22.000000 | Adult | . 540 36.000000 | Adult | . 541 9.000000 | Child | . 542 11.000000 | Child | . 543 32.000000 | Adult | . 544 50.000000 | Adult | . 545 64.000000 | Adult | . 546 19.000000 | Adult | . 547 29.699118 | Adult | . 548 33.000000 | Adult | . 549 8.000000 | Child | . 550 17.000000 | Adult | . 551 27.000000 | Adult | . 552 29.699118 | Adult | . 553 22.000000 | Adult | . 554 22.000000 | Adult | . 555 62.000000 | Adult | . 556 48.000000 | Adult | . 557 29.699118 | Adult | . 558 39.000000 | Adult | . 559 36.000000 | Adult | . 560 29.699118 | Adult | . 561 40.000000 | Adult | . 562 28.000000 | Adult | . 563 29.699118 | Adult | . 564 29.699118 | Adult | . 565 24.000000 | Adult | . 566 19.000000 | Adult | . 567 29.000000 | Adult | . 568 29.699118 | Adult | . 569 32.000000 | Adult | . 570 62.000000 | Adult | . 571 53.000000 | Adult | . 572 36.000000 | Adult | . 573 29.699118 | Adult | . 574 16.000000 | Adult | . 575 19.000000 | Adult | . 576 34.000000 | Adult | . 577 39.000000 | Adult | . 578 29.699118 | Adult | . 579 32.000000 | Adult | . 580 25.000000 | Adult | . 581 39.000000 | Adult | . 582 54.000000 | Adult | . 583 36.000000 | Adult | . 584 29.699118 | Adult | . 585 18.000000 | Adult | . 586 47.000000 | Adult | . 587 60.000000 | Adult | . 588 22.000000 | Adult | . 589 29.699118 | Adult | . 590 35.000000 | Adult | . 591 52.000000 | Adult | . 592 47.000000 | Adult | . 593 29.699118 | Adult | . 594 37.000000 | Adult | . 595 36.000000 | Adult | . 596 29.699118 | Adult | . 597 49.000000 | Adult | . 598 29.699118 | Adult | . 599 49.000000 | Adult | . 600 24.000000 | Adult | . 601 29.699118 | Adult | . 602 29.699118 | Adult | . 603 44.000000 | Adult | . 604 35.000000 | Adult | . 605 36.000000 | Adult | . 606 30.000000 | Adult | . 607 27.000000 | Adult | . 608 22.000000 | Adult | . 609 40.000000 | Adult | . 610 39.000000 | Adult | . 611 29.699118 | Adult | . 612 29.699118 | Adult | . 613 29.699118 | Adult | . 614 35.000000 | Adult | . 615 24.000000 | Adult | . 616 34.000000 | Adult | . 617 26.000000 | Adult | . 618 4.000000 | Child | . 619 26.000000 | Adult | . 620 27.000000 | Adult | . 621 42.000000 | Adult | . 622 20.000000 | Adult | . 623 21.000000 | Adult | . 624 21.000000 | Adult | . 625 61.000000 | Adult | . 626 57.000000 | Adult | . 627 21.000000 | Adult | . 628 26.000000 | Adult | . 629 29.699118 | Adult | . 630 80.000000 | Adult | . 631 51.000000 | Adult | . 632 32.000000 | Adult | . 633 29.699118 | Adult | . 634 9.000000 | Child | . 635 28.000000 | Adult | . 636 32.000000 | Adult | . 637 31.000000 | Adult | . 638 41.000000 | Adult | . 639 29.699118 | Adult | . 640 20.000000 | Adult | . 641 24.000000 | Adult | . 642 2.000000 | Child | . 643 29.699118 | Adult | . 644 0.750000 | Child | . 645 48.000000 | Adult | . 646 19.000000 | Adult | . 647 56.000000 | Adult | . 648 29.699118 | Adult | . 649 23.000000 | Adult | . 650 29.699118 | Adult | . 651 18.000000 | Adult | . 652 21.000000 | Adult | . 653 29.699118 | Adult | . 654 18.000000 | Adult | . 655 24.000000 | Adult | . 656 29.699118 | Adult | . 657 32.000000 | Adult | . 658 23.000000 | Adult | . 659 58.000000 | Adult | . 660 50.000000 | Adult | . 661 40.000000 | Adult | . 662 47.000000 | Adult | . 663 36.000000 | Adult | . 664 20.000000 | Adult | . 665 32.000000 | Adult | . 666 25.000000 | Adult | . 667 29.699118 | Adult | . 668 43.000000 | Adult | . 669 29.699118 | Adult | . 670 40.000000 | Adult | . 671 31.000000 | Adult | . 672 70.000000 | Adult | . 673 31.000000 | Adult | . 674 29.699118 | Adult | . 675 18.000000 | Adult | . 676 24.500000 | Adult | . 677 18.000000 | Adult | . 678 43.000000 | Adult | . 679 36.000000 | Adult | . 680 29.699118 | Adult | . 681 27.000000 | Adult | . 682 20.000000 | Adult | . 683 14.000000 | Child | . 684 60.000000 | Adult | . 685 25.000000 | Adult | . 686 14.000000 | Child | . 687 19.000000 | Adult | . 688 18.000000 | Adult | . 689 15.000000 | Child | . 690 31.000000 | Adult | . 691 4.000000 | Child | . 692 29.699118 | Adult | . 693 25.000000 | Adult | . 694 60.000000 | Adult | . 695 52.000000 | Adult | . 696 44.000000 | Adult | . 697 29.699118 | Adult | . 698 49.000000 | Adult | . 699 42.000000 | Adult | . 700 18.000000 | Adult | . 701 35.000000 | Adult | . 702 18.000000 | Adult | . 703 25.000000 | Adult | . 704 26.000000 | Adult | . 705 39.000000 | Adult | . 706 45.000000 | Adult | . 707 42.000000 | Adult | . 708 22.000000 | Adult | . 709 29.699118 | Adult | . 710 24.000000 | Adult | . 711 29.699118 | Adult | . 712 48.000000 | Adult | . 713 29.000000 | Adult | . 714 52.000000 | Adult | . 715 19.000000 | Adult | . 716 38.000000 | Adult | . 717 27.000000 | Adult | . 718 29.699118 | Adult | . 719 33.000000 | Adult | . 720 6.000000 | Child | . 721 17.000000 | Adult | . 722 34.000000 | Adult | . 723 50.000000 | Adult | . 724 27.000000 | Adult | . 725 20.000000 | Adult | . 726 30.000000 | Adult | . 727 29.699118 | Adult | . 728 25.000000 | Adult | . 729 25.000000 | Adult | . 730 29.000000 | Adult | . 731 11.000000 | Child | . 732 29.699118 | Adult | . 733 23.000000 | Adult | . 734 23.000000 | Adult | . 735 28.500000 | Adult | . 736 48.000000 | Adult | . 737 35.000000 | Adult | . 738 29.699118 | Adult | . 739 29.699118 | Adult | . 740 29.699118 | Adult | . 741 36.000000 | Adult | . 742 21.000000 | Adult | . 743 24.000000 | Adult | . 744 31.000000 | Adult | . 745 70.000000 | Adult | . 746 16.000000 | Adult | . 747 30.000000 | Adult | . 748 19.000000 | Adult | . 749 31.000000 | Adult | . 750 4.000000 | Child | . 751 6.000000 | Child | . 752 33.000000 | Adult | . 753 23.000000 | Adult | . 754 48.000000 | Adult | . 755 0.670000 | Child | . 756 28.000000 | Adult | . 757 18.000000 | Adult | . 758 34.000000 | Adult | . 759 33.000000 | Adult | . 760 29.699118 | Adult | . 761 41.000000 | Adult | . 762 20.000000 | Adult | . 763 36.000000 | Adult | . 764 16.000000 | Adult | . 765 51.000000 | Adult | . 766 29.699118 | Adult | . 767 30.500000 | Adult | . 768 29.699118 | Adult | . 769 32.000000 | Adult | . 770 24.000000 | Adult | . 771 48.000000 | Adult | . 772 57.000000 | Adult | . 773 29.699118 | Adult | . 774 54.000000 | Adult | . 775 18.000000 | Adult | . 776 29.699118 | Adult | . 777 5.000000 | Child | . 778 29.699118 | Adult | . 779 43.000000 | Adult | . 780 13.000000 | Child | . 781 17.000000 | Adult | . 782 29.000000 | Adult | . 783 29.699118 | Adult | . 784 25.000000 | Adult | . 785 25.000000 | Adult | . 786 18.000000 | Adult | . 787 8.000000 | Child | . 788 1.000000 | Child | . 789 46.000000 | Adult | . 790 29.699118 | Adult | . 791 16.000000 | Adult | . 792 29.699118 | Adult | . 793 29.699118 | Adult | . 794 25.000000 | Adult | . 795 39.000000 | Adult | . 796 49.000000 | Adult | . 797 31.000000 | Adult | . 798 30.000000 | Adult | . 799 30.000000 | Adult | . 800 34.000000 | Adult | . 801 31.000000 | Adult | . 802 11.000000 | Child | . 803 0.420000 | Child | . 804 27.000000 | Adult | . 805 31.000000 | Adult | . 806 39.000000 | Adult | . 807 18.000000 | Adult | . 808 39.000000 | Adult | . 809 33.000000 | Adult | . 810 26.000000 | Adult | . 811 39.000000 | Adult | . 812 35.000000 | Adult | . 813 6.000000 | Child | . 814 30.500000 | Adult | . 815 29.699118 | Adult | . 816 23.000000 | Adult | . 817 31.000000 | Adult | . 818 43.000000 | Adult | . 819 10.000000 | Child | . 820 52.000000 | Adult | . 821 27.000000 | Adult | . 822 38.000000 | Adult | . 823 27.000000 | Adult | . 824 2.000000 | Child | . 825 29.699118 | Adult | . 826 29.699118 | Adult | . 827 1.000000 | Child | . 828 29.699118 | Adult | . 829 62.000000 | Adult | . 830 15.000000 | Child | . 831 0.830000 | Child | . 832 29.699118 | Adult | . 833 23.000000 | Adult | . 834 18.000000 | Adult | . 835 39.000000 | Adult | . 836 21.000000 | Adult | . 837 29.699118 | Adult | . 838 32.000000 | Adult | . 839 29.699118 | Adult | . 840 20.000000 | Adult | . 841 16.000000 | Adult | . 842 30.000000 | Adult | . 843 34.500000 | Adult | . 844 17.000000 | Adult | . 845 42.000000 | Adult | . 846 29.699118 | Adult | . 847 35.000000 | Adult | . 848 28.000000 | Adult | . 849 29.699118 | Adult | . 850 4.000000 | Child | . 851 74.000000 | Adult | . 852 9.000000 | Child | . 853 16.000000 | Adult | . 854 44.000000 | Adult | . 855 18.000000 | Adult | . 856 45.000000 | Adult | . 857 51.000000 | Adult | . 858 24.000000 | Adult | . 859 29.699118 | Adult | . 860 41.000000 | Adult | . 861 21.000000 | Adult | . 862 48.000000 | Adult | . 863 29.699118 | Adult | . 864 24.000000 | Adult | . 865 42.000000 | Adult | . 866 27.000000 | Adult | . 867 31.000000 | Adult | . 868 29.699118 | Adult | . 869 4.000000 | Child | . 870 26.000000 | Adult | . 871 47.000000 | Adult | . 872 33.000000 | Adult | . 873 47.000000 | Adult | . 874 28.000000 | Adult | . 875 15.000000 | Child | . 876 20.000000 | Adult | . 877 19.000000 | Adult | . 878 29.699118 | Adult | . 879 56.000000 | Adult | . 880 25.000000 | Adult | . 881 33.000000 | Adult | . 882 22.000000 | Adult | . 883 28.000000 | Adult | . 884 25.000000 | Adult | . 885 39.000000 | Adult | . 886 27.000000 | Adult | . 887 19.000000 | Adult | . 888 29.699118 | Adult | . 889 26.000000 | Adult | . 890 32.000000 | Adult | . titanic_df[&#39;Age_cat&#39;] = titanic_df[&#39;Age&#39;].apply(lambda x: &#39;Child&#39; if x &lt;=15 else ( &#39;Ault&#39; if x &lt;= 60 else &#39;Elerly&#39;)) titanic_df[[&#39;Age&#39;, &#39;Age_cat&#39;]] . Age Age_cat . 0 22.000000 | Ault | . 1 38.000000 | Ault | . 2 26.000000 | Ault | . 3 35.000000 | Ault | . 4 35.000000 | Ault | . 5 29.699118 | Ault | . 6 54.000000 | Ault | . 7 2.000000 | Child | . 8 27.000000 | Ault | . 9 14.000000 | Child | . 10 4.000000 | Child | . 11 58.000000 | Ault | . 12 20.000000 | Ault | . 13 39.000000 | Ault | . 14 14.000000 | Child | . 15 55.000000 | Ault | . 16 2.000000 | Child | . 17 29.699118 | Ault | . 18 31.000000 | Ault | . 19 29.699118 | Ault | . 20 35.000000 | Ault | . 21 34.000000 | Ault | . 22 15.000000 | Child | . 23 28.000000 | Ault | . 24 8.000000 | Child | . 25 38.000000 | Ault | . 26 29.699118 | Ault | . 27 19.000000 | Ault | . 28 29.699118 | Ault | . 29 29.699118 | Ault | . 30 40.000000 | Ault | . 31 29.699118 | Ault | . 32 29.699118 | Ault | . 33 66.000000 | Elerly | . 34 28.000000 | Ault | . 35 42.000000 | Ault | . 36 29.699118 | Ault | . 37 21.000000 | Ault | . 38 18.000000 | Ault | . 39 14.000000 | Child | . 40 40.000000 | Ault | . 41 27.000000 | Ault | . 42 29.699118 | Ault | . 43 3.000000 | Child | . 44 19.000000 | Ault | . 45 29.699118 | Ault | . 46 29.699118 | Ault | . 47 29.699118 | Ault | . 48 29.699118 | Ault | . 49 18.000000 | Ault | . 50 7.000000 | Child | . 51 21.000000 | Ault | . 52 49.000000 | Ault | . 53 29.000000 | Ault | . 54 65.000000 | Elerly | . 55 29.699118 | Ault | . 56 21.000000 | Ault | . 57 28.500000 | Ault | . 58 5.000000 | Child | . 59 11.000000 | Child | . 60 22.000000 | Ault | . 61 38.000000 | Ault | . 62 45.000000 | Ault | . 63 4.000000 | Child | . 64 29.699118 | Ault | . 65 29.699118 | Ault | . 66 29.000000 | Ault | . 67 19.000000 | Ault | . 68 17.000000 | Ault | . 69 26.000000 | Ault | . 70 32.000000 | Ault | . 71 16.000000 | Ault | . 72 21.000000 | Ault | . 73 26.000000 | Ault | . 74 32.000000 | Ault | . 75 25.000000 | Ault | . 76 29.699118 | Ault | . 77 29.699118 | Ault | . 78 0.830000 | Child | . 79 30.000000 | Ault | . 80 22.000000 | Ault | . 81 29.000000 | Ault | . 82 29.699118 | Ault | . 83 28.000000 | Ault | . 84 17.000000 | Ault | . 85 33.000000 | Ault | . 86 16.000000 | Ault | . 87 29.699118 | Ault | . 88 23.000000 | Ault | . 89 24.000000 | Ault | . 90 29.000000 | Ault | . 91 20.000000 | Ault | . 92 46.000000 | Ault | . 93 26.000000 | Ault | . 94 59.000000 | Ault | . 95 29.699118 | Ault | . 96 71.000000 | Elerly | . 97 23.000000 | Ault | . 98 34.000000 | Ault | . 99 34.000000 | Ault | . 100 28.000000 | Ault | . 101 29.699118 | Ault | . 102 21.000000 | Ault | . 103 33.000000 | Ault | . 104 37.000000 | Ault | . 105 28.000000 | Ault | . 106 21.000000 | Ault | . 107 29.699118 | Ault | . 108 38.000000 | Ault | . 109 29.699118 | Ault | . 110 47.000000 | Ault | . 111 14.500000 | Child | . 112 22.000000 | Ault | . 113 20.000000 | Ault | . 114 17.000000 | Ault | . 115 21.000000 | Ault | . 116 70.500000 | Elerly | . 117 29.000000 | Ault | . 118 24.000000 | Ault | . 119 2.000000 | Child | . 120 21.000000 | Ault | . 121 29.699118 | Ault | . 122 32.500000 | Ault | . 123 32.500000 | Ault | . 124 54.000000 | Ault | . 125 12.000000 | Child | . 126 29.699118 | Ault | . 127 24.000000 | Ault | . 128 29.699118 | Ault | . 129 45.000000 | Ault | . 130 33.000000 | Ault | . 131 20.000000 | Ault | . 132 47.000000 | Ault | . 133 29.000000 | Ault | . 134 25.000000 | Ault | . 135 23.000000 | Ault | . 136 19.000000 | Ault | . 137 37.000000 | Ault | . 138 16.000000 | Ault | . 139 24.000000 | Ault | . 140 29.699118 | Ault | . 141 22.000000 | Ault | . 142 24.000000 | Ault | . 143 19.000000 | Ault | . 144 18.000000 | Ault | . 145 19.000000 | Ault | . 146 27.000000 | Ault | . 147 9.000000 | Child | . 148 36.500000 | Ault | . 149 42.000000 | Ault | . 150 51.000000 | Ault | . 151 22.000000 | Ault | . 152 55.500000 | Ault | . 153 40.500000 | Ault | . 154 29.699118 | Ault | . 155 51.000000 | Ault | . 156 16.000000 | Ault | . 157 30.000000 | Ault | . 158 29.699118 | Ault | . 159 29.699118 | Ault | . 160 44.000000 | Ault | . 161 40.000000 | Ault | . 162 26.000000 | Ault | . 163 17.000000 | Ault | . 164 1.000000 | Child | . 165 9.000000 | Child | . 166 29.699118 | Ault | . 167 45.000000 | Ault | . 168 29.699118 | Ault | . 169 28.000000 | Ault | . 170 61.000000 | Elerly | . 171 4.000000 | Child | . 172 1.000000 | Child | . 173 21.000000 | Ault | . 174 56.000000 | Ault | . 175 18.000000 | Ault | . 176 29.699118 | Ault | . 177 50.000000 | Ault | . 178 30.000000 | Ault | . 179 36.000000 | Ault | . 180 29.699118 | Ault | . 181 29.699118 | Ault | . 182 9.000000 | Child | . 183 1.000000 | Child | . 184 4.000000 | Child | . 185 29.699118 | Ault | . 186 29.699118 | Ault | . 187 45.000000 | Ault | . 188 40.000000 | Ault | . 189 36.000000 | Ault | . 190 32.000000 | Ault | . 191 19.000000 | Ault | . 192 19.000000 | Ault | . 193 3.000000 | Child | . 194 44.000000 | Ault | . 195 58.000000 | Ault | . 196 29.699118 | Ault | . 197 42.000000 | Ault | . 198 29.699118 | Ault | . 199 24.000000 | Ault | . 200 28.000000 | Ault | . 201 29.699118 | Ault | . 202 34.000000 | Ault | . 203 45.500000 | Ault | . 204 18.000000 | Ault | . 205 2.000000 | Child | . 206 32.000000 | Ault | . 207 26.000000 | Ault | . 208 16.000000 | Ault | . 209 40.000000 | Ault | . 210 24.000000 | Ault | . 211 35.000000 | Ault | . 212 22.000000 | Ault | . 213 30.000000 | Ault | . 214 29.699118 | Ault | . 215 31.000000 | Ault | . 216 27.000000 | Ault | . 217 42.000000 | Ault | . 218 32.000000 | Ault | . 219 30.000000 | Ault | . 220 16.000000 | Ault | . 221 27.000000 | Ault | . 222 51.000000 | Ault | . 223 29.699118 | Ault | . 224 38.000000 | Ault | . 225 22.000000 | Ault | . 226 19.000000 | Ault | . 227 20.500000 | Ault | . 228 18.000000 | Ault | . 229 29.699118 | Ault | . 230 35.000000 | Ault | . 231 29.000000 | Ault | . 232 59.000000 | Ault | . 233 5.000000 | Child | . 234 24.000000 | Ault | . 235 29.699118 | Ault | . 236 44.000000 | Ault | . 237 8.000000 | Child | . 238 19.000000 | Ault | . 239 33.000000 | Ault | . 240 29.699118 | Ault | . 241 29.699118 | Ault | . 242 29.000000 | Ault | . 243 22.000000 | Ault | . 244 30.000000 | Ault | . 245 44.000000 | Ault | . 246 25.000000 | Ault | . 247 24.000000 | Ault | . 248 37.000000 | Ault | . 249 54.000000 | Ault | . 250 29.699118 | Ault | . 251 29.000000 | Ault | . 252 62.000000 | Elerly | . 253 30.000000 | Ault | . 254 41.000000 | Ault | . 255 29.000000 | Ault | . 256 29.699118 | Ault | . 257 30.000000 | Ault | . 258 35.000000 | Ault | . 259 50.000000 | Ault | . 260 29.699118 | Ault | . 261 3.000000 | Child | . 262 52.000000 | Ault | . 263 40.000000 | Ault | . 264 29.699118 | Ault | . 265 36.000000 | Ault | . 266 16.000000 | Ault | . 267 25.000000 | Ault | . 268 58.000000 | Ault | . 269 35.000000 | Ault | . 270 29.699118 | Ault | . 271 25.000000 | Ault | . 272 41.000000 | Ault | . 273 37.000000 | Ault | . 274 29.699118 | Ault | . 275 63.000000 | Elerly | . 276 45.000000 | Ault | . 277 29.699118 | Ault | . 278 7.000000 | Child | . 279 35.000000 | Ault | . 280 65.000000 | Elerly | . 281 28.000000 | Ault | . 282 16.000000 | Ault | . 283 19.000000 | Ault | . 284 29.699118 | Ault | . 285 33.000000 | Ault | . 286 30.000000 | Ault | . 287 22.000000 | Ault | . 288 42.000000 | Ault | . 289 22.000000 | Ault | . 290 26.000000 | Ault | . 291 19.000000 | Ault | . 292 36.000000 | Ault | . 293 24.000000 | Ault | . 294 24.000000 | Ault | . 295 29.699118 | Ault | . 296 23.500000 | Ault | . 297 2.000000 | Child | . 298 29.699118 | Ault | . 299 50.000000 | Ault | . 300 29.699118 | Ault | . 301 29.699118 | Ault | . 302 19.000000 | Ault | . 303 29.699118 | Ault | . 304 29.699118 | Ault | . 305 0.920000 | Child | . 306 29.699118 | Ault | . 307 17.000000 | Ault | . 308 30.000000 | Ault | . 309 30.000000 | Ault | . 310 24.000000 | Ault | . 311 18.000000 | Ault | . 312 26.000000 | Ault | . 313 28.000000 | Ault | . 314 43.000000 | Ault | . 315 26.000000 | Ault | . 316 24.000000 | Ault | . 317 54.000000 | Ault | . 318 31.000000 | Ault | . 319 40.000000 | Ault | . 320 22.000000 | Ault | . 321 27.000000 | Ault | . 322 30.000000 | Ault | . 323 22.000000 | Ault | . 324 29.699118 | Ault | . 325 36.000000 | Ault | . 326 61.000000 | Elerly | . 327 36.000000 | Ault | . 328 31.000000 | Ault | . 329 16.000000 | Ault | . 330 29.699118 | Ault | . 331 45.500000 | Ault | . 332 38.000000 | Ault | . 333 16.000000 | Ault | . 334 29.699118 | Ault | . 335 29.699118 | Ault | . 336 29.000000 | Ault | . 337 41.000000 | Ault | . 338 45.000000 | Ault | . 339 45.000000 | Ault | . 340 2.000000 | Child | . 341 24.000000 | Ault | . 342 28.000000 | Ault | . 343 25.000000 | Ault | . 344 36.000000 | Ault | . 345 24.000000 | Ault | . 346 40.000000 | Ault | . 347 29.699118 | Ault | . 348 3.000000 | Child | . 349 42.000000 | Ault | . 350 23.000000 | Ault | . 351 29.699118 | Ault | . 352 15.000000 | Child | . 353 25.000000 | Ault | . 354 29.699118 | Ault | . 355 28.000000 | Ault | . 356 22.000000 | Ault | . 357 38.000000 | Ault | . 358 29.699118 | Ault | . 359 29.699118 | Ault | . 360 40.000000 | Ault | . 361 29.000000 | Ault | . 362 45.000000 | Ault | . 363 35.000000 | Ault | . 364 29.699118 | Ault | . 365 30.000000 | Ault | . 366 60.000000 | Ault | . 367 29.699118 | Ault | . 368 29.699118 | Ault | . 369 24.000000 | Ault | . 370 25.000000 | Ault | . 371 18.000000 | Ault | . 372 19.000000 | Ault | . 373 22.000000 | Ault | . 374 3.000000 | Child | . 375 29.699118 | Ault | . 376 22.000000 | Ault | . 377 27.000000 | Ault | . 378 20.000000 | Ault | . 379 19.000000 | Ault | . 380 42.000000 | Ault | . 381 1.000000 | Child | . 382 32.000000 | Ault | . 383 35.000000 | Ault | . 384 29.699118 | Ault | . 385 18.000000 | Ault | . 386 1.000000 | Child | . 387 36.000000 | Ault | . 388 29.699118 | Ault | . 389 17.000000 | Ault | . 390 36.000000 | Ault | . 391 21.000000 | Ault | . 392 28.000000 | Ault | . 393 23.000000 | Ault | . 394 24.000000 | Ault | . 395 22.000000 | Ault | . 396 31.000000 | Ault | . 397 46.000000 | Ault | . 398 23.000000 | Ault | . 399 28.000000 | Ault | . 400 39.000000 | Ault | . 401 26.000000 | Ault | . 402 21.000000 | Ault | . 403 28.000000 | Ault | . 404 20.000000 | Ault | . 405 34.000000 | Ault | . 406 51.000000 | Ault | . 407 3.000000 | Child | . 408 21.000000 | Ault | . 409 29.699118 | Ault | . 410 29.699118 | Ault | . 411 29.699118 | Ault | . 412 33.000000 | Ault | . 413 29.699118 | Ault | . 414 44.000000 | Ault | . 415 29.699118 | Ault | . 416 34.000000 | Ault | . 417 18.000000 | Ault | . 418 30.000000 | Ault | . 419 10.000000 | Child | . 420 29.699118 | Ault | . 421 21.000000 | Ault | . 422 29.000000 | Ault | . 423 28.000000 | Ault | . 424 18.000000 | Ault | . 425 29.699118 | Ault | . 426 28.000000 | Ault | . 427 19.000000 | Ault | . 428 29.699118 | Ault | . 429 32.000000 | Ault | . 430 28.000000 | Ault | . 431 29.699118 | Ault | . 432 42.000000 | Ault | . 433 17.000000 | Ault | . 434 50.000000 | Ault | . 435 14.000000 | Child | . 436 21.000000 | Ault | . 437 24.000000 | Ault | . 438 64.000000 | Elerly | . 439 31.000000 | Ault | . 440 45.000000 | Ault | . 441 20.000000 | Ault | . 442 25.000000 | Ault | . 443 28.000000 | Ault | . 444 29.699118 | Ault | . 445 4.000000 | Child | . 446 13.000000 | Child | . 447 34.000000 | Ault | . 448 5.000000 | Child | . 449 52.000000 | Ault | . 450 36.000000 | Ault | . 451 29.699118 | Ault | . 452 30.000000 | Ault | . 453 49.000000 | Ault | . 454 29.699118 | Ault | . 455 29.000000 | Ault | . 456 65.000000 | Elerly | . 457 29.699118 | Ault | . 458 50.000000 | Ault | . 459 29.699118 | Ault | . 460 48.000000 | Ault | . 461 34.000000 | Ault | . 462 47.000000 | Ault | . 463 48.000000 | Ault | . 464 29.699118 | Ault | . 465 38.000000 | Ault | . 466 29.699118 | Ault | . 467 56.000000 | Ault | . 468 29.699118 | Ault | . 469 0.750000 | Child | . 470 29.699118 | Ault | . 471 38.000000 | Ault | . 472 33.000000 | Ault | . 473 23.000000 | Ault | . 474 22.000000 | Ault | . 475 29.699118 | Ault | . 476 34.000000 | Ault | . 477 29.000000 | Ault | . 478 22.000000 | Ault | . 479 2.000000 | Child | . 480 9.000000 | Child | . 481 29.699118 | Ault | . 482 50.000000 | Ault | . 483 63.000000 | Elerly | . 484 25.000000 | Ault | . 485 29.699118 | Ault | . 486 35.000000 | Ault | . 487 58.000000 | Ault | . 488 30.000000 | Ault | . 489 9.000000 | Child | . 490 29.699118 | Ault | . 491 21.000000 | Ault | . 492 55.000000 | Ault | . 493 71.000000 | Elerly | . 494 21.000000 | Ault | . 495 29.699118 | Ault | . 496 54.000000 | Ault | . 497 29.699118 | Ault | . 498 25.000000 | Ault | . 499 24.000000 | Ault | . 500 17.000000 | Ault | . 501 21.000000 | Ault | . 502 29.699118 | Ault | . 503 37.000000 | Ault | . 504 16.000000 | Ault | . 505 18.000000 | Ault | . 506 33.000000 | Ault | . 507 29.699118 | Ault | . 508 28.000000 | Ault | . 509 26.000000 | Ault | . 510 29.000000 | Ault | . 511 29.699118 | Ault | . 512 36.000000 | Ault | . 513 54.000000 | Ault | . 514 24.000000 | Ault | . 515 47.000000 | Ault | . 516 34.000000 | Ault | . 517 29.699118 | Ault | . 518 36.000000 | Ault | . 519 32.000000 | Ault | . 520 30.000000 | Ault | . 521 22.000000 | Ault | . 522 29.699118 | Ault | . 523 44.000000 | Ault | . 524 29.699118 | Ault | . 525 40.500000 | Ault | . 526 50.000000 | Ault | . 527 29.699118 | Ault | . 528 39.000000 | Ault | . 529 23.000000 | Ault | . 530 2.000000 | Child | . 531 29.699118 | Ault | . 532 17.000000 | Ault | . 533 29.699118 | Ault | . 534 30.000000 | Ault | . 535 7.000000 | Child | . 536 45.000000 | Ault | . 537 30.000000 | Ault | . 538 29.699118 | Ault | . 539 22.000000 | Ault | . 540 36.000000 | Ault | . 541 9.000000 | Child | . 542 11.000000 | Child | . 543 32.000000 | Ault | . 544 50.000000 | Ault | . 545 64.000000 | Elerly | . 546 19.000000 | Ault | . 547 29.699118 | Ault | . 548 33.000000 | Ault | . 549 8.000000 | Child | . 550 17.000000 | Ault | . 551 27.000000 | Ault | . 552 29.699118 | Ault | . 553 22.000000 | Ault | . 554 22.000000 | Ault | . 555 62.000000 | Elerly | . 556 48.000000 | Ault | . 557 29.699118 | Ault | . 558 39.000000 | Ault | . 559 36.000000 | Ault | . 560 29.699118 | Ault | . 561 40.000000 | Ault | . 562 28.000000 | Ault | . 563 29.699118 | Ault | . 564 29.699118 | Ault | . 565 24.000000 | Ault | . 566 19.000000 | Ault | . 567 29.000000 | Ault | . 568 29.699118 | Ault | . 569 32.000000 | Ault | . 570 62.000000 | Elerly | . 571 53.000000 | Ault | . 572 36.000000 | Ault | . 573 29.699118 | Ault | . 574 16.000000 | Ault | . 575 19.000000 | Ault | . 576 34.000000 | Ault | . 577 39.000000 | Ault | . 578 29.699118 | Ault | . 579 32.000000 | Ault | . 580 25.000000 | Ault | . 581 39.000000 | Ault | . 582 54.000000 | Ault | . 583 36.000000 | Ault | . 584 29.699118 | Ault | . 585 18.000000 | Ault | . 586 47.000000 | Ault | . 587 60.000000 | Ault | . 588 22.000000 | Ault | . 589 29.699118 | Ault | . 590 35.000000 | Ault | . 591 52.000000 | Ault | . 592 47.000000 | Ault | . 593 29.699118 | Ault | . 594 37.000000 | Ault | . 595 36.000000 | Ault | . 596 29.699118 | Ault | . 597 49.000000 | Ault | . 598 29.699118 | Ault | . 599 49.000000 | Ault | . 600 24.000000 | Ault | . 601 29.699118 | Ault | . 602 29.699118 | Ault | . 603 44.000000 | Ault | . 604 35.000000 | Ault | . 605 36.000000 | Ault | . 606 30.000000 | Ault | . 607 27.000000 | Ault | . 608 22.000000 | Ault | . 609 40.000000 | Ault | . 610 39.000000 | Ault | . 611 29.699118 | Ault | . 612 29.699118 | Ault | . 613 29.699118 | Ault | . 614 35.000000 | Ault | . 615 24.000000 | Ault | . 616 34.000000 | Ault | . 617 26.000000 | Ault | . 618 4.000000 | Child | . 619 26.000000 | Ault | . 620 27.000000 | Ault | . 621 42.000000 | Ault | . 622 20.000000 | Ault | . 623 21.000000 | Ault | . 624 21.000000 | Ault | . 625 61.000000 | Elerly | . 626 57.000000 | Ault | . 627 21.000000 | Ault | . 628 26.000000 | Ault | . 629 29.699118 | Ault | . 630 80.000000 | Elerly | . 631 51.000000 | Ault | . 632 32.000000 | Ault | . 633 29.699118 | Ault | . 634 9.000000 | Child | . 635 28.000000 | Ault | . 636 32.000000 | Ault | . 637 31.000000 | Ault | . 638 41.000000 | Ault | . 639 29.699118 | Ault | . 640 20.000000 | Ault | . 641 24.000000 | Ault | . 642 2.000000 | Child | . 643 29.699118 | Ault | . 644 0.750000 | Child | . 645 48.000000 | Ault | . 646 19.000000 | Ault | . 647 56.000000 | Ault | . 648 29.699118 | Ault | . 649 23.000000 | Ault | . 650 29.699118 | Ault | . 651 18.000000 | Ault | . 652 21.000000 | Ault | . 653 29.699118 | Ault | . 654 18.000000 | Ault | . 655 24.000000 | Ault | . 656 29.699118 | Ault | . 657 32.000000 | Ault | . 658 23.000000 | Ault | . 659 58.000000 | Ault | . 660 50.000000 | Ault | . 661 40.000000 | Ault | . 662 47.000000 | Ault | . 663 36.000000 | Ault | . 664 20.000000 | Ault | . 665 32.000000 | Ault | . 666 25.000000 | Ault | . 667 29.699118 | Ault | . 668 43.000000 | Ault | . 669 29.699118 | Ault | . 670 40.000000 | Ault | . 671 31.000000 | Ault | . 672 70.000000 | Elerly | . 673 31.000000 | Ault | . 674 29.699118 | Ault | . 675 18.000000 | Ault | . 676 24.500000 | Ault | . 677 18.000000 | Ault | . 678 43.000000 | Ault | . 679 36.000000 | Ault | . 680 29.699118 | Ault | . 681 27.000000 | Ault | . 682 20.000000 | Ault | . 683 14.000000 | Child | . 684 60.000000 | Ault | . 685 25.000000 | Ault | . 686 14.000000 | Child | . 687 19.000000 | Ault | . 688 18.000000 | Ault | . 689 15.000000 | Child | . 690 31.000000 | Ault | . 691 4.000000 | Child | . 692 29.699118 | Ault | . 693 25.000000 | Ault | . 694 60.000000 | Ault | . 695 52.000000 | Ault | . 696 44.000000 | Ault | . 697 29.699118 | Ault | . 698 49.000000 | Ault | . 699 42.000000 | Ault | . 700 18.000000 | Ault | . 701 35.000000 | Ault | . 702 18.000000 | Ault | . 703 25.000000 | Ault | . 704 26.000000 | Ault | . 705 39.000000 | Ault | . 706 45.000000 | Ault | . 707 42.000000 | Ault | . 708 22.000000 | Ault | . 709 29.699118 | Ault | . 710 24.000000 | Ault | . 711 29.699118 | Ault | . 712 48.000000 | Ault | . 713 29.000000 | Ault | . 714 52.000000 | Ault | . 715 19.000000 | Ault | . 716 38.000000 | Ault | . 717 27.000000 | Ault | . 718 29.699118 | Ault | . 719 33.000000 | Ault | . 720 6.000000 | Child | . 721 17.000000 | Ault | . 722 34.000000 | Ault | . 723 50.000000 | Ault | . 724 27.000000 | Ault | . 725 20.000000 | Ault | . 726 30.000000 | Ault | . 727 29.699118 | Ault | . 728 25.000000 | Ault | . 729 25.000000 | Ault | . 730 29.000000 | Ault | . 731 11.000000 | Child | . 732 29.699118 | Ault | . 733 23.000000 | Ault | . 734 23.000000 | Ault | . 735 28.500000 | Ault | . 736 48.000000 | Ault | . 737 35.000000 | Ault | . 738 29.699118 | Ault | . 739 29.699118 | Ault | . 740 29.699118 | Ault | . 741 36.000000 | Ault | . 742 21.000000 | Ault | . 743 24.000000 | Ault | . 744 31.000000 | Ault | . 745 70.000000 | Elerly | . 746 16.000000 | Ault | . 747 30.000000 | Ault | . 748 19.000000 | Ault | . 749 31.000000 | Ault | . 750 4.000000 | Child | . 751 6.000000 | Child | . 752 33.000000 | Ault | . 753 23.000000 | Ault | . 754 48.000000 | Ault | . 755 0.670000 | Child | . 756 28.000000 | Ault | . 757 18.000000 | Ault | . 758 34.000000 | Ault | . 759 33.000000 | Ault | . 760 29.699118 | Ault | . 761 41.000000 | Ault | . 762 20.000000 | Ault | . 763 36.000000 | Ault | . 764 16.000000 | Ault | . 765 51.000000 | Ault | . 766 29.699118 | Ault | . 767 30.500000 | Ault | . 768 29.699118 | Ault | . 769 32.000000 | Ault | . 770 24.000000 | Ault | . 771 48.000000 | Ault | . 772 57.000000 | Ault | . 773 29.699118 | Ault | . 774 54.000000 | Ault | . 775 18.000000 | Ault | . 776 29.699118 | Ault | . 777 5.000000 | Child | . 778 29.699118 | Ault | . 779 43.000000 | Ault | . 780 13.000000 | Child | . 781 17.000000 | Ault | . 782 29.000000 | Ault | . 783 29.699118 | Ault | . 784 25.000000 | Ault | . 785 25.000000 | Ault | . 786 18.000000 | Ault | . 787 8.000000 | Child | . 788 1.000000 | Child | . 789 46.000000 | Ault | . 790 29.699118 | Ault | . 791 16.000000 | Ault | . 792 29.699118 | Ault | . 793 29.699118 | Ault | . 794 25.000000 | Ault | . 795 39.000000 | Ault | . 796 49.000000 | Ault | . 797 31.000000 | Ault | . 798 30.000000 | Ault | . 799 30.000000 | Ault | . 800 34.000000 | Ault | . 801 31.000000 | Ault | . 802 11.000000 | Child | . 803 0.420000 | Child | . 804 27.000000 | Ault | . 805 31.000000 | Ault | . 806 39.000000 | Ault | . 807 18.000000 | Ault | . 808 39.000000 | Ault | . 809 33.000000 | Ault | . 810 26.000000 | Ault | . 811 39.000000 | Ault | . 812 35.000000 | Ault | . 813 6.000000 | Child | . 814 30.500000 | Ault | . 815 29.699118 | Ault | . 816 23.000000 | Ault | . 817 31.000000 | Ault | . 818 43.000000 | Ault | . 819 10.000000 | Child | . 820 52.000000 | Ault | . 821 27.000000 | Ault | . 822 38.000000 | Ault | . 823 27.000000 | Ault | . 824 2.000000 | Child | . 825 29.699118 | Ault | . 826 29.699118 | Ault | . 827 1.000000 | Child | . 828 29.699118 | Ault | . 829 62.000000 | Elerly | . 830 15.000000 | Child | . 831 0.830000 | Child | . 832 29.699118 | Ault | . 833 23.000000 | Ault | . 834 18.000000 | Ault | . 835 39.000000 | Ault | . 836 21.000000 | Ault | . 837 29.699118 | Ault | . 838 32.000000 | Ault | . 839 29.699118 | Ault | . 840 20.000000 | Ault | . 841 16.000000 | Ault | . 842 30.000000 | Ault | . 843 34.500000 | Ault | . 844 17.000000 | Ault | . 845 42.000000 | Ault | . 846 29.699118 | Ault | . 847 35.000000 | Ault | . 848 28.000000 | Ault | . 849 29.699118 | Ault | . 850 4.000000 | Child | . 851 74.000000 | Elerly | . 852 9.000000 | Child | . 853 16.000000 | Ault | . 854 44.000000 | Ault | . 855 18.000000 | Ault | . 856 45.000000 | Ault | . 857 51.000000 | Ault | . 858 24.000000 | Ault | . 859 29.699118 | Ault | . 860 41.000000 | Ault | . 861 21.000000 | Ault | . 862 48.000000 | Ault | . 863 29.699118 | Ault | . 864 24.000000 | Ault | . 865 42.000000 | Ault | . 866 27.000000 | Ault | . 867 31.000000 | Ault | . 868 29.699118 | Ault | . 869 4.000000 | Child | . 870 26.000000 | Ault | . 871 47.000000 | Ault | . 872 33.000000 | Ault | . 873 47.000000 | Ault | . 874 28.000000 | Ault | . 875 15.000000 | Child | . 876 20.000000 | Ault | . 877 19.000000 | Ault | . 878 29.699118 | Ault | . 879 56.000000 | Ault | . 880 25.000000 | Ault | . 881 33.000000 | Ault | . 882 22.000000 | Ault | . 883 28.000000 | Ault | . 884 25.000000 | Ault | . 885 39.000000 | Ault | . 886 27.000000 | Ault | . 887 19.000000 | Ault | . 888 29.699118 | Ault | . 889 26.000000 | Ault | . 890 32.000000 | Ault | . def get_category(age): cat = &#39;&#39; if age &lt;= 5: cat = &#39;Baby&#39; elif age &lt;= 12: cat = &#39;Child&#39; elif age &lt;= 18: cat = &#39;Teenager&#39; elif age &lt;= 25: cat = &#39;Student&#39; elif age &lt;= 35: cat = &#39;Young Adult&#39; elif age &lt;= 60: cat = &#39;Adult&#39; else : cat = &#39;Elderly&#39; return cat # lambda 식에서 위에서 생성한 get_category 함수를 반환값으로 지정 # get_category(X)는 입력값으로 &#39;Age&#39; 컬럼 값을 받아 해당하는 cat 반환 titanic_df[&#39;Age_cat&#39;] = titanic_df[&#39;Age&#39;].apply(lambda x : get_category(x)) titanic_df[[&#39;Age&#39;, &#39;Age_cat&#39;]] . Age Age_cat . 0 22.000000 | Student | . 1 38.000000 | Adult | . 2 26.000000 | Young Adult | . 3 35.000000 | Young Adult | . 4 35.000000 | Young Adult | . 5 29.699118 | Young Adult | . 6 54.000000 | Adult | . 7 2.000000 | Baby | . 8 27.000000 | Young Adult | . 9 14.000000 | Teenager | . 10 4.000000 | Baby | . 11 58.000000 | Adult | . 12 20.000000 | Student | . 13 39.000000 | Adult | . 14 14.000000 | Teenager | . 15 55.000000 | Adult | . 16 2.000000 | Baby | . 17 29.699118 | Young Adult | . 18 31.000000 | Young Adult | . 19 29.699118 | Young Adult | . 20 35.000000 | Young Adult | . 21 34.000000 | Young Adult | . 22 15.000000 | Teenager | . 23 28.000000 | Young Adult | . 24 8.000000 | Child | . 25 38.000000 | Adult | . 26 29.699118 | Young Adult | . 27 19.000000 | Student | . 28 29.699118 | Young Adult | . 29 29.699118 | Young Adult | . 30 40.000000 | Adult | . 31 29.699118 | Young Adult | . 32 29.699118 | Young Adult | . 33 66.000000 | Elderly | . 34 28.000000 | Young Adult | . 35 42.000000 | Adult | . 36 29.699118 | Young Adult | . 37 21.000000 | Student | . 38 18.000000 | Teenager | . 39 14.000000 | Teenager | . 40 40.000000 | Adult | . 41 27.000000 | Young Adult | . 42 29.699118 | Young Adult | . 43 3.000000 | Baby | . 44 19.000000 | Student | . 45 29.699118 | Young Adult | . 46 29.699118 | Young Adult | . 47 29.699118 | Young Adult | . 48 29.699118 | Young Adult | . 49 18.000000 | Teenager | . 50 7.000000 | Child | . 51 21.000000 | Student | . 52 49.000000 | Adult | . 53 29.000000 | Young Adult | . 54 65.000000 | Elderly | . 55 29.699118 | Young Adult | . 56 21.000000 | Student | . 57 28.500000 | Young Adult | . 58 5.000000 | Baby | . 59 11.000000 | Child | . 60 22.000000 | Student | . 61 38.000000 | Adult | . 62 45.000000 | Adult | . 63 4.000000 | Baby | . 64 29.699118 | Young Adult | . 65 29.699118 | Young Adult | . 66 29.000000 | Young Adult | . 67 19.000000 | Student | . 68 17.000000 | Teenager | . 69 26.000000 | Young Adult | . 70 32.000000 | Young Adult | . 71 16.000000 | Teenager | . 72 21.000000 | Student | . 73 26.000000 | Young Adult | . 74 32.000000 | Young Adult | . 75 25.000000 | Student | . 76 29.699118 | Young Adult | . 77 29.699118 | Young Adult | . 78 0.830000 | Baby | . 79 30.000000 | Young Adult | . 80 22.000000 | Student | . 81 29.000000 | Young Adult | . 82 29.699118 | Young Adult | . 83 28.000000 | Young Adult | . 84 17.000000 | Teenager | . 85 33.000000 | Young Adult | . 86 16.000000 | Teenager | . 87 29.699118 | Young Adult | . 88 23.000000 | Student | . 89 24.000000 | Student | . 90 29.000000 | Young Adult | . 91 20.000000 | Student | . 92 46.000000 | Adult | . 93 26.000000 | Young Adult | . 94 59.000000 | Adult | . 95 29.699118 | Young Adult | . 96 71.000000 | Elderly | . 97 23.000000 | Student | . 98 34.000000 | Young Adult | . 99 34.000000 | Young Adult | . 100 28.000000 | Young Adult | . 101 29.699118 | Young Adult | . 102 21.000000 | Student | . 103 33.000000 | Young Adult | . 104 37.000000 | Adult | . 105 28.000000 | Young Adult | . 106 21.000000 | Student | . 107 29.699118 | Young Adult | . 108 38.000000 | Adult | . 109 29.699118 | Young Adult | . 110 47.000000 | Adult | . 111 14.500000 | Teenager | . 112 22.000000 | Student | . 113 20.000000 | Student | . 114 17.000000 | Teenager | . 115 21.000000 | Student | . 116 70.500000 | Elderly | . 117 29.000000 | Young Adult | . 118 24.000000 | Student | . 119 2.000000 | Baby | . 120 21.000000 | Student | . 121 29.699118 | Young Adult | . 122 32.500000 | Young Adult | . 123 32.500000 | Young Adult | . 124 54.000000 | Adult | . 125 12.000000 | Child | . 126 29.699118 | Young Adult | . 127 24.000000 | Student | . 128 29.699118 | Young Adult | . 129 45.000000 | Adult | . 130 33.000000 | Young Adult | . 131 20.000000 | Student | . 132 47.000000 | Adult | . 133 29.000000 | Young Adult | . 134 25.000000 | Student | . 135 23.000000 | Student | . 136 19.000000 | Student | . 137 37.000000 | Adult | . 138 16.000000 | Teenager | . 139 24.000000 | Student | . 140 29.699118 | Young Adult | . 141 22.000000 | Student | . 142 24.000000 | Student | . 143 19.000000 | Student | . 144 18.000000 | Teenager | . 145 19.000000 | Student | . 146 27.000000 | Young Adult | . 147 9.000000 | Child | . 148 36.500000 | Adult | . 149 42.000000 | Adult | . 150 51.000000 | Adult | . 151 22.000000 | Student | . 152 55.500000 | Adult | . 153 40.500000 | Adult | . 154 29.699118 | Young Adult | . 155 51.000000 | Adult | . 156 16.000000 | Teenager | . 157 30.000000 | Young Adult | . 158 29.699118 | Young Adult | . 159 29.699118 | Young Adult | . 160 44.000000 | Adult | . 161 40.000000 | Adult | . 162 26.000000 | Young Adult | . 163 17.000000 | Teenager | . 164 1.000000 | Baby | . 165 9.000000 | Child | . 166 29.699118 | Young Adult | . 167 45.000000 | Adult | . 168 29.699118 | Young Adult | . 169 28.000000 | Young Adult | . 170 61.000000 | Elderly | . 171 4.000000 | Baby | . 172 1.000000 | Baby | . 173 21.000000 | Student | . 174 56.000000 | Adult | . 175 18.000000 | Teenager | . 176 29.699118 | Young Adult | . 177 50.000000 | Adult | . 178 30.000000 | Young Adult | . 179 36.000000 | Adult | . 180 29.699118 | Young Adult | . 181 29.699118 | Young Adult | . 182 9.000000 | Child | . 183 1.000000 | Baby | . 184 4.000000 | Baby | . 185 29.699118 | Young Adult | . 186 29.699118 | Young Adult | . 187 45.000000 | Adult | . 188 40.000000 | Adult | . 189 36.000000 | Adult | . 190 32.000000 | Young Adult | . 191 19.000000 | Student | . 192 19.000000 | Student | . 193 3.000000 | Baby | . 194 44.000000 | Adult | . 195 58.000000 | Adult | . 196 29.699118 | Young Adult | . 197 42.000000 | Adult | . 198 29.699118 | Young Adult | . 199 24.000000 | Student | . 200 28.000000 | Young Adult | . 201 29.699118 | Young Adult | . 202 34.000000 | Young Adult | . 203 45.500000 | Adult | . 204 18.000000 | Teenager | . 205 2.000000 | Baby | . 206 32.000000 | Young Adult | . 207 26.000000 | Young Adult | . 208 16.000000 | Teenager | . 209 40.000000 | Adult | . 210 24.000000 | Student | . 211 35.000000 | Young Adult | . 212 22.000000 | Student | . 213 30.000000 | Young Adult | . 214 29.699118 | Young Adult | . 215 31.000000 | Young Adult | . 216 27.000000 | Young Adult | . 217 42.000000 | Adult | . 218 32.000000 | Young Adult | . 219 30.000000 | Young Adult | . 220 16.000000 | Teenager | . 221 27.000000 | Young Adult | . 222 51.000000 | Adult | . 223 29.699118 | Young Adult | . 224 38.000000 | Adult | . 225 22.000000 | Student | . 226 19.000000 | Student | . 227 20.500000 | Student | . 228 18.000000 | Teenager | . 229 29.699118 | Young Adult | . 230 35.000000 | Young Adult | . 231 29.000000 | Young Adult | . 232 59.000000 | Adult | . 233 5.000000 | Baby | . 234 24.000000 | Student | . 235 29.699118 | Young Adult | . 236 44.000000 | Adult | . 237 8.000000 | Child | . 238 19.000000 | Student | . 239 33.000000 | Young Adult | . 240 29.699118 | Young Adult | . 241 29.699118 | Young Adult | . 242 29.000000 | Young Adult | . 243 22.000000 | Student | . 244 30.000000 | Young Adult | . 245 44.000000 | Adult | . 246 25.000000 | Student | . 247 24.000000 | Student | . 248 37.000000 | Adult | . 249 54.000000 | Adult | . 250 29.699118 | Young Adult | . 251 29.000000 | Young Adult | . 252 62.000000 | Elderly | . 253 30.000000 | Young Adult | . 254 41.000000 | Adult | . 255 29.000000 | Young Adult | . 256 29.699118 | Young Adult | . 257 30.000000 | Young Adult | . 258 35.000000 | Young Adult | . 259 50.000000 | Adult | . 260 29.699118 | Young Adult | . 261 3.000000 | Baby | . 262 52.000000 | Adult | . 263 40.000000 | Adult | . 264 29.699118 | Young Adult | . 265 36.000000 | Adult | . 266 16.000000 | Teenager | . 267 25.000000 | Student | . 268 58.000000 | Adult | . 269 35.000000 | Young Adult | . 270 29.699118 | Young Adult | . 271 25.000000 | Student | . 272 41.000000 | Adult | . 273 37.000000 | Adult | . 274 29.699118 | Young Adult | . 275 63.000000 | Elderly | . 276 45.000000 | Adult | . 277 29.699118 | Young Adult | . 278 7.000000 | Child | . 279 35.000000 | Young Adult | . 280 65.000000 | Elderly | . 281 28.000000 | Young Adult | . 282 16.000000 | Teenager | . 283 19.000000 | Student | . 284 29.699118 | Young Adult | . 285 33.000000 | Young Adult | . 286 30.000000 | Young Adult | . 287 22.000000 | Student | . 288 42.000000 | Adult | . 289 22.000000 | Student | . 290 26.000000 | Young Adult | . 291 19.000000 | Student | . 292 36.000000 | Adult | . 293 24.000000 | Student | . 294 24.000000 | Student | . 295 29.699118 | Young Adult | . 296 23.500000 | Student | . 297 2.000000 | Baby | . 298 29.699118 | Young Adult | . 299 50.000000 | Adult | . 300 29.699118 | Young Adult | . 301 29.699118 | Young Adult | . 302 19.000000 | Student | . 303 29.699118 | Young Adult | . 304 29.699118 | Young Adult | . 305 0.920000 | Baby | . 306 29.699118 | Young Adult | . 307 17.000000 | Teenager | . 308 30.000000 | Young Adult | . 309 30.000000 | Young Adult | . 310 24.000000 | Student | . 311 18.000000 | Teenager | . 312 26.000000 | Young Adult | . 313 28.000000 | Young Adult | . 314 43.000000 | Adult | . 315 26.000000 | Young Adult | . 316 24.000000 | Student | . 317 54.000000 | Adult | . 318 31.000000 | Young Adult | . 319 40.000000 | Adult | . 320 22.000000 | Student | . 321 27.000000 | Young Adult | . 322 30.000000 | Young Adult | . 323 22.000000 | Student | . 324 29.699118 | Young Adult | . 325 36.000000 | Adult | . 326 61.000000 | Elderly | . 327 36.000000 | Adult | . 328 31.000000 | Young Adult | . 329 16.000000 | Teenager | . 330 29.699118 | Young Adult | . 331 45.500000 | Adult | . 332 38.000000 | Adult | . 333 16.000000 | Teenager | . 334 29.699118 | Young Adult | . 335 29.699118 | Young Adult | . 336 29.000000 | Young Adult | . 337 41.000000 | Adult | . 338 45.000000 | Adult | . 339 45.000000 | Adult | . 340 2.000000 | Baby | . 341 24.000000 | Student | . 342 28.000000 | Young Adult | . 343 25.000000 | Student | . 344 36.000000 | Adult | . 345 24.000000 | Student | . 346 40.000000 | Adult | . 347 29.699118 | Young Adult | . 348 3.000000 | Baby | . 349 42.000000 | Adult | . 350 23.000000 | Student | . 351 29.699118 | Young Adult | . 352 15.000000 | Teenager | . 353 25.000000 | Student | . 354 29.699118 | Young Adult | . 355 28.000000 | Young Adult | . 356 22.000000 | Student | . 357 38.000000 | Adult | . 358 29.699118 | Young Adult | . 359 29.699118 | Young Adult | . 360 40.000000 | Adult | . 361 29.000000 | Young Adult | . 362 45.000000 | Adult | . 363 35.000000 | Young Adult | . 364 29.699118 | Young Adult | . 365 30.000000 | Young Adult | . 366 60.000000 | Adult | . 367 29.699118 | Young Adult | . 368 29.699118 | Young Adult | . 369 24.000000 | Student | . 370 25.000000 | Student | . 371 18.000000 | Teenager | . 372 19.000000 | Student | . 373 22.000000 | Student | . 374 3.000000 | Baby | . 375 29.699118 | Young Adult | . 376 22.000000 | Student | . 377 27.000000 | Young Adult | . 378 20.000000 | Student | . 379 19.000000 | Student | . 380 42.000000 | Adult | . 381 1.000000 | Baby | . 382 32.000000 | Young Adult | . 383 35.000000 | Young Adult | . 384 29.699118 | Young Adult | . 385 18.000000 | Teenager | . 386 1.000000 | Baby | . 387 36.000000 | Adult | . 388 29.699118 | Young Adult | . 389 17.000000 | Teenager | . 390 36.000000 | Adult | . 391 21.000000 | Student | . 392 28.000000 | Young Adult | . 393 23.000000 | Student | . 394 24.000000 | Student | . 395 22.000000 | Student | . 396 31.000000 | Young Adult | . 397 46.000000 | Adult | . 398 23.000000 | Student | . 399 28.000000 | Young Adult | . 400 39.000000 | Adult | . 401 26.000000 | Young Adult | . 402 21.000000 | Student | . 403 28.000000 | Young Adult | . 404 20.000000 | Student | . 405 34.000000 | Young Adult | . 406 51.000000 | Adult | . 407 3.000000 | Baby | . 408 21.000000 | Student | . 409 29.699118 | Young Adult | . 410 29.699118 | Young Adult | . 411 29.699118 | Young Adult | . 412 33.000000 | Young Adult | . 413 29.699118 | Young Adult | . 414 44.000000 | Adult | . 415 29.699118 | Young Adult | . 416 34.000000 | Young Adult | . 417 18.000000 | Teenager | . 418 30.000000 | Young Adult | . 419 10.000000 | Child | . 420 29.699118 | Young Adult | . 421 21.000000 | Student | . 422 29.000000 | Young Adult | . 423 28.000000 | Young Adult | . 424 18.000000 | Teenager | . 425 29.699118 | Young Adult | . 426 28.000000 | Young Adult | . 427 19.000000 | Student | . 428 29.699118 | Young Adult | . 429 32.000000 | Young Adult | . 430 28.000000 | Young Adult | . 431 29.699118 | Young Adult | . 432 42.000000 | Adult | . 433 17.000000 | Teenager | . 434 50.000000 | Adult | . 435 14.000000 | Teenager | . 436 21.000000 | Student | . 437 24.000000 | Student | . 438 64.000000 | Elderly | . 439 31.000000 | Young Adult | . 440 45.000000 | Adult | . 441 20.000000 | Student | . 442 25.000000 | Student | . 443 28.000000 | Young Adult | . 444 29.699118 | Young Adult | . 445 4.000000 | Baby | . 446 13.000000 | Teenager | . 447 34.000000 | Young Adult | . 448 5.000000 | Baby | . 449 52.000000 | Adult | . 450 36.000000 | Adult | . 451 29.699118 | Young Adult | . 452 30.000000 | Young Adult | . 453 49.000000 | Adult | . 454 29.699118 | Young Adult | . 455 29.000000 | Young Adult | . 456 65.000000 | Elderly | . 457 29.699118 | Young Adult | . 458 50.000000 | Adult | . 459 29.699118 | Young Adult | . 460 48.000000 | Adult | . 461 34.000000 | Young Adult | . 462 47.000000 | Adult | . 463 48.000000 | Adult | . 464 29.699118 | Young Adult | . 465 38.000000 | Adult | . 466 29.699118 | Young Adult | . 467 56.000000 | Adult | . 468 29.699118 | Young Adult | . 469 0.750000 | Baby | . 470 29.699118 | Young Adult | . 471 38.000000 | Adult | . 472 33.000000 | Young Adult | . 473 23.000000 | Student | . 474 22.000000 | Student | . 475 29.699118 | Young Adult | . 476 34.000000 | Young Adult | . 477 29.000000 | Young Adult | . 478 22.000000 | Student | . 479 2.000000 | Baby | . 480 9.000000 | Child | . 481 29.699118 | Young Adult | . 482 50.000000 | Adult | . 483 63.000000 | Elderly | . 484 25.000000 | Student | . 485 29.699118 | Young Adult | . 486 35.000000 | Young Adult | . 487 58.000000 | Adult | . 488 30.000000 | Young Adult | . 489 9.000000 | Child | . 490 29.699118 | Young Adult | . 491 21.000000 | Student | . 492 55.000000 | Adult | . 493 71.000000 | Elderly | . 494 21.000000 | Student | . 495 29.699118 | Young Adult | . 496 54.000000 | Adult | . 497 29.699118 | Young Adult | . 498 25.000000 | Student | . 499 24.000000 | Student | . 500 17.000000 | Teenager | . 501 21.000000 | Student | . 502 29.699118 | Young Adult | . 503 37.000000 | Adult | . 504 16.000000 | Teenager | . 505 18.000000 | Teenager | . 506 33.000000 | Young Adult | . 507 29.699118 | Young Adult | . 508 28.000000 | Young Adult | . 509 26.000000 | Young Adult | . 510 29.000000 | Young Adult | . 511 29.699118 | Young Adult | . 512 36.000000 | Adult | . 513 54.000000 | Adult | . 514 24.000000 | Student | . 515 47.000000 | Adult | . 516 34.000000 | Young Adult | . 517 29.699118 | Young Adult | . 518 36.000000 | Adult | . 519 32.000000 | Young Adult | . 520 30.000000 | Young Adult | . 521 22.000000 | Student | . 522 29.699118 | Young Adult | . 523 44.000000 | Adult | . 524 29.699118 | Young Adult | . 525 40.500000 | Adult | . 526 50.000000 | Adult | . 527 29.699118 | Young Adult | . 528 39.000000 | Adult | . 529 23.000000 | Student | . 530 2.000000 | Baby | . 531 29.699118 | Young Adult | . 532 17.000000 | Teenager | . 533 29.699118 | Young Adult | . 534 30.000000 | Young Adult | . 535 7.000000 | Child | . 536 45.000000 | Adult | . 537 30.000000 | Young Adult | . 538 29.699118 | Young Adult | . 539 22.000000 | Student | . 540 36.000000 | Adult | . 541 9.000000 | Child | . 542 11.000000 | Child | . 543 32.000000 | Young Adult | . 544 50.000000 | Adult | . 545 64.000000 | Elderly | . 546 19.000000 | Student | . 547 29.699118 | Young Adult | . 548 33.000000 | Young Adult | . 549 8.000000 | Child | . 550 17.000000 | Teenager | . 551 27.000000 | Young Adult | . 552 29.699118 | Young Adult | . 553 22.000000 | Student | . 554 22.000000 | Student | . 555 62.000000 | Elderly | . 556 48.000000 | Adult | . 557 29.699118 | Young Adult | . 558 39.000000 | Adult | . 559 36.000000 | Adult | . 560 29.699118 | Young Adult | . 561 40.000000 | Adult | . 562 28.000000 | Young Adult | . 563 29.699118 | Young Adult | . 564 29.699118 | Young Adult | . 565 24.000000 | Student | . 566 19.000000 | Student | . 567 29.000000 | Young Adult | . 568 29.699118 | Young Adult | . 569 32.000000 | Young Adult | . 570 62.000000 | Elderly | . 571 53.000000 | Adult | . 572 36.000000 | Adult | . 573 29.699118 | Young Adult | . 574 16.000000 | Teenager | . 575 19.000000 | Student | . 576 34.000000 | Young Adult | . 577 39.000000 | Adult | . 578 29.699118 | Young Adult | . 579 32.000000 | Young Adult | . 580 25.000000 | Student | . 581 39.000000 | Adult | . 582 54.000000 | Adult | . 583 36.000000 | Adult | . 584 29.699118 | Young Adult | . 585 18.000000 | Teenager | . 586 47.000000 | Adult | . 587 60.000000 | Adult | . 588 22.000000 | Student | . 589 29.699118 | Young Adult | . 590 35.000000 | Young Adult | . 591 52.000000 | Adult | . 592 47.000000 | Adult | . 593 29.699118 | Young Adult | . 594 37.000000 | Adult | . 595 36.000000 | Adult | . 596 29.699118 | Young Adult | . 597 49.000000 | Adult | . 598 29.699118 | Young Adult | . 599 49.000000 | Adult | . 600 24.000000 | Student | . 601 29.699118 | Young Adult | . 602 29.699118 | Young Adult | . 603 44.000000 | Adult | . 604 35.000000 | Young Adult | . 605 36.000000 | Adult | . 606 30.000000 | Young Adult | . 607 27.000000 | Young Adult | . 608 22.000000 | Student | . 609 40.000000 | Adult | . 610 39.000000 | Adult | . 611 29.699118 | Young Adult | . 612 29.699118 | Young Adult | . 613 29.699118 | Young Adult | . 614 35.000000 | Young Adult | . 615 24.000000 | Student | . 616 34.000000 | Young Adult | . 617 26.000000 | Young Adult | . 618 4.000000 | Baby | . 619 26.000000 | Young Adult | . 620 27.000000 | Young Adult | . 621 42.000000 | Adult | . 622 20.000000 | Student | . 623 21.000000 | Student | . 624 21.000000 | Student | . 625 61.000000 | Elderly | . 626 57.000000 | Adult | . 627 21.000000 | Student | . 628 26.000000 | Young Adult | . 629 29.699118 | Young Adult | . 630 80.000000 | Elderly | . 631 51.000000 | Adult | . 632 32.000000 | Young Adult | . 633 29.699118 | Young Adult | . 634 9.000000 | Child | . 635 28.000000 | Young Adult | . 636 32.000000 | Young Adult | . 637 31.000000 | Young Adult | . 638 41.000000 | Adult | . 639 29.699118 | Young Adult | . 640 20.000000 | Student | . 641 24.000000 | Student | . 642 2.000000 | Baby | . 643 29.699118 | Young Adult | . 644 0.750000 | Baby | . 645 48.000000 | Adult | . 646 19.000000 | Student | . 647 56.000000 | Adult | . 648 29.699118 | Young Adult | . 649 23.000000 | Student | . 650 29.699118 | Young Adult | . 651 18.000000 | Teenager | . 652 21.000000 | Student | . 653 29.699118 | Young Adult | . 654 18.000000 | Teenager | . 655 24.000000 | Student | . 656 29.699118 | Young Adult | . 657 32.000000 | Young Adult | . 658 23.000000 | Student | . 659 58.000000 | Adult | . 660 50.000000 | Adult | . 661 40.000000 | Adult | . 662 47.000000 | Adult | . 663 36.000000 | Adult | . 664 20.000000 | Student | . 665 32.000000 | Young Adult | . 666 25.000000 | Student | . 667 29.699118 | Young Adult | . 668 43.000000 | Adult | . 669 29.699118 | Young Adult | . 670 40.000000 | Adult | . 671 31.000000 | Young Adult | . 672 70.000000 | Elderly | . 673 31.000000 | Young Adult | . 674 29.699118 | Young Adult | . 675 18.000000 | Teenager | . 676 24.500000 | Student | . 677 18.000000 | Teenager | . 678 43.000000 | Adult | . 679 36.000000 | Adult | . 680 29.699118 | Young Adult | . 681 27.000000 | Young Adult | . 682 20.000000 | Student | . 683 14.000000 | Teenager | . 684 60.000000 | Adult | . 685 25.000000 | Student | . 686 14.000000 | Teenager | . 687 19.000000 | Student | . 688 18.000000 | Teenager | . 689 15.000000 | Teenager | . 690 31.000000 | Young Adult | . 691 4.000000 | Baby | . 692 29.699118 | Young Adult | . 693 25.000000 | Student | . 694 60.000000 | Adult | . 695 52.000000 | Adult | . 696 44.000000 | Adult | . 697 29.699118 | Young Adult | . 698 49.000000 | Adult | . 699 42.000000 | Adult | . 700 18.000000 | Teenager | . 701 35.000000 | Young Adult | . 702 18.000000 | Teenager | . 703 25.000000 | Student | . 704 26.000000 | Young Adult | . 705 39.000000 | Adult | . 706 45.000000 | Adult | . 707 42.000000 | Adult | . 708 22.000000 | Student | . 709 29.699118 | Young Adult | . 710 24.000000 | Student | . 711 29.699118 | Young Adult | . 712 48.000000 | Adult | . 713 29.000000 | Young Adult | . 714 52.000000 | Adult | . 715 19.000000 | Student | . 716 38.000000 | Adult | . 717 27.000000 | Young Adult | . 718 29.699118 | Young Adult | . 719 33.000000 | Young Adult | . 720 6.000000 | Child | . 721 17.000000 | Teenager | . 722 34.000000 | Young Adult | . 723 50.000000 | Adult | . 724 27.000000 | Young Adult | . 725 20.000000 | Student | . 726 30.000000 | Young Adult | . 727 29.699118 | Young Adult | . 728 25.000000 | Student | . 729 25.000000 | Student | . 730 29.000000 | Young Adult | . 731 11.000000 | Child | . 732 29.699118 | Young Adult | . 733 23.000000 | Student | . 734 23.000000 | Student | . 735 28.500000 | Young Adult | . 736 48.000000 | Adult | . 737 35.000000 | Young Adult | . 738 29.699118 | Young Adult | . 739 29.699118 | Young Adult | . 740 29.699118 | Young Adult | . 741 36.000000 | Adult | . 742 21.000000 | Student | . 743 24.000000 | Student | . 744 31.000000 | Young Adult | . 745 70.000000 | Elderly | . 746 16.000000 | Teenager | . 747 30.000000 | Young Adult | . 748 19.000000 | Student | . 749 31.000000 | Young Adult | . 750 4.000000 | Baby | . 751 6.000000 | Child | . 752 33.000000 | Young Adult | . 753 23.000000 | Student | . 754 48.000000 | Adult | . 755 0.670000 | Baby | . 756 28.000000 | Young Adult | . 757 18.000000 | Teenager | . 758 34.000000 | Young Adult | . 759 33.000000 | Young Adult | . 760 29.699118 | Young Adult | . 761 41.000000 | Adult | . 762 20.000000 | Student | . 763 36.000000 | Adult | . 764 16.000000 | Teenager | . 765 51.000000 | Adult | . 766 29.699118 | Young Adult | . 767 30.500000 | Young Adult | . 768 29.699118 | Young Adult | . 769 32.000000 | Young Adult | . 770 24.000000 | Student | . 771 48.000000 | Adult | . 772 57.000000 | Adult | . 773 29.699118 | Young Adult | . 774 54.000000 | Adult | . 775 18.000000 | Teenager | . 776 29.699118 | Young Adult | . 777 5.000000 | Baby | . 778 29.699118 | Young Adult | . 779 43.000000 | Adult | . 780 13.000000 | Teenager | . 781 17.000000 | Teenager | . 782 29.000000 | Young Adult | . 783 29.699118 | Young Adult | . 784 25.000000 | Student | . 785 25.000000 | Student | . 786 18.000000 | Teenager | . 787 8.000000 | Child | . 788 1.000000 | Baby | . 789 46.000000 | Adult | . 790 29.699118 | Young Adult | . 791 16.000000 | Teenager | . 792 29.699118 | Young Adult | . 793 29.699118 | Young Adult | . 794 25.000000 | Student | . 795 39.000000 | Adult | . 796 49.000000 | Adult | . 797 31.000000 | Young Adult | . 798 30.000000 | Young Adult | . 799 30.000000 | Young Adult | . 800 34.000000 | Young Adult | . 801 31.000000 | Young Adult | . 802 11.000000 | Child | . 803 0.420000 | Baby | . 804 27.000000 | Young Adult | . 805 31.000000 | Young Adult | . 806 39.000000 | Adult | . 807 18.000000 | Teenager | . 808 39.000000 | Adult | . 809 33.000000 | Young Adult | . 810 26.000000 | Young Adult | . 811 39.000000 | Adult | . 812 35.000000 | Young Adult | . 813 6.000000 | Child | . 814 30.500000 | Young Adult | . 815 29.699118 | Young Adult | . 816 23.000000 | Student | . 817 31.000000 | Young Adult | . 818 43.000000 | Adult | . 819 10.000000 | Child | . 820 52.000000 | Adult | . 821 27.000000 | Young Adult | . 822 38.000000 | Adult | . 823 27.000000 | Young Adult | . 824 2.000000 | Baby | . 825 29.699118 | Young Adult | . 826 29.699118 | Young Adult | . 827 1.000000 | Baby | . 828 29.699118 | Young Adult | . 829 62.000000 | Elderly | . 830 15.000000 | Teenager | . 831 0.830000 | Baby | . 832 29.699118 | Young Adult | . 833 23.000000 | Student | . 834 18.000000 | Teenager | . 835 39.000000 | Adult | . 836 21.000000 | Student | . 837 29.699118 | Young Adult | . 838 32.000000 | Young Adult | . 839 29.699118 | Young Adult | . 840 20.000000 | Student | . 841 16.000000 | Teenager | . 842 30.000000 | Young Adult | . 843 34.500000 | Young Adult | . 844 17.000000 | Teenager | . 845 42.000000 | Adult | . 846 29.699118 | Young Adult | . 847 35.000000 | Young Adult | . 848 28.000000 | Young Adult | . 849 29.699118 | Young Adult | . 850 4.000000 | Baby | . 851 74.000000 | Elderly | . 852 9.000000 | Child | . 853 16.000000 | Teenager | . 854 44.000000 | Adult | . 855 18.000000 | Teenager | . 856 45.000000 | Adult | . 857 51.000000 | Adult | . 858 24.000000 | Student | . 859 29.699118 | Young Adult | . 860 41.000000 | Adult | . 861 21.000000 | Student | . 862 48.000000 | Adult | . 863 29.699118 | Young Adult | . 864 24.000000 | Student | . 865 42.000000 | Adult | . 866 27.000000 | Young Adult | . 867 31.000000 | Young Adult | . 868 29.699118 | Young Adult | . 869 4.000000 | Baby | . 870 26.000000 | Young Adult | . 871 47.000000 | Adult | . 872 33.000000 | Young Adult | . 873 47.000000 | Adult | . 874 28.000000 | Young Adult | . 875 15.000000 | Teenager | . 876 20.000000 | Student | . 877 19.000000 | Student | . 878 29.699118 | Young Adult | . 879 56.000000 | Adult | . 880 25.000000 | Student | . 881 33.000000 | Young Adult | . 882 22.000000 | Student | . 883 28.000000 | Young Adult | . 884 25.000000 | Student | . 885 39.000000 | Adult | . 886 27.000000 | Young Adult | . 887 19.000000 | Student | . 888 29.699118 | Young Adult | . 889 26.000000 | Young Adult | . 890 32.000000 | Young Adult | .",
            "url": "https://hyunwoo24.github.io/blog/2022/07/11/pandas.html",
            "relUrl": "/2022/07/11/pandas.html",
            "date": " • Jul 11, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Numpy ndarray",
            "content": "import numpy as np . list1 = [1, 2, 3] print(&#39;list1 type: &#39;, type(list1)) . list1 type: &lt;class &#39;list&#39;&gt; . array1 = np.array(list1) print(&#39;array1 type:&#39;, type(array1)) print(&#39;array1 type form:&#39;, array1.shape) . array1 type: &lt;class &#39;numpy.ndarray&#39;&gt; array1 type form: (3,) . array2 = np.array([[1,2,3], [2,3,4]]) print(&#39;array2 type:&#39;, type(array2)) print(&#39;array2 type form:&#39;, array2.shape) . array2 type: &lt;class &#39;numpy.ndarray&#39;&gt; array2 type form: (2, 3) . array3 = np.array([[1,2,3]]) print(&#39;array3 type:&#39;, type(array3)) print(&#39;array3 type form:&#39;, array3.shape) . array3 type: &lt;class &#39;numpy.ndarray&#39;&gt; array3 type form: (1, 3) . print(&#39;array1: {:0}, array2 {:1}, array3 {:2}&#39;.format(array1.ndim, array2.ndim, array3.ndim)) . array1: 1, array2 2, array3 2 . ndarray&#51032; &#45936;&#51060;&#53552; &#53440;&#51077; . list1 = [1,2,3] print(type(list1)) . &lt;class &#39;list&#39;&gt; . array1=np.array(list1) print(type(array1)) print(array1, array1.dtype) . &lt;class &#39;numpy.ndarray&#39;&gt; [1 2 3] int32 . list2 = [1, 2, &#39;test&#39;] array2 = np.array(list2) print(array2, array2.dtype) . [&#39;1&#39; &#39;2&#39; &#39;test&#39;] &lt;U11 . list3 =[1,2,3.0] array3 = np.array(list3) print(array3, array3.dtype) . [1. 2. 3.] float64 . array_int = np.array([1,2,3]) array_float = array_int.astype(&#39;float64&#39;) print(array_float, array_float.dtype) . [1. 2. 3.] float64 . array_int1 = array_float.astype(&#39;int32&#39;) print(array_int1, array_int1.dtype) . [1 2 3] int32 . array_float1 = np.array([1.1, 2.2, 3.3]) array_int2 = array_float.astype(&#39;int32&#39;) print(array_int2, array_int2.dtype) . [1 2 3] int32 . ndarray&#47484; &#54200;&#47532;&#54616;&#44172; &#49373;&#49457;&#54616;&#44592;-arange, zeros, ones . sequence_array = np.arange(10) print(sequence_array) print(sequence_array.dtype, sequence_array.shape) . [0 1 2 3 4 5 6 7 8 9] int32 (10,) . zero_array = np.zeros((3,2), dtype = &#39;int32&#39;) print(zero_array) print(zero_array.dtype, zero_array.shape) . [[0 0] [0 0] [0 0]] int32 (3, 2) . one_array = np.ones((3,2)) print(one_array) print(one_array.dtype, one_array.shape) . [[1. 1.] [1. 1.] [1. 1.]] float64 (3, 2) . ndarray&#51032; &#52264;&#50896;&#44284; &#53356;&#44592;&#47484; &#48320;&#44221;&#54616;&#45716; reshape . array1 = np.arange(10) print(&#39;array1: n&#39;, array1) . array1: [0 1 2 3 4 5 6 7 8 9] . array2 = array1.reshape(2,5) print(&#39;array2: n&#39;, array2) . array2: [[0 1 2 3 4] [5 6 7 8 9]] . array3 = array2.reshape(5,2) print(&#39;array3: n&#39;, array3) . array3: [[0 1] [2 3] [4 5] [6 7] [8 9]] . array3.reshape(10, 1) . array([[0], [1], [2], [3], [4], [5], [6], [7], [8], [9]]) . array1 = np.arange(10) print(array1) . [0 1 2 3 4 5 6 7 8 9] . array2 = array1.reshape(-1, 5) print(&#39;array2 n&#39;, array2) . array2 [[0 1 2 3 4] [5 6 7 8 9]] . array3 = array1.reshape(5, -1) print(&#39;array3 n&#39;, array3) . array3 [[0 1] [2 3] [4 5] [6 7] [8 9]] . array1 = np.arange(10) array4 = array1.reshape(-1, 1) print(array4) . [[0] [1] [2] [3] [4] [5] [6] [7] [8] [9]] . array1 = np.arange(8) array3d = array1.reshape(2,2,2) print(&#39;array3d n&#39;, array3d) print(&#39; narray3d tolist: &#39;, array3d.dtype) print(&#39;array3d tolist: &#39;, array3d.shape) print(&#39;array3d tolist: &#39;, array3d.tolist()) . array3d [[[0 1] [2 3]] [[4 5] [6 7]]] array3d tolist: int32 array3d tolist: (2, 2, 2) array3d tolist: [[[0, 1], [2, 3]], [[4, 5], [6, 7]]] . array5 = array3d.reshape(-1,1) print(&#39;array5 n&#39;, array5.tolist()) print(&#39;array5 n&#39;, array5.shape) . array5 [[0], [1], [2], [3], [4], [5], [6], [7]] array5 (8, 1) . array6 = array1.reshape(-1,1) print(&#39;array6 n&#39;, array6.tolist()) print(&#39;array6 n&#39;, array6.shape) . array6 [[0], [1], [2], [3], [4], [5], [6], [7]] array6 (8, 1) . &#45336;&#54028;&#51060; ndarray&#51032; &#45936;&#51060;&#53552; &#49464;&#53944; &#49440;&#53469;&#54616;&#44592; - indexing . 단일 인덱싱 | . array1 = np.arange(start=1, stop=10) print(&#39;array1: &#39;, array1) . array1: [1 2 3 4 5 6 7 8 9] . array1[2] . 3 . type(array1[2]) . numpy.int32 . print(&#39;맨 뒤의 값:&#39;, array1[-1], &#39;, 맨 뒤에서 두번째 값: &#39;, array1[-2]) . 맨 뒤의 값: 9 , 맨 뒤에서 두번째 값: 8 . array1d = np.arange(start=1, stop=10) array2d = array1d.reshape(3,3) print(array2d) . [[1 2 3] [4 5 6] [7 8 9]] . print(&#39;row=0, col=0 : &#39;, array2d[0,0]) print(&#39;row=0, col=1 : &#39;, array2d[0,1]) print(&#39;row=1, col=0 : &#39;, array2d[1,0]) print(&#39;row=1, col=1 : &#39;, array2d[1,1]) . row=0, col=0 : 1 row=0, col=1 : 2 row=1, col=0 : 4 row=1, col=1 : 5 . 슬라이싱 인덱싱 | . array1 = np.arange(1,10) print(&#39;array1: &#39;, array1) array3 = array1[0:3] print(&#39;array3: &#39;, array3) print(type(array3)) print(array3.dtype) . array1: [1 2 3 4 5 6 7 8 9] array3: [1 2 3] &lt;class &#39;numpy.ndarray&#39;&gt; int32 . array1 = np.arange(start=1, stop=10) array4 = array1[0:3] print(array4) . [1 2 3] . array1d = np.arange(1, 21) array2d = array1d.reshape(4,5) print(array2d) . [[ 1 2 3 4 5] [ 6 7 8 9 10] [11 12 13 14 15] [16 17 18 19 20]] . print(&#39;array2d[0:2, 0:2] n&#39;, array2d[0:2, 0:2]) print(&#39;array2d[1:3, 0:3] n&#39;, array2d[1:3, 0:3]) print(&#39;array2d[1:3, :] n&#39;, array2d[1:3, :]) print(&#39;array2d[:,:] n&#39;, array2d[:,:]) print(&#39;array2d[0:2, 0:2] n&#39;, array2d[:2, 1:]) print(&#39;array2d[0:2, 0:2] n&#39;, array2d[:2, 0]) . 0:2, 0:2 [[1 2] [6 7]] [[ 6 7 8] [11 12 13]] [[ 6 7 8 9 10] [11 12 13 14 15]] [[ 1 2 3 4 5] [ 6 7 8 9 10] [11 12 13 14 15] [16 17 18 19 20]] [[ 2 3 4 5] [ 7 8 9 10]] [1 6] . print(array2d[0]) print(array2d[1]) print(array2d[:2, :3]) . [1 2 3 4 5] [ 6 7 8 9 10] [[1 2 3] [6 7 8]] . print(array2d[0].shape) print(array2d[1].shape) print(array2d[3].shape) print(array2d[:2, :3].shape) . (5,) (5,) (5,) (2, 3) . 팬시 인덱싱 | . array1d = np.arange(start=1, stop=10) print(array1d) array2 = array1d[array1d &lt; 5] print(array2) arrya3 = array1d[array1d &gt; 5] print(arrya3) . [1 2 3 4 5 6 7 8 9] [1 2 3 4] [6 7 8 9] . array1d &gt; 5 . array([False, False, False, False, False, True, True, True, True]) . val = array1d &gt; 5 print(val, type(val), val.shape) . [False False False False False True True True True] &lt;class &#39;numpy.ndarray&#39;&gt; (9,) . boolean_indexes = np.array([False, False, False, False, False, True, True, True, True]) array3 = array1d[boolean_indexes] print(array3) . [6 7 8 9] . array1d = np.arange(1, 10) target = [] for i in range(0, 9): if array1d[i] &gt; 5: target.append(array1d[i]) array_selected = np.array(target) print(array_selected) . [6 7 8 9] . indexes = np.array([5,6,7,8]) array4 = array1d[indexes] print(array4) . [6 7 8 9] . &#54665;&#47148;&#51032; &#51221;&#47148;-sort()&#50752; argsort() . 행렬 정렬 | . org_array = np.array([3, 1, 9, 5]) print(org_array) . [3 1 9 5] . sort_array1 = np.sort(org_array) print(sort_array1) print(org_array) . [1 3 5 9] [3 1 9 5] . sort_array2 = org_array.sort() print(sort_array2) print(org_array) . None [1 3 5 9] . org_array . array([1, 3, 5, 9]) . sort_array1_desc = np.sort(org_array)[::-1] print(sort_array1_desc) . [9 5 3 1] . array2d = np.array([[8, 12], [7, 1]]) sort_array2d_axis0 = np.sort(array2d, axis=0) print(sort_array2d_axis0) sort_array2d_axis1 = np.sort(array2d, axis=1) print(sort_array2d_axis1) . [[ 7 1] [ 8 12]] [[ 8 12] [ 1 7]] . 정렬 행렬의 인덱스 변환 | . org_array = np.array([3,1, 9, 5]) sort_indices = np.argsort(org_array) print(type(sort_indices)) print(sort_indices) . &lt;class &#39;numpy.ndarray&#39;&gt; [1 0 3 2] . org_array = np.array([3, 1, 9, 5]) sort_indices_desc = np.argsort(org_array)[::-1] print(sort_indices_desc) . [2 3 0 1] . name_array = np.array([&#39;John&#39;, &#39;Mike&#39;, &#39;Sarah&#39;, &#39;Kate&#39;, &#39;Samuel&#39;]) score_array = np.array([76, 95, 84, 98, 88]) sort_indices_asc = np.argsort(score_array) print(sort_indices_asc) print(name_array[sort_indices_asc]) . [0 2 4 1 3] [&#39;John&#39; &#39;Sarah&#39; &#39;Samuel&#39; &#39;Mike&#39; &#39;Kate&#39;] . &#49440;&#54805;&#45824;&#49688; &#50672;&#49328;-&#54665;&#47148; &#45236;&#51201;&#44284; &#51204;&#52824; &#54665;&#47148; &#44396;&#54616;&#44592; . 행렬 내적 | . A = np.array([[1,2,3,], [4,5,6]]) B = np.array([[7,8], [9, 10], [11, 12]]) dot_product = np.dot(A, B) print(dot_product) . [[ 58 64] [139 154]] . 전치 행렬 | . A = np.array([[1,2,3,], [4,5,6]]) B = np.array([[7,8], [9, 10], [11, 12]]) transpose_mat_a = np.transpose(A) transpose_mat_b = np.transpose(B) print(transpose_mat_a) print(transpose_mat_b) . [[1 4] [2 5] [3 6]] [[ 7 9 11] [ 8 10 12]] .",
            "url": "https://hyunwoo24.github.io/blog/2022/07/08/numpy.html",
            "relUrl": "/2022/07/08/numpy.html",
            "date": " • Jul 8, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://hyunwoo24.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://hyunwoo24.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://hyunwoo24.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hyunwoo24.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}